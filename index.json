[{"categories":[],"contents":"这是个个人通用跳转页. 我比较忙, 先这样了\n账户信息\n# Blog # Github # Gitee # Bilibili 跳转类目\n# About Me # Gold Tomb Boiling King # Build Blog like this # Greak Work: EduExchM ","permalink":"https://spadektlsg.github.io/p/jumper/","tags":[],"title":"Jumper"},{"categories":[],"contents":" # 证明 一共是两个仓库, 这个本来是私密的后台, 但是为了证明我是真的自制了CIDI流水线, 所以就公开了.\n参考搭建可以看我的这篇博客click here\n独立脚本开发: 根目录\ncleanBuildViewAll.bat newPostBlog.bat Github Actions: .github/workflows See .github/workflows/main.yml\n","permalink":"https://spadektlsg.github.io/p/%E5%8D%9A%E5%AE%A2cidi%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%AF%81%E6%98%8E/","tags":[],"title":"博客CIDI流水线证明"},{"categories":[],"contents":" # TODO 无为 # Bugfix 右侧大纲栏一级标题不显示 归档标签问题 友链页面 搜索页面 合集系统 ","permalink":"https://spadektlsg.github.io/p/info/","tags":[],"title":"INFO"},{"categories":[],"contents":" # Welcome\u0026hellip; 这是某位曾自称\u0026quot;在电子鸦片与无限制内卷战中度过了百无聊赖的大学生活\u0026quot;家伙的博客\n这个夏天他背起了行囊, 从裕华西路一直走到了雨花西路, 不知道还能走多远, 现在他还在走着\n他的博客现在已经被你发现了, 你很幸运\n# Release Note 2024-04-27 走向地上 2024-04-28 人间回忆录 2024-10-01 金陵耐烧王 Gold Tomb Boiling K. 2024-10-08 联动 # Future Plan 能跑就行\u0026hellip;?\nCopyright © 2024 SpadeKTLSG, All Rights Reserved\n","permalink":"https://spadektlsg.github.io/p/readme/","tags":[],"title":"README"},{"categories":[],"contents":"\u0026ndash;后记\n‍\n实习结束后的简历和技术总结等内容\n为什么没有东西? 因为这部分内容太私密了, 私密马赛, 找时间逐渐公开吧.\n","permalink":"https://spadektlsg.github.io/p/%E7%99%BE%E5%B7%9D%E8%B5%B4%E6%B5%B7-iv/","tags":[],"title":"百川赴海 IV"},{"categories":[],"contents":"\u0026ndash;个人实习事件总结\n‍\n整合个人实习日报作的实习事件流水\n‍\n‍\n‍\n# 项目内容 整理自\u0026rsquo;端点实习任务归档\u0026rsquo;, 只记录有价值的点的总结\n这些点可以扩展\n‍\n# 权限过滤完整需求 完整业务, 复杂且暴露内部 bug\n‍\n‍\n# Execl 导入数据 不是简单的导入, 技术力 MAX\n‍\n‍\n# 生产写 SQL 导入数据使用 Python 脚本实现 帅气的运维操作, 自动化生成 SQL\n‍\n‍\n# 自带低代码中台导出数据 不说话装高手, 直接配完了\n‍\n‍\n# 接口对接加字段拷贝属性 打倒大牛, 直接 BeanUtils.copy 完事\n‍\n‍\n# debug 二分查找找断点 定位速度堪比 1 年经验开发\n‍\n‍\n# 国际化 ENG 大师 配国际化多快好省!\n‍\n‍\n# 日常事件 整理自日报归档\n‍\n# 买一送一 往客户 uat 环境拉 shit, 狂写空指针, 还要狠狠报错控制台, 搅了个天翻地覆\n这下给我的 ldbms 狠狠刷了一波流量, 不亏.\n(客户看到手里怎么白送了一个图书馆管理系统, 笑拉了)\n昨天在 UAT 的提交被客户看到了, 不合规, 需要换到测试环境去. 我还是先把代码 bug 改了, 然后再计议为妙. 目前经过讨论已解决, 转移到 develop 分支去了.\n发现 git 用户名称不对劲, 直接继承了我 Github 的账号, 修改为项目组内的角色\n‍\n‍\n# 删库跑路 下午有个元数据上报错误事态, 排查嫌疑\n有使用命令行 只更新了 trade 模块 能够有权限跳过部署确认 拉取过旧分支 IP 在南京 听着就是我啊, 但是各种细节又完全对不上\u0026hellip;我自认为是完全按照 MT 给的规约进行操作的, 除非不可控因素应该不会出乱子\n‍\n# 持续更新中\u0026hellip;\u0026hellip; 后面没出就是太监了! ‍\n","permalink":"https://spadektlsg.github.io/p/%E5%9C%A8%E5%B7%9D%E4%B8%8A%E6%9B%B0-iii/","tags":[],"title":"在川上曰 III"},{"categories":[],"contents":"\u0026ndash;个人实习学习能力提升总结\n‍\n个人实习除内部框架之外的学习提升总结\n‍\n‍\n# 提升能力点 ‍\n# 操作系统 MAC 上手了\n‍\n# 技术栈 几乎没有, 或者说只能靠 doc 文档和借鉴抄才能找得到\n‍\n项目确实需要的复杂的东西较少, JavaEE 就足够了加个 Stream 流加个 Map, 剩下的交给封装的框架实现\n主要是理解需求, 基础范畴内的东西都能作出来. 除非是这两天的这个逻辑校验的东西, 很难搞\n‍\n‍\n# 代码风格 对于我的空指针的控制, 有很大提升; 校验入参, 避免空值这类\n‍\n# 操作流程 例如需求单, bug 单的处理, 文档的阅读, 找人问事的路线等\n‍\n# 排查问题 远程调试, 生产环境写 SQL, 前端调试\n工作内容, 排查空指针什么的问题, 在这么多数据库表的情况下, 还有这么多生产库与环境的情况下, 进行一个定位和搜索, 绝对是一件难事.\n很多情况就是基础 JavaEE 的问题, 但是没搞好还是很难.\n‍\n‍\n‍\n# 沟通能力 与同组开发, 不同组开发, 测试, 产品, PM, BOSS 该如何交流的方法\n提交任务, Ding 的使用等\n‍\n‍\n‍\n# Git 能力 ‍\n正要提交到控制台时候, 发生重大 git 错误: 我将刚刚提交的 commit 删除了, 这导致我半天的产出灰飞烟灭\u0026hellip;但是迅速通过查找 hash 值恢复了工作区\n‍\n‍\n# 上手项目 这是润物无声的, 只有观察过许多有价值的他人代码后才能领悟到\n确实没有遇见过这么复杂的业务逻辑, 字段方面就几十个上百. 数据库更别说. 相较于其他组, 这是晶科, 全球第三的光伏供应商, 最赚钱的地方. 并且有最高的 QPS 80 左右\n‍\n‍\n‍\n# 编码能力点 整理自\u0026quot;端点实习代码风格评价\u0026quot;总集, 只记录对后续有价值的部分\n‍\n‍\n# 探索点 ‍\n自定义注解防止表单重复提交\npublic @interface RepeatSubmit { // 缓存过期时间，默认为10秒 int expireSeconds() default 10; } JavaEE 内容 代码路径 SQL(封装) -\u0026gt; QParams(封装) -\u0026gt; Page(封装) -\u0026gt; Arrays(原生) -\u0026gt; haseCode( )\n观察到的 Arrays 的 hashCode 需要将调用的内部所有元素的 hashCode()方法进行合并, 看到的一个参数是 31 这个数字, 之前没有了解过这个点\n科普：String hashCode 方法为什么选择数字 31 作为乘子 - 田小波 ⊰ - 博客园 (cnblogs.com)\nhashCode 为什么乘以 31？深入理解 hashCode 和 hash 算法-CSDN 博客\nCombine hash codes using 31: For each element, the method multiplies the current result by 31 and then adds the hash code of the element. The number 31 is used because it\u0026rsquo;s an odd prime number, which has certain mathematical properties that help in evenly distributing hash codes for sequences of elements. Specifically, 31 was chosen because it\u0026rsquo;s a small prime number that still achieves good distribution, and also because it allows for an optimization in the JVM: multiplying by 31 can be efficiently implemented using a bitwise shift and subtraction, which is faster than general multiplication. Return the combined hash code: After processing all elements, the method returns the final result, which is the combined hash code for the array. The choice of 31 as a multiplier is a balance between ensuring a good distribution of hash codes (reducing collisions) and computational efficiency.\n使用 31 组合哈希码: 对于每个元素，该方法将当前结果乘以 31，然后添加元素的哈希码。使用数字 31 是因为它是一个奇数素数，它具有某些数学属性，有助于均匀分布元素序列的散列码。具体来说，选择 31 是因为它是一个小素数，仍然可以实现良好的分布，还因为它允许在 JVM 中进行优化: 乘以 31 可以通过位移和减法有效地实现，这比一般的乘法要快。返回组合哈希代码: 在处理所有元素之后，该方法返回最终结果，即数组的组合哈希代码。选择 31 作为乘数是在确保散列码的良好分布(减少冲突)和计算效率之间的平衡。\n‍\n‍\n# 香代码 ‍\nList 里面的 removeIf + Stream 流遍历查找 List 中的对象删除\ncategoryList.removeIf(categoryBO -\u0026gt; Objects.equals(Boolean.TRUE, categoryBO.getScrapOrNot())); 内部封装的异常类以及各种的类构造函数有覆写多重的 override, 最后一起汇总到一个方法中\n接口当 final static 关键字来用并用包名.出来\nSneakyThrow 直接 try-catch\n直接用 \u0026lt;p|\u0026gt;, \u0026lt;br|\u0026gt; 分割代码注解\nint totalPages = (int) Math.ceil((double) totalCount / pageSize1); 分页时候计算页数\n在类 POJO 中直接写强相关的 static 方法 + 字段 Enum 便于封装 ‍\n还有一些, 但是牵涉到业务不方便说\n","permalink":"https://spadektlsg.github.io/p/%E4%B8%B4%E5%B7%9D%E7%BE%A1%E9%B1%BC-ii/","tags":[],"title":"临川羡鱼 II"},{"categories":[],"contents":"\u0026ndash;从端点科技内部框架Trantor过渡回Spring的记录\n‍\n记录开发框架 \u0026ldquo;川坨\u0026rdquo; 以及对未来Spring开发影响笔记\n‍\n‍\n# 序 既然现在在公司用过了川坨, 看到了Trantor的特性, 如何将其运用到之后的开发中去呢?\n下面分多区域介绍从Trantor回到Spring过程中的想法, 上半是Trantor部分, 下半是对Spring个人开发的借鉴\n肯定有一些地方是\u0026quot;硬\u0026quot;不互通的, 那部分只能抛下了\n‍\n‍\n# 后端 在老川坨的范畴中, 后端内容Trantor之外就是Spring, 只要Trantor没覆写的地方Spring都可用\n‍\n‍\n‍\n# Entity 这部分其实差别不大, 一些繁文缛节\n一些开发思想是不错的, 比如\n逻辑无法实现就加字段 (加非持久化字段, 也就是不和数据库关联的字段) 非持久化字段转移到DTO, VO里面, 这部分字段直接在后端返回前端时候计算得出, 不要落库提升大量SQL的性能 ‍\n‍\n# DAO(Mapper)层 说习惯了, DAO(Mapper)层 就是写SQL那个层\nTSQL实际上就移到了Service里面, 和我写EduExch时候在MP的操作很像 [当然, 后续项目做大了我还是会把SQL拆到DAO层里面的)\n数据库操作的那些拼接SQL的操作, 从之前的QW这种转移到了拆分的形式, 我觉得这种代码风格是不错的(或者说是, 可以接受的), 感觉上类似MP, 实际上应该是JOOQ的语法(虽然之前没用过)\n整体写法在臃肿和单薄之间落子, 并有多套实现 (DSL, TSQL, 直接SQL), 全部用TSQL仿照MP那种去拼LambdaQueryMapper还是很快上手的, 拼SQL更不在话下\n那么相较于Spring Boot + MP(我的开发环境) 来说, 去掉了mapper区域合并到DAO包(mapper包), 同样有类似的复用方式(直接用类为单位组合为 @Repository + SQL入参 进行调用复用) , 等于省去了可能的mapper使用, 同时在完成基础CRUD的任务目标下基本没有差别\n但是一些复杂SQL的处理有bug, 从稳定性角度来说还需要提升 (例如级联和LeftJoin等不能同时存在这样的东西太难受了, 不如不用)\n我还是选MP那一套作为自己的持久层框架, 那么TSQL这些就完全派不上用场\u0026hellip;但是把它当做JOOQ的话, 对于扩大自己的见识面是很有帮助的\n‍\n‍\n# Service层 这部分没什么好说的, 完全就是Spring那套, 加一些繁文缛节\n这里框架与代码风格本身以及在具体业务点中学到的东西并不算在这个\u0026quot;出川坨记\u0026quot;的话题中, 可见另一篇\u0026lt;临川浮梦\u0026gt;\n但是Flow + Func两级的Service操作可以借鉴下, 比如一整个大的下单流程可以拆成多个小Service套在大Service里面. 个人之前的Service写的很死板, 就是几个实体类几个Service来按照MP那一套走. 自己可以定义一两个大的Service.\n‍\n‍\n# Controller层 这部分就完全被所写的\u0026quot;前端\u0026quot;XML + TS给取代掉了, 不过个人日常编程中Controller基本就走一个流程, 里面的内容大部分就是一行两行Service层的方法调用.\n那么Trantor这里用Flow + Func 两级(Flow可以理解为很多个Func)来替换了这个部分. 虽然个人因为之前TS/JS技艺不精所以不喜欢在川坨的\u0026quot;Controller\u0026quot;, 也就是TS里面去处理前端页面传递进来的参数和环境, 但是不得不说TS在这个位置能干很多事情. (大佬们的实现真是眼花缭乱, 直接后端骑脸前端独当一面)\n调用方法, 传递参数, 批量设置入参Field, 这些功能都能在Controller进行.\n遵照前后端分离模式 + SpringMVC + SB的话, 这部分就完全派不上用场了\n‍\n‍\n‍\n# 前端 其实算是\u0026quot;前后端结合\u0026quot;的前端, 实际上由低代码中台负责处理\n‍\n‍\n# XML自动化协议生成 我们说写前端其实不是写前端, 只是在XML传控制数据, 前端接收后解析, 解析完毕了根据拿到的索引去查找对应的元素并在对应位置出现而已.\n因此并不是前端, 只能说是一个低代码中台做的事情. 并且这个前端还包含TS的处理, 实际上是写一个脚本, 类似这个感觉. 只是做一些数据展示的处理, 并且封装搜集数据并调后端接口.\n真正的前端是有的, 但是\u0026quot;门槛\u0026quot;很高. 看来是处理一些客制化定制的东西, 类似于直接开发Vue的小组, 把这些组件和关联关系对应起来.\n其实这整个实现的逻辑和前后端不分离时候使用的模板引擎很像, 例如freemarker, 就是这样用插值表达式直接在后端写的\n是的, XML很无趣: Trantor开发不需要写前端? nono, 我们不过是一次把前端都写完了, 然后后端通过XML把窟窿填补罢了, 就和平常的Controller没有什么意思上的变化, 返回一些结构化数据. 前端接受后解析对应资源, 一个萝卜一个坑的把对应位置的组件放进去, 再把数据拿进去放着就完了.\n至于TS, 不过是把一些逻辑给了前端, 让他work well 罢啦\n(毫无疑问, 后面要学还是学Vue3那一套转全栈, 这部分太局限了)\n‍\n‍\n# 页面 页面框架很丑陋, 就是给企业员工做的, 要不得好看, 甚至列表框总是看不完整. 很多交互很狗屎, 并且做的这么丑这么糙了竟然我这种老爷机还跑不起来?! 说明性能狗烂的, 交互响应很烂, 没有异步这些, 都是一个样. 并且页面标签很狗, 拉不完整.\n但是也有好的点, 比如说, 确实做到了快速开发, 并且和Trantor这个生态是有保障的. 确实能做到模型直接展示到页面里面去, 前端不需要就可以基本开发. 很好\n(毫无疑问, 没有复用的可能)\n‍\n‍\n# 结 本身封装的水平大概中上吧, 能体现阿里平台开发的水平 : 能够完全造出这一套确实挺厉害, 并且没有看到很多JOOQ那些生接口(不是直接调用后台接口, 有针对Trantor的模型字段进行处理的操作)\n‍\n内部封装的框架, 从观察研究的角度十分吸引人. 虽然可能我的理解只有1/10不到, 但是确实看到了很多东西, 有了许多新的灵感\n当然, 从转到Spring的复用角度来说, 结果是差强人意的.\n‍\n不管怎样, 川坨工程师的皮肤可以卸下了, 背起行囊上路\n‍\n","permalink":"https://spadektlsg.github.io/p/%E5%87%BA%E5%B7%9D%E5%9D%A8%E8%AE%B0-i/","tags":[],"title":"出川坨记 I"},{"categories":[],"contents":"这是个合集, 我不知道怎么实现就先这样放着\n全方位介绍了金陵耐烧王(瓦塔西)在某阿里子公司的实习经历\nLinks\n出川坨记 I 临川羡鱼 II 在川上曰 III 百川赴海 IV ","permalink":"https://spadektlsg.github.io/p/%E4%B8%B4%E5%B7%9D%E6%B5%AE%E6%A2%A6%E5%90%88%E9%9B%86/","tags":[],"title":"临川浮梦合集"},{"categories":[],"contents":" 连让我战死的机会都不给!!!\n# 让我看看什么个事.jpg 以下是河北大学 2023 大创个人资料以及路线记录, PPT 一些东西日后再整理上传\n说是被背刺是因为最后竞赛组完全把比赛取消了, 当初画了那么大的饼, 说可以参加校赛后参加省赛, 同时好兄弟邀请我去参加, 我帮忙拉了人进来, 做了 PPT, 一起思考产品原型, 一起找辅导老师啥的, 总共花费了差不多一整周都不止的工作量去完成这件事情, 我自己当然得到了成长, 虽然最后得奖的概率很低, 但也是全力以赴了.\n结果呢? 最后 2024-3, 半年后群里发通知: 不办了?! 说不办就不办了? 明明是你们觉得糊弄我们玩玩就好了是吧!\n当初也是, 提交材料提前 3 小时说要提交, DDL just last 4 3 days, 够无语的. 那次之后本来大伙就打算退出, 找辅导老师, 老师耐心的提供了帮助和评价(感谢他! 非常好工作!), 我们也是回归到了正常工作中去\n所以, 经历这件事之后, 我是永远都不能相信竞赛组这批东西了, 一点都不能相信. 所谓公信力已经被败光了.\n我开始彻底的以我的学校为耻, 我始终认为我的艺术才华被辜负, 我的人格尊严被践踏: 而这群尸位素餐的贱货, 一个一个就这么搁干岸上站着! 我对其恨之入骨, 恨不得生啖其肉!\n\u0026ndash;今年依旧发了大创动员通知, 又要有一批韭菜进场被噶了, 唉! 你们这群人不提供帮助就算了, 办事流程垃圾就算了, 最后干了半年直接说不办了不交了全部作废你们他娘的有良心吗?!\n我为了这件事加了多少班(指晚上 10 点后继续写东西), 浪费了多少宝贵的为了秋招的时间?\n我会把我们组部分资料开源, 让世人见识到我的努力. 同时感谢 Github 这一自由而伟大的平台, 让我有机会痛骂中国顶级垃圾大学 HBU \u0026ndash; the worsest university in China : Hebei University HBU!\n同时我也只能接受这一结果: 我终究是在竞赛方面一事无成, 参加五次竞赛五次全部落败, 最后一次竟然如此憋屈的离场了. 既然不参加任何学校的竞赛(这是第一次也是最后一次), 那么之后我就没有任何竞赛成绩了.\n百度之星算法竞赛失败的那天晚上, 我在操场上一个人哭泣: 我知道那个当初的\u0026quot;大厂梦\u0026quot;, 碎了.\n我知道, 现在我的简历很烂, 没有竞赛, 没有奖项, 没有时间做技术沉淀, 没有时间做竞争力项目. 但这些都是本可以实现的, 我有这些潜力, 尽管我正在发出败犬的怒吼.\n我能怎么办呢? 现在我只能继续往就业方向冲去, 不能再浪费时间了.\n咳咳, 骂爽了骂爽了. 当然也是学到了些东西, 抗压能力, PPT 快速制作能力等等, 和团队的活动几次也出的很不错, 制作了一些可以把玩的小 demo, 这段经历还是可圈可点的\n以下是正文\n# 我的任务 # 大纲/PPT/展示 ‍\n留出足够的切入点来供后续发挥(发言稿子) ‍\n# 展演辅助 如果确认入围了就帮助处理文档和发言罢\n‍ ‍\n# 时间轴 # 11.28 五步走计划 指先生成文档, 再逐步填充立项书一事\n11.20 -\u0026gt; 11.31 (失败)\n2023-11-29 前三步走战术执行中 -\u0026gt; 第二步: 整理概念库 -\u0026gt; 第三步: 细化概念\n-\u0026gt; PPT -\u0026gt; 校验, 准备\n‍\n# 12.4 终止危机 确实, 任务太艰巨, 当前看不到转机\n去年的经验告诉我, 确实不能再这样下去了\n‍\n# 12.7 职责调换 做好觉悟了! ‍\n# 12.14 赶鸭子上架(风雪山神庙) 实际上到这个时候我们应该走完三步走了, 事实上原因是之前连续两次超过 DeadLine, 事情太多了\n数库和鸡桶带来的压力太大了,不得不暂时将全身心委身于其中\n最关键的要素还是这个通知完全没有缓和的余地\n还好周四今天有足够时间来设计, 下午去自习室时间也足够, 就是怕太吵\n明天更没空了, 早上下午都有课, 周六中午前就要交差, 实在是太难为人了\n当然 30 号本来就该做好大纲了, 责任还是在自己的不确定性以及学校的规划问题\n‍\n可恶, 材料好少啊\n只有 3 样, 概念书, 执行概要, 计划书\n还要算上我们测试完成的个人成品, 这些素材需要找到\n还要算上我们找到的网站\n‍\nTime Line\n12.14\n早上 阅读报告, 开始渗滤 下午 找灵感, 找参考资料 晚上 生成展示大纲, PPT 规划+填入==个人材料== 12.15\n早上 PPT 材料获取, 概念输入 下午 PPT 整合 晚上 联合确认成品 12.16 -12 a.m. 调试, 提交\n‍\n可以先抽取相关核心标题目录到 PPT, 之后照着讲扩充即可\n只要要点即可\n先抽取出来即可\n同时把 PPT 开在旁边, 以免等下发生格式问题导致无法导入\n2023-12-14 15:25:43\n大纲 16 点确定后我会预先完成 PPT 结构, 到时候发你一份\n‍\n# 12.16 交差 ‍ 漫长的等待\u0026hellip;\u0026hellip;\n# 2024-03-24 直至今日还没有消息, 那么就是凉了, 哪怕开做也没能力了\n‍\n# 2024-04-22 内部消息, 已经寄了, 等待通电下野\n‍\n‍\n# Assets ‍\n# 文稿刷洗项目三项全 # Head 大纲串联的方式\n‍\nMain \u0026lt;- Dev | \u0026lt;- Append\nPPT 大纲最后的效果取决于我们的三个文件的文本的深度和广度, 目前采用的串联方式是 Main \u0026lt;- Dev | \u0026lt;- Append, 最后合并到计划书的大纲中去, 在其上整理为 PPT 大纲.\n‍\n# 1 概述引入 ‍\n烦恼：搭配服装，网购服装不符合个人预期\n问题情境引入\n‍\n问题回旋镖解决\n‍\n本项目旨在搭建一个全新的在线服装模拟试穿平台，为用户提供虚拟化试穿服装服务\n通过结合虚拟现实技术和时尚领域的专业能力，我们将推动线上购物业务的革新，帮助消费者提升电商平台使用体验，推动时装品牌和零售商拓展新的销售渠道。\n展示效果 : 震撼的吸引眼球的交叠设计动画\n‍\n网站内给用户提供一个人物三维模型，用户可以喜欢的衣服试穿给模型，搭配效果一目了然，给用户提供新的购物体验，给社会提供新的就业岗位，给企业提供新的销售渠道。\n展示使用逻辑图片, 流程动画箭头形式\n‍\n最终解释权归@MixMatch 酷搭设计委员会所有. All Rights Reserved\n‍\n‍\n‍\n# 2 项目特点 大标题分页, 核心点展示\n虚拟试穿： 平台将充分利用虚拟现实技术：上传个人照片以后，平台将根据提供的参数生成一个模拟数字人让用户选择服装，并能够在虚拟模型身上展示。\n毫无疑问这将提供更加==真实==与==可交互==的试穿体验，帮助用户更好地==了解==服装的质感、风格等==特点==以及对自身的适合度\n‍\n智能推荐： 我们将基于用户的身体尺寸、穿搭风格和购买记录提供==个性化的服装推荐==，提升用户决策的准确性。\n‍\n社交分享： 用户可以在网站上与朋友==分享虚拟试穿照片==以期获取反馈，并强化购物社交的互动属性。\n与同伴的图片\n‍\n智能购物车： 用户可在平台将虚拟试穿的服装一键添加到购物车，并快速购买所选择的服装。\n扩充 智能购物车\n‍\n减少退货： 通过提供虚拟试穿功能，我们的目标是降低用户购物后退货的频率，减少供应链和环境的浪费。\n结果导向 -\u0026gt; 展示两种情况的路线图片(退货 / 不退货)\n‍\n‍\n# 主体 ‍\n# 1市场分析 ‍\n电商市场仍在持续增长，消费者对于更好的购物体验和个性化推荐的需求也在增加。虚拟试穿技术是一个有巨大潜力的领域，可以更好满足消费者需求。\n打上去\n‍\n当前，随着互联网的不断普及和科技的飞速发展，消费者对于在线购物的需求呈现出愈发多样化和个性化的趋势。\n在这个时代，用户对购物体验的要求不仅仅停留在简单的交易过程，更期望通过在线平台获得更丰富、更创新的购物体验。市场上存在着对于能够提供高度真实感和个性化定制的虚拟试穿购物体验的迫切需求。\n在服装领域，虚拟试穿技术的引入成为满足这一需求的关键。\n传统的线下购物模式无法提供用户在家中就能享受的试穿体验，而虚拟试穿技术则通过数字化的手段为用户打开了全新的购物方式。\n‍\n稿子里即可\n‍\n此外，用户对于时尚品牌的关注度不断提升，他们希望通过更直观的方式了解和体验品牌的产品。这意味着时尚品牌需要在数字化和在线化方面进行更深度的拓展，以满足用户对于时尚、个性和品质的不断升级的需求。\n我们的市场需求分析旨在深入了解这一趋势，通过调研用户行为、市场竞争和技术创新等方面，确保我们的虚拟试穿购物平台能够切实满足市场需求。\n我们将关注用户对于试穿体验的反馈，持续改进虚拟试穿技术，提升平台的用户满意度。与此同时，我们将建立紧密的合作关系，深度了解时尚品牌的需求，帮助他们在数字化时代更好地与消费者互动，拓展市场份额。\n推荐与反馈\n‍\n‍\n通过全面、深入的市场需求分析，我们将制定切实可行的市场营销策略，确保我们的电商平台能够在竞争激烈的市场中脱颖而出，成为用户和时尚品牌信赖的首选平台。\n最后生成市场营销策略\n‍\n‍\n‍\n# 2 网页设计 ‍\nui 设计方面放弃传统的购物网站的设计方案，采用全新的设计思路，简约风格为主，技术方面使用 pixi.js 框架开发一个全新的，给人一种高级感的首页。（框架手册网站地址：http://pixijs.huashengweilai.com/），交互方面也尽可能地多添加一些有趣的交互和彩蛋，比如：天气预报小互动等等（参考：Because Recollection. (because-recollection.com)。\n‍\n‍\n# 2 用户体验 我们网站的核心是三维模型为主的购物网站，首先个人中心能看到的是一个三维模特。模特的外观，身材特征由用户自定义，用户可以拍照上传自己的照片获取自己的三维模型。尽可能地对用户操作添加 MG 动画（按钮点击，翻页，刷新…等操作）。\n‍\n我们的网站的最大特点是用户网上购物时就像玩装扮 游戏一样可以在线上试穿服装，自由搭配服装。\n搭配推荐系统：① 创作者分享搭配：如果用户点击创作者分享的链接下单，给创作者分享佣金。② 官方推荐搭配(根据商家缴的推广费给商家推广)。\n购物平台该有的基本功能（购物袋，收藏，订单查看，个人基本信息等等）。\n用户社区：这里用户分享自己的模型装扮，分享自己的穿搭。\n‍\n6. 数据分析与预测\n数据是推动决策的关键。通过深度学习和数据挖掘技术，我们将分析用户行为、购物习惯，预测产品趋势和市场变化。这将有助于我们做出更为精准的市场决策，提前应对潜在的市场挑战。\n‍\n5. 用户服务与社区建设\n建立一个高效的用户服务体系是用户满意度的保证。在处理用户查询和问题时，我们将注重问题的及时响应与问题的后续跟进。同时通过建设社区平台，让用户之间能够分享购物心得、时尚见解，逐渐形成一个积极向上的社区氛围，同时增强用户黏性，提高用户忠诚度。\n‍\n2. 用户测试与体验设计\n用户是电商平台的生命线。我们将进行深入的用户测试，包括使用 AB 测试方法，以获取用户对虚拟试穿体验的具体反馈。同时，注重界面设计和用户体验优化，确保平台在视觉和操作上都能给用户带来愉悦和便捷的感觉，从而提高用户留存率和转化率。\n‍\n# 3 创新发展 鼓励创新文化： 建立一个鼓励创新的文化，让团队成员有权尝试新的想法和方法，甚至允许失败以促进学习。\n创新孵化器： 设立一个创新孵化器或专门的团队，致力于研究和开发新的产品、服务或流程。\n定期创新会议： 定期组织创新会议，让团队成员分享他们的创新思维，促进跨部门的交流和合作。\n跟踪科技趋势： 持续关注行业和技术趋势，确保团队始终保持在创新的前沿。\n‍\n11. 持续创新与敏捷发展\n互联网电商行业竞争激烈，市场变化日新月异。我们的平台需要具备持续的创新能力和敏捷的业务拓展能力。为此我们将组织专门的创新团队，设立创新工坊，定期头脑风暴，鼓励成员提出新思路、新理念。同时，我们采用敏捷开发方法，以期快速响应市场变化，及时调整产品规划和业务策略。\n‍\n4. 市场推广与内容创作\n市场推广是将电商平台引入用户视野的关键。除了上文提到的社交媒体宣传和线上广告投放方式，我们还将注重内容创作方面。通过发布与时尚相关的文章、视频和趋势分析增加曝光度并提高用户粘性。\n‍\n1. 技术开发与创新\n技术是我们平台成功的核心。除了虚拟试穿技术的开发和优化，我们还将注重其他创新技术的整合，如穿搭搭配推荐，提高购物体验和个性化推荐上的应用、快速的结账流程、安全支付系统等。此外，建立灵活的技术架构，以应对未来可能的技术演进，确保平台的可持续性。\n‍\n# 3 可持续发展 绿色办公： 推行绿色办公理念，减少资源浪费，提倡节能减排，建立可持续的办公环境。\n社会责任项目： 参与社会责任项目，为社会和环境贡献一份力量，同时提升企业形象。\n供应链可持续性： 考虑整个供应链的可持续性，与合作伙伴共同努力，确保整个生产过程都是环保和社会负责任的。\n报告透明度： 公开企业的可持续发展报告，向利益相关方传递企业在可持续性方面的努力和成果。\n‍\n8. 财务管理与可持续发展\n财务健康是电商平台可持续发展的基础。我们将制定严格的财务计划和监控机制，确保资源的合理分配和可预期的投资回报。同时将注重成本控制和效益提升，确保平台在竞争激烈的市场中保持稳健的财务状况。\n‍\n9. 可持续发展与社会责任\n在电商平台的运营中，我们将注重可持续发展和社会责任担当。给社会提供就业岗位，与社会共同进步，创造良好的企业形象。\n‍\n‍\n# 4 团队建设 明确目标和角色： 确保团队成员清楚团队的整体目标，并明确每个成员的角色和责任。这有助于提高团队的效率和协作。\n促进沟通和协作： 建立开放的沟通渠道，鼓励成员分享想法和解决方案。使用团队协作工具，确保信息流通畅，减少信息壁垒。\n定期团队建设活动： 定期组织团队建设活动，以促进成员之间的团队精神和合作意识。这可以包括团队培训、团队合作游戏等。\n倡导开放文化： 建立一个开放、包容的文化，鼓励成员提出问题、分享经验，以促进学习和不断改进。\n‍\n7. 团队建设与文化塑造\n团队是推动电商平台成功的引擎。我们将注重团队建设，提供对口的培训和发展机会，鼓励个人创新与团队协作。同时打造积极向上的企业文化，让团队成员对公司的发展充满热情和责任心。\n‍\n# 5 安全隐私 加强数据加密： 对涉及隐私的敏感数据进行加密，确保即使在数据传输和存储过程中也能保持安全。\n权限控制： 设定合适的权限和访问控制，确保只有有权人员能够访问和处理敏感信息。\n教育培训： 对团队成员进行安全培训，提高他们对隐私和安全意识，降低人为因素对安全的风险。\n合规性遵循： 遵循相关的法规和标准，如 GDPR、HIPAA 等，确保团队的数据处理符合法律要求。\n10. 安全与隐私保护\n随着网络个人信息泄露问题的泛滥，用户对于个人安全和隐私的关注越来越高。因此我们将加强平台的安全措施，确保用户的个人信息得到充分的保护。通过引入先进的点对点加密技术、安全鲁棒的支付系统、定期的安全审计计划任务，我们将向用户提供安全可靠的购物环境，从而更好的建立用户信任。\n‍\n# 5 数据安全 定期备份： 建立定期的数据备份机制，以应对意外数据丢失或损坏的情况。\n网络安全： 采用防火墙、安全软件等措施，保护系统免受网络攻击，确保数据不被未经授权的访问。\n监测和检测： 设置实时监测系统，及时发现并应对潜在的安全威胁，降低数据泄露和损害的风险。\n数据合规： 确保数据的收集、存储和处理符合相关法规和行业标准，避免因违规而带来的法律风险。\n‍\n12. 数据安全与技术风险管理\n互联网蓝海中风险与机遇并存，数据安全和技术风险管控是不可忽视的问题。我们将持续更新强化包括加密、备份、灾难恢复在内的数据安全措施，以期确保用户数据的完整性和保密性。同时将建立技术风险管理体系，对任何可能出现的技术问题进行检测和预防来保障平台的稳定运行。\n‍\n# Tail ‍\n# 1实施计划 ‍\n采用序列分页展示, 要求先一起展示, 然后分别叙述\n‍\n必要技术开发 开发虚拟试穿综合平台, 上传个人照片以后，系统生成一个模拟数字人\n‍\n‍\n合作伙伴确立 建立与时尚品牌和零售商的合作关系，同时开辟新的销售渠道\n‍\n‍\n用户体验设计 设计对用户友好的界面，以确保用户能够轻松浏览和试穿服装\n‍\n‍\n市场推广营销 制定市场推广计划，包括社交媒体广告、内容营销和合作伙伴宣传\n‍\n‍\n‍\n3. 品牌合作与社交媒体\n品牌合作不仅仅意味着将产品引入平台，更能建立起团队与品牌之间的战略伙伴关系。通过与品牌紧密合作，我们可以共同开发独家产品、推出限量版商品，从而提升平台的独特性和吸引力。此外，我们将积极利用社交媒体平台，与品牌和用户进行互动。这不仅能扩大品牌影响力，还能形成良好的口碑。\n‍\n数据安全和隐私保护： 确保用户的数据安全和隐私是我们的首要任务，制定相应的政策和措施\n‍\n‍\n‍\n# 2预期成果 ‍\n分点抽取, 平铺直叙\n‍\n我们立志创建一个引领潮流的电商平台，旨在为广大用户提供一场前所未有的虚拟试穿购物之旅。通过精湛的技术和独特的用户体验，我们致力于打造一站式时尚购物平台，为顾客提供极致便捷、沉浸式的在线购物体验。\n首要任务是成为顶尖的在线服装虚拟试穿购物网站，通过创新的虚拟试衣技术，为用户提供逼真、实用的试穿体验，让他们在线购物时感受到身临其境的乐趣\n提高用户的购物满意度，还能有效减少退货率，为时尚品牌创造更稳固的销售渠道\n‍\n我们将紧密合作\n与时尚品牌建立深度合作关系 聚焦用户需求，不断优化我们的平台，提高虚拟试穿技术的精准度和逼真度 ‍\n通过不断创新和优化，能够\n享受到与传统购物不同的乐趣和便利，从而成为他们心目中的首选购物平台。\n‍\n同时，我们的使命也包括帮助时尚品牌提升品牌曝光度、扩大市场份额，并增加销售量。通过与品牌的深度合作，我们将为他们提供一个创新的销售渠道，帮助他们更好地推广和销售他们的产品。我们追求的不仅仅是商业的成功，更是与合作伙伴共同成长，实现共赢的局面。\n‍\n# 3 结尾收束 ‍\n最终，我们的努力将不仅仅体现在用户购物体验的提升和品牌销售量的增加上，更会通过商业盈利的实现来验证我们的商业模式的可行性。\n我们相信，通过不懈的努力和不断的创新，我们将能够建立起一个备受欢迎的电商平台，为用户和合作品牌带来可持续的商业价值。\n团队目标首要目标是建立一个受欢迎的在线服装虚拟试穿购物网站，为用户提供前所未有的购物体验，帮助时尚品牌增加销售量，减少退货率，最终实现商业盈利。\n‍\n‍\n最终解释权归@MixMatch 酷搭设计委员会所有. All Rights Reserved\n‍\n‍\n# 技术栈 java\n# Three.js学习 官网\nDDL-\u0026gt;if GOT Preliminary Permission -\u0026gt;12/2023 do the Preliminary Presentation -\u0026gt; 1.1\n‍‍html if PP: do PP else: do Dismiss ‍‍\n# YouTube 路线指导\nhttps://www.youtube.com/watch?v=Xu6oHc_20ow\nhttps://www.youtube.com/watch?v=Q7AOvWpIVHU\n教程视频\nhttps://www.youtube.com/watch?v=xJAfLdUgdc4\u0026list=PLjcjAqAnHd1EIxV4FSZIiJZvsdrBc1Xho\u0026index=1\nhttps://www.youtube.com/watch?v=uzkedMF-l4Q\u0026list=PLbu98QxRH81KkLTN00OXhD8Y-pRVgTCnM\u0026index=1\n# PolyCam APP\n使用谷歌登陆了, 还有7次余额\n扫描物体\n后续上传到Spline完成导出\n可以在其中设置交互等属性\n/3DUI设计\n# 其他网站 模型拍照生成\n# PPT 成品 日后选取 ","permalink":"https://spadektlsg.github.io/p/%E8%A2%AB%E8%83%8C%E5%88%BA%E7%9A%84%E5%88%9B%E4%B8%9A%E7%AB%9E%E8%B5%9B%E7%BA%AA%E5%AE%9E/","tags":[],"title":"被背刺的创业竞赛纪实"},{"categories":[],"contents":"\u0026ndash;SK 批评小报\n‍ 介绍忘记怎么写了, 就当上篇一样吧\n# Header ‍\n记录课业外(摸鱼)或者是日常遇到的一些兴趣使然的搜集内容, 题材不限, 每个文档代表一个内容, 以期长久保存? NONONO. 这个笔记本内不能存储太多东西, 会导致搜索的无效键值命中\n‍\n‍\n# 使用 ‍\n将对应的粗加工后的信息归类后存放到万卷模板对应序列的下方, 而后在 SK 批评中进行归并处理\n‍\n# 经济 ‍\n# 经济学概念综述 ‍\n# GDP ‍\nGDP 本身是个总量概念，分为名义 GDP 和实际 GDP，而名义 GDP 跟实际 GDP 的差别主要在于价格因素。再换句话说，名义 GDP 比实际 GDP 多出一个通胀因素\n‍\n股票、债券走势的究竟是名义 GDP 还是实际 GDP 呢？严格地讲都不是！我们在分析宏观经济的时候并不看总量，而是看增量，也就是说最终决定资产价格走势的应该是 GDP 的增幅，或者具体一点是名义 GDP 的增幅。\n一般来说，名义 GDP 同比增速上升，股票的表现就可能比债券好，如果名义 GDP 同比增速回落，债券的表现就有可能比股票好\n首先大家都知道股票是经济的晴雨表，所以二者往往是正相关。此外，经济好的时候，融资需求会比较强劲，资金供小于求，利率上升、债券价格下跌；经济差的阶段，融资需求疲软，资金供大于求，利率下降、债券价格自然也就上涨了。\n‍\nGDP 一般来说有三种计算方法，分别为支出法、生产法和收入法。\n支出法，简单来说就是看生产出的东西都去了哪里，各自卖了多少钱。计算的是大家为购买这些货物与服务而付出的总支出。包括消费支出、资本形成总额、货物和服务净出口，分别对应消费需求、投资需求和净出口需求。如果我们将 GDP 比作一个面包，那么支出法是从消费者购买面包的价值来计算 GDP；\n生产法，围绕的则是价值是如何生产出来的。还是面包的例子，生产法是从面包的构成部分如小麦、鸡蛋、服务等的价值来计算 GDP；\n收入法，计算的是整个生产过程中大家获得的所有收入，包括劳动者的收入、政府的收入、企业的收入等。换句话说，就是看都有哪些「人」赚到了钱，各自赚了多少。面包的例子中，则是从面包生产者如工人、企业从中获得的收入计算 GDP。\n‍\n# 社会消费品零售总额 简单说，社会消费品零售总额（下文简称「社零」）就是全社会零售和餐饮收入的加总。它能很好反映国内零售市场的变动情况，让我们偷偷观察到最近大家是钱包「大出血」呢，还是勒紧裤腰带过日子。从大家的消费中我们还能预测未来经济发展的走势。\n‍\n社零只包括企业销售实物商品和提供餐饮服务这些最终消费的收入，不包括教育、卫生、家政等服务性收入，也不包括居民个人销售的收入，所以上述其它销售收入都不能被记入社零。甚至还有买房——这项可能是你人生中最大的支出都不包括在社零的计算范围中。所以说社会消费品零售总额并不等同于消费，只是我们日常消费的一部分。\n那么，统计局又是怎么算出社零的呢？\n咱们国家有这么多家企业，每个月都要统计零售总额，工作量之大、之繁琐超出常人的想象。所以统计局会将统计的企业分为两大类，一类是主营业务收入较高的限额以上单位，对于这类大企业要一个个进行统计；另一类是主营业务收入较低的限额以下单位，对于小企业，抽样调查推算的方法就可以了。\n那么划分主营业务高低的线又是多少呢？批发业、零售业、住宿和餐饮业企业限额标准分别为年主营业务收入 2000 万元、500 万元、200 万元。这样全面调查和抽样调查相结合得到的数据具有一定的代表性和科学性。\n‍\n# 固定资产投资 建造和购置固定资产的经济活动，即固定资产再生产活动。\n其中，固定资产是指企业为生产产品、提供劳务、出租或者经营管理而持有的、使用时间超过 12 个月的，价值达到一定标准的非货币性资产，包括房屋、建筑物、机器、机械、运输工具以及其他与生产经营活动有关的设备、器具、工具等。\n‍\n从本质上来说固定资产投资和消费都是花钱，那么它们有什么不同呢？\n固定资产的价值在于可以重复利用、创造出更多的产品。做好的美甲掉了就没办法自己再变出来、电影票也只能看一场电影，所以说消费支出就是一次性的。\n因为这些固定投资的存在，某国家的工厂至少可以在接下来的十年中持续进行商品生产，可能会生产出产值超过一千万的商品。产品生产、出售又需要工人、销售人员的支持，相应会产生更多的工作岗位和就业机会，更多人提高了收入水平。\n‍\n通过固定资产投资，可以增加全社会固定资产总量。在经济发展过程中，固定资产投资是社会维持简单再生产和扩大再生产的主要手段，其适度的规模和合理的结构对于实现经济发展战略具有重要意义。\n固定资产都由哪些构成呢？\n我们最熟悉的应当是每个人都挂在嘴边的买房了，这是房地产投资；工厂建设厂房、机器设备等可以进行生产的固定资产，则属于制造业投资的范围；基础建设投资主要指的是政府出资修路修桥、建设高铁等一系列公共设施的投资。所谓「想要富，先修路」公共设施的建设也为社会再生产贡献巨大力量。\n‍\n# PMI 制造业 PMI 是制造业采购经理人指数的缩写，因为它在某种程度上能够预示未来经济的发展好坏，因此也是国际通行的宏观经济监测指标之一，对宏观经济有预测预警作用。\n因此，通过对采购经理人的问卷调查统计结果，能比较全面反映制造业的现状，并且反映的是环比情况。\n不过，PMI 作为环比指标，一定程度上容易受到工作日、季节、基数等因素的影响，与 GDP、工业增加值等同比指标相比，数据波动比较大，因此更适合反映短期经济形势的变化。\n一般来说，当 PMI 至少连续 3 个月同向变化时，才能反映经济运行的趋势性变化，如果只是单月数据升至荣枯线上，并不能判断经济已经复苏或者恢复正常水平，出现趋势性好转。\n制造业 PMI 按生产环节分成包括生产、新订单、原材料库存、从业人员、出厂价格等 13 个分类指数，每个分类指标都根据重要性等标准设定一个合适的权重，比如，新订单 PMI 指数的权重为 30%。\n制造业 PMI 又是怎么预测未来的？它的高低走势有什么含义？\n制造业 PMI 有一个重要的比较基准——荣枯线（50%），这通常就是经济强弱的分界线。如果制造业 PMI 超过 50%，就说明本月的采购、生产、销售等情况好于上个月，反映经济总体扩张；如果低于 50%，则反映经济总体收缩，说明经济可能会面临下行压力。\n‍\n‍\n# 净出口 为何 GDP 支出法中使用的是「净出口」而不是「出口」呢？\n根据 GDP 支出法的计算公式，GDP 是消费、投资、政府购买和净出口的加总。净出口顾名思义即出口与进口的差值，而「进口」的商品和服务已经被我们消费掉了，如果再用「出口」这个口径就相当于重复计算了我们消费掉的进口商品和进口服务。\n净出口主要统计的是出口的商品和服务与进口商品和服务的差值。净出口作为支出法 GDP 的组成部分，在我国经济发展初期，依托海外市场，发挥我国劳动力成本的优势，有巨大的外需需求，而净出口一直被视为我国经济高速增长的关键因素之一。\n净出口在 GDP 中的占比并不是越高越好。如果净出口的比例不断提升，也就意味着出口贸易做得好，贸易差额占 GDP 的比重也不断上升，加入世贸组织后的中国，出口贸易飞速发展，对于 GDP 的拉动高达 1.5%，带动贸易差额占 GDP 比重的升高。而这又在一定程度上代表了国家社会的经济结构现状，如果一国过度依赖外需发展经济，相对应的内需和投资的发展就比较弱。\n‍\n聪明的你可以很清晰的看出，其实净出口占比过高，对经济长期发展并非有利。而且往往出口越多，还会导致通胀增加，继而影响消费。\n我们出口创汇所得不能直接消费，而是要拿去换人民币，而这时候人民币就是国家对出口企业开出来的收据。出口创汇越多，国内的通货也就越多，资产价格和物价都会涨，物价上涨必然影响消费，也会压缩内销企业的销售。所以出口增加，必然让消费受损。所以我们国家在过去十几年里，总是以出口导向为主，但与此同时内需却始终无法启动。\n所以在 2008 年金融危机之后，全球经济都陷入低迷，我国开始把内需作为稳定经济增长的主要抓手，并开始拉动内需，净出口对于 GDP 的拉动率急剧下降，随后净出口对于 GDP 的拉动绝对值逐渐稳定，只是随着外需的变化，有时对经济增长有利，有时又会拖经济后腿。\n‍\n对于出口，如果实际汇率上升，则本国货币实际贬值，意味着国外商品相对于国内商品变得更贵了，这使得本国商品的出口变得相对容易。一般来说，出口正向地受实际汇率影响。\n‍\n# 通货膨胀|通货紧缩 ‍\n说到通胀可能大家会不理解这个专业术语，可我要说钱不值钱了，你是不是就理解了？\n之前一斤猪肉卖 20 元，现在涨到 40 元，物价上涨，同样的 100 元钱，从前能买 5 斤猪肉吃个痛快，现在却只能买到过去的一半，失去了「猪肉自由」，购买力水平下降，人民的生活成本升高，这就是通货膨胀。相反的情况就是通货紧缩。\n‍\n除了钱不值钱，通胀带来的还有社会财富的转移。\n之前当猪肉还是 20 元一斤的时候，老王借给老张 100 块钱，老张拿着钱去买了 5 斤猪肉，谁知道老张后来一直拖着不还钱，期间物价飞涨、通胀严重，到了猪肉 50 元一斤的时候，老张终于还钱了，可这个时候的 100 元只能买 2 斤猪肉，相比于之前的 5 斤猪肉，老张岂不是占了便宜？而老王虽然得到了这 100 元，但是实际上老张应当还给他 250 元，才能让老王现在买上 5 斤猪肉。\n这表明，在通货膨胀时，债权人的财富下降，借款人实际还的钱变少了，借款人财富增多。\n‍\n那么，老王怎样才能保证自己的财富不下降呢？\n那就是以 5 斤猪肉为实际借款，让老张还 5 斤猪肉就能避免自己吃亏。所以在通胀发生的时候，人们应当选择投资一些保值的硬通货，比如黄金，美元等，才能防止自己的财富贬值。所以如果你只喜欢在银行进行定期储蓄，而不进行其它的资产配置，通胀严重后银行的利息涨幅追不上通胀的幅度，结果只会是越存越穷。所以我们在生活中要时刻关注通胀情况。\n‍\n咱们日常生活包括了生产和消费，所以对于通胀水平的观测也可以分为居民生活方面的 CPI 变动和工业生产方面的 PPI 变动。\n‍\n# CPI CPI 是居民消费价格指数的英文简称，这个指数可以直接的表明当地的物价上涨情况，如果说所有的物价都出现不同程度的上涨的话，那么说明出现了通货膨胀。它主要是通过计算固定一篮子城乡居民生活所需的商品和服务价格变化的相对数。这一篮子商品和服务包含了居民生活所必需的商品，如食品和非食品，像猪肉、鸡肉、烟酒、衣服等都包含在内。其中食品烟酒、居住、教育文化和娱乐所占权重较大，相加超过 50%。\n不过，有些商品受季节供应量影响较大，并不能反映通货膨胀的情况，所以将这些因素，比如食品和石油去除，就会得到核心 CPI 指数。\n‍\nCPI 涨幅多少才意味着发生了严重的通胀呢？\n按照不同的通货膨胀程度，通常分为三种类型：\n一是，温和型通货膨胀，一般是指年通货膨胀率为一位数的通货膨胀。通常我们认为 CPI 涨幅在 3% 以下，经济处于温和通胀的状态，此时的物价相对来说还是比较稳定的，大家不必慌张。\n二是，急速型通货膨胀，如果 CPI 涨幅过高，比如超过了 3%，此时经济处于急速通胀阶段，我们不再拥有「猪肉自由」和「水果自由」的时候，我们就会开始担心是否发生了严重的通货膨胀，自己的资产是否会缩水。2019 年 12 月国内 CPI 同比高达 4.5%，就是非洲猪瘟导致肉价飙升的结果。\n如果这种通货膨胀的局面一旦形成并稳固下来，势必会出现严重的经济扭曲，老百姓的生活也将陷入恐慌。\n三是，恶性型通货膨胀，此时货币几乎没有了固定价值，大多数情况下，通胀率可能会快速上涨，以至于商品和服务的价格可能会在一天，甚至几个小时内急速上涨。而正因这种急速的物价上涨，会导致消费者信心降低，从而导致该国货币贬值。最终，恶性通货膨胀就会引起连锁反应，比如公司倒闭、失业率上升、财政税收减少、消费能力下降等。\n‍\n‍\n# PPI ‍\nPPI 是生产者价格指数的英文简称，它主要统计的是工业生产者在生产过程中所需的物品价格的变动趋势。\n根据工业生产的过程，分为原料、半成品和最终产品三个阶段的指数。而工业生产又分为生产资料如有色金属、天然气、钢材以及生活资料如食品、耐用消费品等两大类。如果生产所需资料价格都有不同程度的上涨，那么厂家一定会提高最终产成品的价格，消费者为增加的成本买单，物价水平逐渐攀升。所以我们一般都认为 PPI 是 CPI 的先行指标。\nPPI 能帮助我们了解工业企业生产的最新情况。如果 PPI 呈现通缩状态，说明企业生产不积极，经济有下行风险，发生通缩的可能性比较大；如果 PPI 温和通胀，反映经济正积极增长。如果 PPI 严重通胀，说明大家的生产热情高涨，经济有过热风险，未来可能会发生通货膨胀和生产过剩。\n‍\n‍\n# M2 ‍\n社会中资金数量是反映流动性的重要指标。按照货币变现的难易程度，可划分为 M0、M1、M2、M3 四个层次，它们的流动性依次降低。\n‍\nM0 指的是流动中的现金。\nM1 是狭义货币供应量。M1=M0+商业银行的活期存款。因为活期存款可以随时提取，流动性仅次于现金，有些国家将它视同现钞货币，是成本最低的交易媒介和支付手段。\nM2 就是「广义货币」。M2=M1+商业银行的定期存款+个人储蓄存款（包含活期、定期）+其他存款。货币不仅仅是交易媒介，更是一种资产，它的主要功能不是交易，而是价值储藏。从这个角度来看，商业银行的其他存款，如定期存款和储蓄存款，显然也是货币。因此这些存款也就应包括在货币供应盘的范围之内。\n在我们的日常生活中，M0 与消费密切相关，它的数值高则证明老百姓手头宽裕、富足；M1 反映居民和企业资金松紧变化，是经济周期波动的先行指标，流动性仅次于 M0；而 M2 流动性偏弱，反映的是社会总需求的变化和未来通货膨胀的压力状况。\n其实还存在 M3，但因为是考虑到金融创新的现状而设立的，暂未测算，所以不被常用。\n‍\n# 社融 社融，是社会融资规模的简称，是指实体经济（境内非金融企业和住户）从银行、信托等金融体系内获得的资金。可以是金融机构直接给的钱，比如贷款、保险赔偿金等；也可以是金融机构帮着联系搞来的钱，比如非金融企业发行股票、债券等。\n虽然是中国特有的经济指标，不过社融基本上可以等价于 IMF（国际货币基金组织）倡导的「信用总量」的概念，反映的是实体经济对货币的需求量。\n经济增长，本质上就是企业不断的扩大再生产，而要满足扩大再生产的需求，就必须有足够的钱。从这个理解中，我们可以看出社融在一定程度能够代表经济走势。\n‍\n社融由那些指标构成呢？\n并不是只有银行贷款，还包括了其它一些可以让实体经济获得钱的渠道\n如果说，江南皮革厂拿不到银行的贷款、也找不到有钱的信托，但是，养猪厂恰好有 100 万闲钱，于是通过银行把这笔钱借给了皮革厂，这叫委托贷款，即养猪厂委托银行把自己的钱贷给了皮革厂。这 100 万委托贷款也会计入到社融当中。\n上面说的这些获得钱的方式，都可称之为间接融资。因为这些钱都不属于金融机构本身。银行贷款，他来自于储户的存款；信托公司的钱是来自客户；委托贷款的钱来自养猪厂，而金融机构就可以看作是一个中介机构。\n社融当中，除了上面提到的间接融资之外，还有很重要的一块，就是直接融资，就是我们最为常见的发行企业债券、发行股票等，它的特点是直接接触资金的所有者。\n‍\n社会融资规模与 M2 是一个硬币的两面。一个表示资产的需求（社会融资规模），一个表示资金的供给（M2）。\n社会融资规模可理解为金融体系的资产、实体经济的负债；而 M2 则可理解为金融体系的负债、央行的资产（央行对国家的负债）。货币当局发行货币（以广义货币 M2 来表示），金融机构拿到货币来满足实体经济的融资需求，货币则通过银行金融机构（本外币贷款）、非银行金融机构（委托贷款、信托贷款以及未贴现票据）、资本市场（股票市场和债券市场）以及其它等渠道进入实体经济。\n然而，间接融资体系使得社会融资规模与 M2 无法形成有效对应关系。理论上来讲，资产的运用和资金的来源应存在一定的对应关系，但是间接融资中介的存在，使得这一对应变得比较复杂，严格的对应关系不会存在。\n随着金融创新的不断发展、金融脱媒（即金融非中介化）的日益深化、利率市场化的深入推进等，M2 与实体经济资金的相关性及有效性不断下降。而社会融资规模指标的重要性也开始日渐加码。\n‍\n# LPR LPR（Loan Prime Rate），全称是贷款基础利率，是指金融机构对其最优质客户执行的贷款利率。最优客户是指那些信用度高，违约风险小的贷款客户。\n在 2013 年利率市场化以前，贷款基础利率（LPR）是直接根据央行给定的央行基准利率来决定的（也就是央妈给定的官方利率，以前降息就是降这个），金融机构会参照这个利率去上下浮动执行贷款。比如，大型企业因为拥有优质的抵押品和较小的违约风险，总能比小微企业从银行获得更低的贷款利率。\n‍\n最新改良版 LPR：深化利率市场化\n即，贷款市场报价利率（LPR）=中期借贷便利利率（MLF）+18 家银行加点（中间商赚差价）。\n所以现在的情况是，银行的贷款利率定价，将分为两步走：\n第一步，18 家报价行，根据 MLF 等公开市场操作利率和市场利率的走势，报出 LPR；\n第二步，各家银行根据自身的资金成本和客户资质等，在 LPR 基础上加点，确定贷款利率\n‍\n为什么要改革 LPR？\n中小企业的老板们和按揭贷款的购房者们都知道，基准利率是和大家息息相关的。我们向银行贷款的时候，银行会以基准利率为标准，根据情况再上浮 10-30% 左右。\n‍\n# MLF MLF 在新的 LPR 定价过程中扮演着关键角色\n货币流通量与社会商品流量相符合是货币流通规律的根本要求。我们的 GDP 在蹭蹭的往上涨时，央行也需要释放更多的货币。否则市场上流通的钱就不够，会导致了所谓的「钱荒」。\n我国货币创造的基本方式，是根据外汇占款来锚定的。然而这样并不能准确反映社会对钱的需求，比如 2013 年外汇占款下降，但那一年我国 GDP 增速是 7.8%，显然国内市场需要新的货币供应。我们需要一个新的工具来应对这种货币需求。\nMLF，常被戏称为「麻辣粉」，2014 年 9 月横空出世，全称中期借贷便利（Medium-term Lending Facility）。MLF 是一个货币调节工具，央行可以根据市场实际情况，临时的增加一笔钱借给商业银行，到时间再收回来。这样短时间市场货币就可以满足需要，也不会长久的影响整个社会的流通货币。MLF 通常的操作表述是：「央行开展 MLF 操作 2000 亿元人民币，1 年期利率 3.30%」。也就是说央行可以通过控制 MLF 的投放量和利率，来影响市场的货币供应和市场利率。\n总的来说，MLF 是央行的货币调节工具，是有形的手。当市场货币供应不足或过剩时，可以通过该工具来调节。LPR 是金融机构给出的反应市场真实贷款利率的参考值，每月 20 号调整，这个值是跟随市场这只无形的手而变化。\n‍\n‍\n# 供给侧 「供给侧」是相对传统的「需求侧」来说的\n经济增长的三驾马车：消费、投资和出口，这三驾马车就是经济的「需求侧」，驱动了我国 GDP 过去三十年的高速增长。与之对应的就是「供给侧」的四大要素：劳动力、土地、资本和创新\n‍\n以前提到经济增长，大家的条件反射就是要扩大需求、刺激消费，靠需求拉动经济。现在，经济发展进入「新常态」，我们不能再以 GDP 论英雄了，要换一种推动经济的新思路、新方法，那就是「供给侧改革」。当然，供给侧里的「侧」字，并不是「侧重」的意思，而是「端」、「一端」的意思，供给侧改革也就是从供给这一端来进行改革，从供给、生产端入手，通过提高全要素生产效率，提升产品竞争力，形成与社会需求相匹配的供给，以此来促进产业结构升级和经济发展。\n‍\n供给侧改革，概括来说包括「三去一降一补」五大任务，具体是：去产能、去库存、去杠杆、降成本和补短板。\n‍\n任务 1：化解过剩产能\n产能过剩就是总供给不正常地超过总需求，这样会造成资源浪费，使经济增长面临更大的下行压力，所以要淘汰僵尸企业，加快产业重组。\n任务 2：化解房地产库存\n我国现在有严峻的楼市库存压力，空置的住房可供 2.2 亿人口居住，所以化解房地产库存非常重要。\n任务 3：金融领域去杠杆\n适度加杠杆有利于企业盈利和经济发展，但如果杠杆率过高，债务增速过快，还债的压力就会反过来增大金融风险甚至拖累发展。去杠杆是要防范化解金融风险，促进经济持续健康发展。\n任务 4：帮助企业降低成本\n比如通过减税等政策性改革，让企业减少没必要的制度性成本，这样企业就有更多资金去创新、提高生产率。\n任务 5：补短板\n包括补基础设施和民生建设的短板。\n‍\n总的来说，供给侧改革，意味着在外需不足、内需潜力和空间有限的情况下，今后经济发展的着力点将从原本的重需求逐步转变为与供给需求共同发力。相对于需求侧改革的措施，供给侧改革更侧重于提升经济增长效率，更侧重于增强企业长期发展活力，更注重经济长期持续平衡和可持续发展。说白了，供给侧改革就是针对我国现存的经济问题「对症下药」，是我国经济改革的新方法。\n‍\n‍\n# 杠杆 比如，相对于全款买房，房贷就是一个杠杆。通过较小比例首付，撬动较大比例房产，这样就能在资金有限的情况下买到更大更贵的房子。如果你想买一套 100 万元的房子，首付自己掏了 30 万，剩下的 70 万从银行贷到了款，那么你就用 30 万的资金撬动了 100 万，这就叫做杠杆。\n‍\n投资者通过借入资金，投入经营，可以实现以少量资金获取更大的总资产。这个过程被形象地成为加杠杆。\n银行本身是个杠杆，它们向资金盈余方吸收资金，投放给资金需求方。企业向银行借了钱，用于生产经营，本身也是一个杠杆。于是形成了一个资金链条，其中银行、企业两个环节都形成了杠杆。\n居民 → 银行（杠杆）→ 企业（杠杆）→ 生产经营资产，这样的一个金融模式就是我们国家的资金链条环节。\n因此，借钱去扩充资产就是加杠杆，还钱减少负债就是去杠杆。而不管是加杠杆还是去杠杆，都是发生在个人、企业和政府的身上。\n‍\n# 资产 ‍\n股票与债券\n利率债和股票，其价值受政治、宏观经济、货币政策影响较大，流动性高，也就是说易于变现。债券盈利比较稳定，股票盈利波动较大。正如前文所述，一般来说名义 GDP 增长走高，经济形势较好，利好股票，但同时推升利率而导致利率债的价格下跌，反之亦然。\n‍\n黄金\n黄金本身没有生息功能，但流动性好，又能抗通胀，风险也比较低。此外，我们知道黄金原本是一种货币，至今各大央行还有黄金储备，并且黄金储备规模是彰显一国实力的重要指标，因此黄金还有避险功能。当 CPI、PPI 走高时，通货膨胀风险较大或者股票大跌、市场风险偏好较差的时候，黄金就是较为合适的投资标的。\n‍\n不动产\n也就是大家住的房子。房子的价格取决于两点：一是需求，二是政策。需求的核心影响因素是人口结果，但政策在一定程度上也会影响需求。一直有一个说法，叫做「丈母娘经济」，指的就是中国人结婚需要婚房，进而拉动经济增长。但房地产刚需前景并不能只看丈母娘的诉求，最终还是由中青年人口数量和占比决定。中国的刘易斯拐点早已出现，目前又是房住不炒的政策背景，我们估计房价大涨的时代应该已经过去啦。\n‍\n‍\n# 美林时钟 美林时钟依据经济增长率（GDP）和通货膨胀（CPI）这两个宏观指标的变动方向，得出了四种经济状态：\nl 当 GDP 同比增速上升、CPI 同比增速回落时，这种经济状态被称为经济复苏；\nl 当 GDP 同比增速继续上升、CPI 同比增速也开始上升时，这种经济状态被称为经济过热；\nl 当 GDP 同比增速回落、CPI 同比增速继续上升时，这种经济状态被称为经济滞胀；\nl 当 GDP 同比增速回落、CPI 同比增速也转为回落时，这种经济状态被称为经济衰退。\n‍\n试想，在经济刚刚复苏的阶段，有点像一年的春天，乍暖还寒。央妈对待经济就像对待襁褓中的婴儿，仍然百般呵护，一定不舍得收紧货币政策。加上经济已经有回暖迹象，这个阶段对很多资产都非常友好。很多股票可能都会出现所谓的戴维斯双击——业绩回升、估值修复，往往是做股票投资的最佳时机。当然，这个时候工业品价格也将企稳上升，债券也处于牛市的尾声。不过，这个阶段表现最差的往往就是黄金了，试想股市强劲的时候，小伙伴儿怎么会想起投资黄金呢？！\n复苏过后，经济进入过热阶段，有点像一年的夏天，酷热难耐。这个时候通胀开始走高，央妈觉得不用再操心了，货币政策开始出现收紧迹象。货币政策转向意味着资金价格上升，这事儿对债券宝宝来说基本是噩耗，所以经济过热阶段首先「阵亡」的就是固定收益类投资产品。由此可见，这会股票估值也没什么向上的空间了，但是不用担心，毕竟经济向好、业绩仍然有保障，所以股票仍然是极好的投资标的。此外，工业品价格会受到显著提振，所以这个阶段风险偏好高的小伙伴可能就去关注期货市场了。不过在这里要提醒各位：期货是保证金交易，有杠杆，大家一定要量力而行哦！！当然，这个时候也有些小伙伴开始默默的关注黄金了，毕竟黄金是传说中的抗通胀资产，如果通胀起来了，黄金上涨指日可待~~\n一转眼，经济切换到滞胀阶段。按照四季轮回的比喻，按理说滞胀应该相当于秋天，是个丰收的季节，也就是说这时不适合播种——投资，而是应该「收割」了。\n此时，早动手「收割」，别人就是你的韭菜，慢了一拍，你就成了别人的韭菜。\n为什么会这样？因此滞胀意味着经济下滑、通胀走高，也就是说此时经济已经倒下，但央妈为了防止通胀进一步走高可能还在收紧货币政策。套用一句老司机的话，滞胀阶段股债双杀，对股票来说特别容易出现戴维斯双杀。\n那么滞胀阶段，买什么都会亏钱吗？\n当然不是啦，是金子总会发光的，这个阶段的最佳进步奖非黄金莫属。在跑输两个赛季之后，黄金在「滞胀期」迎头赶上并逐渐超越了前面的各类资产，取得了最佳排名。究其原因，是前文提到的黄金的特点导致的，黄金是不生息、但抗通胀的资产，所以经济差、通胀高的时候最受各路投资者欢迎。\n至于说衰退期嘛，犹如寒冬，但我们是北方的冬天——有暖气！衰退来临，央妈早早准备了各种货币宽松工具，虽然不能及时推动经济回升、但起码可以帮助大家一起抗寒。所以这个阶段股票表现欠佳，但债券却是很好的投资品。另外，低估值、高股息率的股票也可以逐渐关注起来啦！\n说这么多，大家可能觉得太复杂，如果总结为两句话：名义 GDP 回升买股基、卖债基，名义 GDP 回落卖股基、买债基。央妈放水，市场就稳；央妈收水，市场就慌。\n‍\n‍\n# 降准 ‍\n降低存款准备金率。\n那什么是存款准备金率呢？其实我们可以简单理解为发下工资来，先存一笔钱当做应急资金是一个道理。\n我们知道，商业银行的主要业务就是吸收储户的存款，然后拿去放贷款吃差价。银行肯定是想多赚钱的，但是又不能把所有存款都拿去放贷，万一都贷出去了，储户要取钱时取不出来，这麻烦可就大了。所以央行为了确保商业银行能有足够的「活钱」可以应对储户的取钱需求，就专门设立了一个名叫「存款准备金」的账户来帮商业银行管理这部分「活钱」。\n那么问题又来了，商业银行该往这个账户里缴纳多少钱呢？\n央行敲定了一个存款缴纳比率，即存款准备金率。不过，由于商业银行的规模是有大有小的，为了让中小银行的手里能多一些钱放贷，也能分点肉吃，大银行和中小银行的存款准备金率也有些许不同。通常情况，大银行的存款准备金率要比中小银行高出约 2 个百分点。\n‍\n举个例子：\n按照 2020 年 1 月 1 日调整后的比例看，大银行的存款准备金率是 12.5%，中小银行是 10.5%。那么银行每收进 100 元存款，大银行就要上交 12.5 元给央行作为存款准备金，剩下的 87.5 元才能去放贷；而中小银行则要上交 10.5 元给央行，自己留下 89.5 元去放贷赚差价。\n那么如果央行降低了存款准备金率呢？\n比如咱们按大银行的执行标准，从 12.5% 降低至 12%，意味着上交给央行的钱减少了 0.5 元，至 12 元，自己手里就多了 0.5 元，有 88 元可以拿去放贷。\n可不要小看这点降准幅度哦，在各大银行体系的货币流通下，市场上的可投资资金将会增加数千亿，甚至上万亿。\n‍\n总之：\n当经济过热时，央行会提高存款准备金率，让更多的钱回到央行，通过减少市面流通的货币数量，减少贷款达到给经济降温的作用。\n反之，当经济遇冷时，央行就会降低准备金率，释放更多的银行资金，银行可以贷款的钱更多了，市场上可以拿到的钱更多。\n‍\n相信大家也听说过」定向降准「这个词，多了个」定向「又是何意呢？\n从最近这几年的降准来看，央行每次向市场放水，其实目标都是想刺激实体经济，可结果呢？银行的资金最后还是流向了楼市，而且每次都会奏效，理由也很简单，实体不赚钱，股市又不景气，楼市却是暴利。这也应了那句话：资金永远是逐利的，哪儿能赚钱，就奔哪儿去，这才是楼市不败的真相。\n为了不让放出去的钱都流向楼市，央行就选择「定向」，也就是「指哪儿打哪儿」的降准模式，比如降低后商业银行手里多出来的资金，只能给中小企业贷款用，不能给楼市。\n弄清了什么是降准和定向降准，那么降准后又会给我们带来什么影响呢？\n从央行的角度来说，大量的资金趴在账户上，市场真正要用钱的地方却没钱用，进行降准，释放一些流动性，那些需要用钱来做生意、发展生产的企业，就可以较为轻松的贷到款了。就拿这次疫情来说，许多小微民营企业都遇到了资金困难，央行降准所释放的流动性，正好可以为其解决资金问题。\n‍\n而资金多了，市场及经济就容易繁荣起来。\n因为从理论上讲，需要钱的企业拿到了钱，缓解资金流的紧张，就可以恢复甚至是扩大生产，而扩大生产后，工作岗位也多了，劳动者拿到工资后就开始消费，股市也会上涨，楼市也会兴旺……经济就向好了。\n但这毕竟只是理论上的推导，实际上，降准并非都是有效的。前面也提到，过去咱们国家的降准反倒刺激楼市，导致房价快速上涨，这就违背了初衷。\n降准除了让市场上的钱多了一些，对企业和经济发展产生利好外，降准对于我们普通投资者来说，也会有如下影响：\n‍\n首先，就是降准可能会间接影响股市。\n短期内，突然释放的利好可能会调动起大家情绪，而情绪也是影响市场的重要因素。而从长期来看，如果中小企业能更容易贷到钱来用于企业发展，这会有助于提高公司的长期业绩。\n‍\n其次，银行利率的上浮幅度可能会有下调。\n其实降准对银行存款利率并没有直接的影响，不过由于降准之后银行上缴的存款准备金少了，手里可利用的资金变多，等于资金面变宽松，如果银行不缺钱可能将利率上浮幅度下调，比如房贷的利率上浮可能就会降低。\n‍\n最后，降准对楼市的影响有限。\n从历史看，以往出现降准，对地产行业一般都是利好的，毕竟房地产作为高负债行业之一，通过降准能缓解不少资金压力。并且降准对楼市是预期影响，预期货币宽松政策力度会加大。但是当前楼市调控的基调依然是「房住不炒」，在解决行业资金压力较大的难题时，不会再拿房地产作为刺激经济的手段。\n‍\n# 降息 利率政策是货币政策的重要组成部分，降息则是最常见的利率工具之一。降息主要包括两方面：降低存款利率和降低贷款利率。\n‍\nl 降低存款利率，意味着咱们去银行存款或者买理财产品时，收益率会降低，这时储户就会倾向于将存款从银行中取出来用于其他投资或者消费，从而增加市场上的货币流动，刺激经济向好；\nl 降低贷款利率，则可以减少贷款人的偿债负担，降低贷款人的资金成本，推动企业贷款扩大再生产。\n‍\n降息本身并不会增加市场的资金量，但却可以改变资金的投向。换句话说，降息就是鼓励消费和投资的。\n‍\n与降息相反的就是加息。简单说，加息一方面是为了吸收存款，从而减少货币供应量；另一方面就是提高短期高额融资成本，抑制恶意投机的行为。加息会导致人们减少消费转而增加储蓄，当然这有助于缓解通货膨胀，刺激本国货币的升值。不过加息的出现，也会让股市不景气，所以投资要更加谨慎才行。\n‍\n无论是降准还是降息，都是央行十分重要的利率工具，那么它俩有何区别呢？\n相同的是，降准降息都可以营造货币市场一个相对宽松的环境，降低社会融资成本，促进企业贷款扩大再生产，刺增加投资促进就业，进而刺激消费拉动内需，加速经济向好回暖。同时作为央行护航股市的重要的政策工具，也可以为股市带来利好，对经济的增长和发展的稳定，起到重要的作用。\n当然，它们之间最大的区别在于，所面对的群体不同。\n降准针对的是商业银行，因为提交存款准备金的行为本身是商业银行执行落地的，意在释放商业银行在央行的保证金，增加市场的资金供给。而降息是针对社会企业和我们个人的，意在鼓励储户和企业去消费或者去投资。\n在货币宽松之下，我们投资时要注意什么呢？\n对于固收类资产来说，在确保一定流动性的情况下，要适当锁定长期收益，也就是说投资周期应适当增加，毕竟这类资产具有相当的「刚性」，以实现资产保值增值的投资目标。对于权益类资产来说，可以逢低持续增配以增强收益。\n‍\n‍\n‍\n# 《聪明的投资者》 剖析 阅读笔记 ‍\n# 投资与投机 ‍\n作为投资大师，格雷厄姆很早就有对这两种行为进行明确区别的雄心，早在他 1934 年出版的《证券分析》一书中，他就对投资和投机进行了定义，他认为所谓「投资是以深入分析为基础，确保本金安全，并获得适当回报；不满足这些要求的就是投机。」这个定义也出现在《聪明的投资者》的第一章。\n我们可以分析一下格雷厄姆对于投资的这个定义，他至少提到了三个要素：\n1、以深入分析为基础；2、确保本金安全；3、获得适当回报。\n‍\n最后，关于投资还是投机，除了之前的三条原则，格雷厄姆还提出了一个更加容易检验的标准，他在一次采访中说：「问一问你自己：如果没有交易这些股票的市场，你还愿意以此种条件投资这家公司吗？」\n这一条原则后来也被格雷厄姆的弟子巴菲特继承了，巴菲特对于是否好股票的一个判断标准是，如果你不能卖出这只股票，你是否还会买入。如果答案是「是」才是投资，而投机则是赌自己能把股票以更高的价格卖给其他人。\n‍\n# 市场先生 市场先生这个概念，巴菲特也在很多场合讲过，是他觉得是他从得到格雷厄姆那里获得的最有价值的思想。格雷厄姆跟他的学生有一些定期的聚会，在一次聚会上，他讲了一个寓言，这个寓言是这么说的：\n假设你在某家非上市企业拥有少量股份，比如说一千美元的股份，你的一位合伙人，名字就叫市场先生，他是一位非常热心的人，每天他都会根据自己的判断告诉你的股权价值多少，而且他还要你以这个价格为基础，把股份全部出售给他，或者从他那里买更多的股份。\n有时他的估价与你所了解的企业发展状况和前景相吻合，在许多情况下，市场先生的热情或者担心有些过度，这样他估出来的价值，在你看来似乎有些愚蠢。如果你是一个谨慎的投资者或者一个理智的商人，你会根据市场先生每天提供的信息，决定你在企业拥有的一千美元权益的价值吗？\n只有当你同意他的看法，或者想和他进行交易时，你才会这么去做。当他给出的价格高到离谱时，你才会乐意卖给他，同样当他给出的价格很低时，你才乐意从他手中购买，但是在其余的时间里，你最好根据企业整个业务经营和财务报告来思考，思考持有股权的价值。\n当一个投资者拥有上市公司部分股份的时候，他所处的地位就跟上面那个寓言非常相似了，永远有一个市场先生在给你报价，你既可以从他这里买一些，也可以卖一些给他。\n‍\n市场先生这则寓言告诉投资者，面对市场波动必须保持良好的判断力和控制力。大多数时候投资者应当与市场保持一定距离，就像格雷厄姆所说的，「从根本上讲，价格波动对真正的投资者只有一个重要含义，它使得投资者有机会在价格大幅下降时做出理智的购买决策，同时有机会在价格大幅上升时做出理智的抛出决策。在除此之外的其他时间，投资者最好忘记股市的存在，更多地关注自己的股息回报和企业的经营结果。」\n其实市场先生就是我们大部分普通投资者的写照，大部分人买了股票之后，都会每天关注它的股价变动，股价稍微一上涨就百爪挠心，恨不得马上卖出兑现，股价稍微一下跌就垂头丧气，后悔自己的购买决策，尤其是在现在这个移动互联网的时代，大家只要装一个应用，就能够在手机上随时查看行情和进行交易，这也让大家对于市场行情的关注更加频繁和密切。\n市场先生这个寓言告诉我们，成为成功的证券投资者有一个重要的前提，那就是你能够管理好自己的情绪。巴菲特在给《聪明的投资者》的序言里一开始就说，「要想在一生中获得投资的成功，并不需要顶级的智商，超凡的商业头脑或者内幕消息，而是需要一个稳妥的知识体系作为决策的基础，并且有能力控制自己的情绪，使其不会对这种体系造成侵蚀。」\n‍\n如果你总是不断关注市场短期行情波动，那么要做到这一点实际上是很难的，一旦市场上涨，你看到别人赚了钱，心理很难不会产生嫉妒的情绪，而一旦市场下跌，你持有的股票价格下跌了，你手头的资产在缩水，你也很难不会产生懊悔的情绪。\n‍\n# 长期思维 ‍\n格雷厄姆给出了两条建议，第一条是不要过于看重某一年的利润，第二条是如果你确实关注短期利润，请当心每股利润数据中存在的陷阱\n‍\n那么，怎么来做到不过于看重某年的利润？格雷厄姆在这本书提出了两个具体的方法来指导投资者：首先，在分析企业的时候突格雷厄姆建议用三年的平均利润的增长率，即你分析一家企业过去十年的利润增长率，不是说以十年前那一年的利润和十年后这一年的利润一除；而是说如果计算截止 2017 年的十年盈利增长率，要用 2015 年到 2017 年这三年的平均利润除以由 2006 年到 2008 年三年的平均利润。\n其次，格雷厄姆建议投资者用七年平均利润这个数据。比如在估值的时候，投资者应该用七年平均利润，或者用过去七年最低利润来做分析。通过以上两个具体的方法格雷厄姆指导投资者怎么来避免过于看重当期一年的利润数据。\n每股利润是一只股票最重要的财务指标之一，很多投资者认为这个指标能够清晰直接的反映出公司是不是在赚钱，有多能赚钱，但是格雷厄姆在这一章中提醒读者，要注意每股利润中存在的陷阱。格雷厄姆用美国铝业公司的例子来说明了他的观点，在投资实践中，格雷厄姆举的例子其实是很有代表性的。\n一般上市公司有四种不同的每股利润：即基本每股利润、扣非后的每股利润、完全稀释每股利润以及扣非后完全稀释每股利润。像在美国上市的公司，都会提供 NON-GAAP（非美国通用会计准则）利润给投资者参考，类似于扣非的利润。\n所谓的扣非利润是指扣除非经常性损益后的净利润，即扣除掉特殊和不经常发生的收入和费用后的利润。我们都很熟悉在美国上市的京东公司（NASDAQ：JD），它刚上市的时候，是亏损的。上市三年后，基于美国通用会计准则（GAAP），京东在 2017 年第一季度实现首次季度盈利，但基于非美国通用会计准则（NON-GAAP）京东在 2016 年二季度就实现了首次季度盈利。\n稀释每股利润是指充分考虑公司股份可能被稀释的因素之后的每股盈利，比如期权、可转债、以股代息等可能新发行股票，使得公司的总股数上升，这样就会使得稀释每股利润比基本每股利润低。\n我们现在看到了，格雷厄姆在书里不仅会提供定性的思维，而且还会提出具体的、量化的方法。这也是格雷厄姆的书与其他投资专著相比显著的特点，这个特点在不管是在《聪明的投资者》还是《证券分析》里，都有充分的体现。\n当然，如果你非要关心短期利润，格雷厄姆提醒你要当心这个数据中的一些陷阱，其实主要是一些会计上的问题，对于会计不熟悉的听众可能觉得这部分内容有点专业。不过，现在是信息大爆炸时代，实际上我们能获得大量分析短期利润的分析报告。这些分析报告多是由投资银行研究部门出的卖方报告，它们往往特别关注企业短期利润变换和走势。\n因此，关于短期利润中的问题或者陷阱，我们并不缺乏相应的资料和分析报告。当然，对于每一位投资者，还是要掌握基本的会计概念。\n在帕特·多尔西的《股市真规则》中，他也提到了所谓市盈率，也就是市盈率估值方法，帕特·多尔西对这个估值方法进行了比较详细的介绍。他提出用市盈率评估的时候，你有五个要注意的要点，否则就可能会被表面上的市盈率所蒙蔽，这部分内容跟短期利润比较相关，我们在这里也介绍一下。\n第一个要注意的要点是，这个公司是不是最近有出售业务或者是资产的情况，也就是说它是不是有一次性的大笔盈利，或者一次性的收入增长，这样会降低它的市盈率，但这些都是暂时的，你肯定要剔除这几种情况。\n第二个要注意的要点是最近是不是有大的一次性成本的产生，降低了当期的利润，这会提高它的市盈率，因为它的利润下降了，所以这也要相应分析，要做平滑。\n第三个要注意的要点是这个公司是不是一个周期性的公司，是不是比其他公司更具有周期性。那么什么样的公司会更有周期性？在这里我也可以给大家做一个简单的分享，我认为一个公司如果是重资产的公司，基本上它就必然是具有周期性的公司。原因也很简单，如果是资产非常重，那么它就必须得每年维持一定的产能利用率才行，因为它的本身资产很大的话，折旧就会很高，如果没有维持一定的产能利用率，那它就必然会出现亏损的局面。\n第四个要点是，公司把产生现金流的资产是选择资本化，还是费用化？如果把资产当期费用化，其实就会降低当期的吸引力，如果进行资本化，那么就会提高当期的盈利，能够持续产生现金流的资产，按会计的原则来说是应该进行资本化的，如果没有资本化，那么我们可以理解为企业的盈利被低估了。\n第五个要注意的要点就是它的盈利是否真实，这家公司在盈利上面是否作假。当然，前面四点其实也是在逼近于它的盈利是不是能够反映真实的盈利状况，财务报表的盈利是不是跟实际盈利能够对应起来，但我们最后还是再问一下，它的盈利是不是真实的。\n‍\n# 防御型投资者以及建议 如果你是一个积极型的投资者，就必须要付出更大的时间和精力来研究证券投资，这样你才有可能成为一个合格的积极型投资者，否则你就只能作为一个防御型的投资者。显然要作为一个积极型的投资者的要求还是比较高的，首先，你必须掌握足够的专业知识；其次，掌握专业知识之后，你还要在投资这个事情上付出足够多的精力和时间才行。\n‍\n格雷厄姆认为普通股有两个优点：第一，股票可以对抗通胀，而债券不能对抗通胀；第二，普通股其实长期来说可以给投资者提供更高的回报率，也就是股票投资从长期来看，它回报比债券要高。关于通货膨胀，我们后面会有专门的讨论，此处就不赘述。\n格雷厄姆认为防御型的投资者投资的股票的时候，应该保持适当分散化，但不要过分分散化。他也提出的量化要求就是整个投资组合应该包含 10 到 30 只股票。更为重要的是，针对防御型的投资者的证券组合，格雷厄姆提出应该符合以下七个具体的统计要求：\n第一、就是适当的企业规模，即你投资的公司必须是大型的、知名的公司，简单说就是蓝筹股。如果拿到 A 股来说，我的具体的建议是，如果你是一个不愿意付出非常大精力和时间成本的投资者，那最好就只投资于沪深 300 指数中包含的 300 家公司，没有进入这个指数的公司不应该在你的考虑投资的范围之内。\n第二，要有足够强劲的财务状况，就是你投资的公司财务要非常稳健。具体的量化要求是：公司的流动比率必须大于二——流动比率就是流动资产除以流动负债；而且长期债务不超过流动资产的净额。长期债务是指银行或者金融机构贷款，或者是其他的一些必须支付的债务，比如债券等；流动资产净额的意思就是你的流动资产减去你的流动负债。也就是说，防御型的投资者可投资的公司的流动资产净额是其长期债务的一个上限。\n第三，利润的稳定性。具体格雷厄姆要求公司在过去十年里没有出现过亏损。\n第四，长期的股息支付记录。格雷厄姆要求保持 20 年连续的支付股息的记录。这个要求非常的高，我们 A 股证券市场的历史还不到 30 年，能保持 20 年连续支付股息的公司凤毛麟角。我觉得我们可以做一些灵活的调整，具体而言，A 股持续七年或者十年以上有股息支付记录的公司，我觉得都是可以考虑的。\n第五，利润过去十年必须是保持增长的。这个增长要用我们前面提到的三年平均利润来衡量。格雷厄姆要求十年利润增长至少要超过 1/3。也就是说以 2015 年到 2017 年的平均利润除以 2007 年到 2009 年的平均利润，要大于 1 又 1/3。\n第六，适度的市盈率。（所谓市盈率就是股票的市价除以它的每股利润。）具体格雷厄姆要求你投资公司的估值水平不超过它过去三年平均利润的 15 倍，即 15 倍市盈率。\n第七，适度的市净率。（所谓市净率就是股票的市价除以它的每股净资产。）格雷厄姆的标准是股价不高于净资产价值的 1.5 倍，也就是估值水平不要超过 1.5 倍的市净率。以上第六条和第七条，可以结合起来，即你投资的公司市盈率乘以市净率要小于 22.5 倍。15 乘以 1.5 刚好等于 22.5，即不超过 15 倍的市盈率和 1.5 倍的市净率。\n那从专业投资者的角度来看，这些具体的量化指标，可能在有些时候会让你排除掉一些优质的投资机会；但是，对一个不愿意在投资上付出非常大的精力和时间的人来说，这样一个量化的指标其实还是非常有参考价值的，它会错杀一些公司，但是它至少保证了投资的安全。\n‍\n# 定额定期投资法 在这本书里，格雷厄姆还对各种各样的投资方法进行了分析和研究，其中我觉得特别值得来分享给大家的，就是格雷厄姆通过对 1929 年到 1952 年证券市场的研究，对定额定期投资的方法得出了一个结论，他说「无论证券价格出现怎样的波动，这种投资法都能使人满怀信心地取得最终的成功」。这个评价可不是一般的高，格雷厄姆如此肯定地推荐一种投资方法，在我印象里只有此一次。\n定额定期投资法很简单，就是投资者不考虑市场的情况，比如说每个月投 1 万块钱在一个指数基金或者是某个股票指数所对应的一揽子股票上面，如果市场涨了即股价涨了，那么 1 万块钱买到的股票就少了；如果市场跌了，1 万块钱买到的股票就多了。\n这么做实际上会让购买成本平均的分摊，所以这种投资方式又称为成本平均法。很多国内基金也推荐这种投资方法，我个人也认为这是一个很好的投资方法。\n当然，格雷厄姆是进行了一个定量的研究，才得出这个结论的。他研究了从 1920 年到 1952 年的 23 个十年期，每个十年期他都拿出来做一项研究，研究不仅给出每个期期末的利润情况，也给出了此后五年的利润情况。他发现每一个十年期，用这种方法都能够获得很好的收益。\n因此，当投资者不愿意付出非常大的精力来择时和选股的时候，可以用这种方法，其实获得的回报比绝大部分主动择时择股的投资者要好。但是，如果只是定额定投某一家蓝筹公司或者是你看好的某一家公司，是不是能够得到同样的回报？格雷厄姆认为这不一定，而且很有可能是有问题的。要解释这个问题也很简单，因为关键是你投资的公司在未来能不能持续的繁荣和增长，如果不能的话，你一直投，公司一直在走下坡路，那投资者的回报可能会很差。\n定额定期投资法要求投资者具有强大的投资纪律性，它要求投资者摒弃恐惧和贪婪，像一个机器人一样，不用考虑什么时候买入多少这类问题，不需要择时，到时间点就买，牛市也买熊市也买，每次都买一样多，牛市和熊市都一样，从长期来看这样反而会平滑你的买入成本，让你的成本不会太高也不会太低。\n但是从长期来看，定额定期投资法往往会带来不错的收益。还有一种投资方法是定期不定额投资法，定期不定额投资法是指，每隔固定期限就阶段性评估投资品的估值高低，如果觉得低估就多买入，如果觉得高估就多卖出，越便宜买入越多，越贵卖出越多。但在实践中，定期不定额投资法需要投资者对于投资价值有着较为准确的估计，否则就会陷入主观的、情绪化的投资决策，最后反而效果还不如定期定额法。\n所以不管是格雷厄姆也好，还是他的学生巴菲特也好，也包括我本人，对于不愿意花时间做研究的投资者的建议，最好投资方法就是去定额定投指数基金。值得强调的是，定投的指数必须具备足够的多样性，而不要去投什么概念性的指数，比如中小盘指数或者某个行业指数等等，一般来说，定投一个具有足够多样化的指数会获得比大多数主动投资者好得多的回报。\n所以指数基金比较适合作为定投对象，指数基金是按照指数编制的特定原理界定出的一篮子股票，比如沪深 300 指数就是由沪深两市市值最高的 300 只股票构成，一篮子股票的指数就抵消了单只股票的大幅波动，从历史看，指数的市盈率和市净率是在一个相对比较狭小的范围内上下波动。而主动型基金就不太适合作为定投对象，因为主动型基金不一定具有足够的多样性，这跟前面所说的把单只股票作为定投对象的问题本质上是一样的。\n当然，采用定期定额投资法的投资者也不要去追求每年 20% 或者 30% 的回报率，长期来说这个年化收益率太高了，可遇而不可求。我们都知道巴菲特是历史上最成功的投资者，但他的长期年化收益率也只有 20% 左右。当然，在早期巴菲特的年化收益率接近 30%，而在晚期，他的收益率有明显的下降。\n不过，供大家参考的是，如果一个人年化收益率连续 20 年保持在 15% 以上，就能够跻身全球最顶尖的资金管理人行列。连续 20 年 15% 是什么概念呢？就相当于说一个人 50 岁的时候，他积累了 1 亿财富，然后到 70 岁的时候，他的财富增长到 16 亿——这便是复利的魔力，难怪巴菲特说「复利是世界第八大奇迹」。\n‍\n# 基金投资 《聪明的投资者》这本书里，还有一块很有价值的内容，就是格雷厄姆对于基金投资的看法，这部分内容主要是在第九章《基金投资》里。在这一章里，格雷厄姆研究了 1961 年到 1970 年的投资基金的人和直接购买股票的人的收益，他得出结论，总体上来说，基金投资人会比直接投资股票的人的收益要高。\n怎么来投资基金呢？其实跟我们讲的股票投资有类似的地方：投资者找出历史时间足够长且业绩优秀的基金，假设未来它的投资业绩还会超过平均水平，投资者就投资于这样的基金，这是一个比较现实的基金投资策略。\n‍\n# 投资者与通货膨胀 在书里，格雷厄姆也试图对通货膨胀进行预测，并且分析了通货膨胀和企业利润的关系，但是并不是那么清晰。格雷厄姆的学生巴菲特 1977 年在《财富》杂志发表了一篇非常长的文章，名为《通货膨胀如何欺诈投资者》。这篇文章对通货膨胀和企业利润的关系进行了非常全面深刻的讨论。\n格雷厄姆和巴菲特的这个思想被人们用一句简单的话概括就是「通胀无牛市」。在通货膨胀的情况下，由于物价的持续上涨，所以大多数的投资者都不愿意进行对外投资，因为投资所带来的收益未必能够战胜物价的上涨幅度，所以更多的人都更加愿意持有受益于通胀的原材料和商品。所以，通货膨胀能够创造商品期货的大牛市，而由于获利效应，资金反而会从股市当中流出，而奔向各类商品期货当中，所以对于股市反而会造成更不利的影响。虽然在通胀情况下，加息往往会成为常用的跳空手段，这样看似有利于压制通货膨胀上行，但结果会是一段时间之后将带来更多的货币并冲击实体市场，也是促进了物价上涨。所以阻止通货膨胀的势头，其关键并不在于加息，而是在于在货币的有序升值。\n至于其他对抗通胀的一些方法，比如黄金、房地产等，格雷厄姆在书也做了讨论，长期看黄金并不保值。格雷厄姆虽然承认房地产作为一种实物资产，在通胀的情况下当然会好一些，但是他也提出房地产投资的几个缺点：第一，拉长时间看，房地产价格也同样不稳定；第二，买家在地理位置、支付价格等方面经常也会犯下错误，就像买股票买错了公司、买错了价格一样；第三，销售商的误导也会导致投资者失误；最后一点是，对于资金量不太大的投资者，房地产投资很难进行分散化，投资者只能买很少的量，无法分散风险。\n房地产投资在中国大陆过去 20 多年的情况比较特殊，我们都知道这是过去 20 多年中国最成功的一个大类投资资产。但是中国的房地产市场的时间还比较短，格雷厄姆的分析都是以十年为一个单位来分析的，而中国房地产市场也只有 20 年的历史，还比较短，虽然确实大趋势一直都是在涨，但是未来会怎么样，谁也不知道。\n时代变了\n‍\n# 总结 《聪明的投资者》是一部关于投资的杰作，也因此这本书在投资史上长盛不衰，始终是投资者无法绕开的经典著作。虽然书名叫「聪明的投资者」，实际上是为「不聪明的人」设计的。通过这本书，格雷厄姆想发明一套每个人都能用的投资理论，这真是个雄心勃勃的目标，但是格雷厄姆的确做到了。\n‍\n正如我们在第一节的介绍，格雷厄姆是个极其聪明的人，可以用「天才」来形容，他一个人就开创了价值投资这门学问，但是这本书却非常简单明了，绝不故弄玄虚，真正做到了最好的教授用通俗易懂的语言来表达自己的思想。\n综观全书，格雷厄姆不仅在帮助普通人建议正确的投资观，同时还给出了具体的、可执行的投资策略和方法，甚至每次更新本书的时候，他还会对当时的市场投资机会进行分析，并给出具体的资产配置建议。\n可惜的是，格老已经离世很久，现在很难看到这么有影响力的投资大师无私地分享自己的观点，并给普通人提供具体可行的建议了。\n本书还有一些比较专业的内容，我们并没有涉及，如果你希望成为一个掌握专业投资知识的投资者，我相信你还是有必要自己仔细阅读这本书。\n最后，我们来总结一下我们在这本书里所学到的一些核心内容。第一，当然就是市场先生的概念，这是也巴菲特认为格老教给他的最重要的一个理念。我们要理解市场先生是情绪很不稳定的，我们应该好好利用他的这个特点，在他情绪低落的时候下注，而不是被他牵着鼻子走。第二，是建立长期投资的理念，这种长期并不仅仅是指你持有时间要长，而投资的时候，要关注企业的长期历史业绩；研究企业时不要太看重它某一年的利润，要看一个过去七年的平均的利润；在考察企业增长的时候，要看三年的平均利润增长率。\n在这本书里，格雷厄姆根据愿意付出的努力和精力的不同，把投资者分为两类，一类是防御型的投资者，另一类是积极型的投资者。对于这两类投资者，格雷厄姆分别给了不同的建议。我们学了防御型的投资者的证券投资组合。对于积极型投资者，格雷厄姆扩大了他们可投资的范围。\n我们学习了格雷厄姆对成长股投资的看法，包括成长股投资的估值。我们学习了格雷厄姆对基金投资的看法，总体上他认为对大多人来说，投资基金会比直接买股票回报要更好。我们学习了格雷厄姆为什么推崇定额定投的投资方法。我们学习了格雷厄姆和巴菲特对通货膨胀与投资者关系的看法，关于通货膨胀的讨论，很多内容是来自于巴菲特的观点。我们还学习了安全边际的思想，而这方面我们汲取了投资大师赛思·卡拉曼的观点。\n‍\n格雷厄姆首次出版这本书的时间是在上世纪中期，1949 年，距今已经超过 70 年了，那么格雷厄姆的理论和投资思想过时了吗？\n巴菲特说他是 85% 的格雷厄姆加 15% 的费雪。但如果看巴菲特晚年的投资，他似乎越来越趋近于费雪的投资方法。格雷厄姆在《证券分析》第一版中提出以低于净流动资产买股票的方法，虽然管用，但在当今这个时代，证券市场似乎很难找到这种投资机会。这就产生了一个疑问，即格雷厄姆过时了吗？\n格雷厄姆是证券分析的奠基人，正是他使证券投资这门学科规范化并且变成一种可以学习的知识。然而，投资这个事情必须与时俱进，如果我们观察最成功的投资大师巴菲特，事实上他一直在进化中，否则不可能取得今天的成就。\n反观格雷厄姆，事实上，他也是同样如此，一直在进化。《聪明的投资者》一书经格老亲手更新了四版，其中间隔时间 5 年至 10 年不等，每一版都有变化，这种变化也是将他的理论适应于新的时代的必然要求，我们在一开始也讲到巴菲特对格老修订第四版《聪明的投资者》的建议，事实格老对巴菲特的建议绝大部分都采纳了。\n我们现在解读的《聪明的投资者》一书是最后一版，格老在这本书里甚至花了很大的篇幅介绍他的成长股投资方法。尽管具体的投资标准和方法一直在变化，但是格老的核心思想并没有变化：即市场先生、安全边际、长期思维等。\n以格老的观点，显然任何时候都不能买静态估值特别贵的标的，甚至成长股投资也是如此。就巴菲特近年来做的重大投资看，事实上仍然没有突破格雷厄姆在第四版《聪明的投资者》所提出的标准，比如投资伯灵顿北方铁路公司，IBM（虽然并不成功），苹果公司等。因此，我们必须对突破格雷厄姆的标准保持足够的警惕。可以肯定地讲，如果我们能构建一个符合格雷厄姆在《聪明的投资者》所提出的标准的投资组合，那么获得投资成功的可能性是非常大的。\n问题是，当今证券投资市场的竞争异常激烈，而且与格老所处的时代也有所不同，所以我们应该把重点放在学习格老的思想，同时把他的思想与时代所提供的机会相结合。我们必须保持灵活性，中国有句古话，说「尽信书不如无书」。\n举个我自己亲身经历的例子，我曾经投资过好未来（NYSE：TAL），这是一家在美国上市的做课外辅导的中国教育公司，它的另一个名字可能更出名，即学而思。我错误地在 2017 年把它给卖掉了，卖掉时的静态扣非市盈率达到 80 倍，但是两年后我一看，它的市值仍然增长了 80%，静态市盈率接近 60 倍。其中的原因在于公司近三年的扣非后盈利增速分别达到 131%、70% 和 86%。好未来这个例子大概就是新时代投资者所面临的挑战吧，像京东（NASDAQ：JD）、美团点评（3690.HK）这样的公司，上市的时候，甚至都没有盈利，我们如何对之进行估值和判断当然是个挑战。\n我甚至和别人一起面试过学而思, 面的是什么东西, 技术岗一点技术不问\n最后，回答格雷厄姆的理论过时了吗？我的观点是：格老的投资思想和理念永不会过时；他的投资方法其实如果你能遵守并能找得到相应的标的，仍然会奏效；但作为新时代的投资者，我们也必须与时俱进，迎接新时代的挑战，发展适用于我们这个时代的投资方法。\n以上就是周展宏解读投资大师格雷厄姆和《聪明的投资者》这本书的全部内容，希望能够帮助大家更深入的理解格雷厄姆和他的投资哲学。\n‍\n# 深层认知：洞悉商业本质 阅读笔记 略过了认为失去失效与老生常谈的部分\n‍\n# 认知突围 ‍\n利用光的量子性进行阐述 不要迷信与命运的观点\n事物永远都在变化，试图描述变化中的事物就像刻舟求剑。\n《易经》是什么？是从万变中找不变，只有规律是不变的。但是，这规律一旦被总结出来，又成了固定的，又会因为观察者的介入而发生坍缩。\n‍\n# 股市与楼市 文化差异必然导致经济差异。由于农耕文明里的契约精神欠缺，人与人之间的信任度比较低，这导致人们只愿意相信那些看得见、摸得着、偷不走、用不坏、不变质、不过时的东西。放眼四望，只有「房子」能同时满足这些条件。\n\u0026hellip;\n中国农耕民族的习性和文化，决定了中国人将财富大量放在楼市、土地、红木、瓷器、字画、储蓄等实物和文化资产上。\n中国的股市呢？就像我们前面分析的那样：股市只有在自由流动性的社会中才能成为真正的股市。所以无论你多么懂投资，你的理论在中国股市里都不适用。我们也千万不能用西方那套思维去解读中国股市。\n同样的道理，为什么很多人看不透中国房价趋势呢？因为太多人的经济知识，都是西方的经济理论，用西方经济的逻辑去分析中国楼市，当然错误百出，或者认为这是怪胎。\n我们必须从文明发源处去看楼市和股市，才能看透其本质。\n对于中国来说，楼市是财富的蓄水池，股市就像开闸放洪的水。随着财富的增加，蓄水池（房市）的水位也会不断增高。当水位即将到达上警戒线时，就要开闸泄洪，放水灌溉一下社会。当水位低于下警戒线时，就需要再继续蓄水。\n两害相权取其轻。如果两者同时面临问题，我们宁可给水库增加水，让水溢出，也不会无限放水，变成洪水泛滥。\n那么，中国房地产究竟该何去何从？相信大家已经有了自己的答案。\n‍\n# 利润接近零 在之前，一个人的成功，往往靠三大因素：机遇、胆识和努力。\n但这三大要素如今都在被一一化解：当数据信息越来越对称，机会越来越平等，人们的见识越来越接近，各种区隔越来越少，机遇就失去了作用；当分工越来越细致、周密，法律、法规越来越完善，社会告别了野蛮生长期，胆识就失去了作用；当人人都在努力拼命，人人都明白只有靠自己的时候，你的个人努力也不值一提。\n另外，随着社会的开放，未来无论做什么，竞争都会越来越激烈，而当竞争绝对充分的时候，所有的利润都会无限接近社会的平均利润率。\n每个行业都会有一个利润的红利期，往往发生在一个行业的初期，处于爆发阶段。当从业人员较少，社会需求较大时，这个阶段的利润率就比较高。\n由于利润率较大，就会有很多人插足进来，随着从业的人越来越多，市场开始趋向饱和，竞争越来越激烈。于是，利润率就会大幅下降。降到什么时候为止呢？降到接近整个社会的平均利润率为止。\n所谓社会的平均利润率，就是在这个社会上，一个人能够维持基本生活所需的收入。比如，对于现在的中国来说，这个收入水平在 6000—10000 元之间，无论你之前是从事什么暴利行业的，都会被拉到这个水平。\n‍\n未来老板的收入也会无限接近员工的收入，双方一起无限接近社会的平均劳动收入。\n未来，我们面对的是一个什么样的世界？\n那是一个三无的世界：无生意可做，无工可打，无机可投。\n所谓无生意可做，原因是传统社会的信息是不对称的，这导致社会的「供给」和「需求」始终是错位的，这就需要「生意人」去对接，并从中谋利。而在互联网时代，信息变得对称又透明，「供给」和「需求」都被精准连接，已经不需要生意人去对接了，于是「中间环节」和「赚差价」都不存在了。\n所谓无工可打，原因是传统社会遵循的是大工业逻辑，很多人作为员工只需要执行公司命令就可以了，他们并不需要承担结果，这就是打工的本质。而在未来的时代，随着个体开始崛起，公司开始平台化，你必须主动思考和去解决问题，并发挥特长为社会创造价值，否则你就没有存在的价值，如果未来你还是抱着打工者的心态，那么一定会被淘汰。\n所谓无机可投，原因是传统社会里有很多不完善的地方，导致每个行业都有潜规则，这让很多人可以通过不正当途径获得灰色收入。而在未来，随着中国法律、法规变得越来越完善，投机的空间会越来越小。未来，所有人都要适应在公开、透明的情况下展开活动。\n那么，在这种情况之下，人就不能有所作为了吗？恰恰不是。我认为，未来一个人要想改变命运，既不是靠拼命，也不是靠机遇，否则人类会永远陷入竞争和踩挤的陷阱里，在互相对抗和算计的轮回里无法自拔。\n未来是价值回归的时代，我们必须调整好自己的心态，不要再奢望一夜暴富，而是要脚踏实地地去创造。\n未来我们只有一条出路，那就是把自己定位为价值创造者，你能取得多大的成就，完全取决于你创造的价值。\n中国正在告别野蛮生长期，同时正在进入价值重塑期，未来那些一心只想发财的人，可能再也赚不到钱。而那些时刻为社会创造价值的人，一定能获得等同的地位和回报。\n‍\n# 商业时代 ‍\n商业 1.0 时代\n思维——利润差价\n载体：实体产品\n市场：卖方市场\n这个时代大概是从改革开放开始，一直持续到 2002 年。这是一个「产品」相对短缺的阶段，此时劳动力充沛又廉价，资源的开发效率较低，人们的需求也很粗放。\n因为社会需要「产品」去填充各个角落，在这种大背景之下，产品的「生产」和「流通」就很重要。负责「生产」的就是各种工厂，负责「流通」的就是各种经销商、批发商、实体店等。\n供不应求的状况决定了整个市场是「卖方市场」。这个阶段财富的核心关键词是：差价。工厂赚取的是从「原材料」到「成品」的差价，商家赚取的是产品从「原产地」到「目的地」的差价。当然，他们都大大地促进了商品的流通，维系了商业繁荣，在支撑起经济发展的同时，也给自己创造了财富。\n既然是「差价型」思维，商人比拼的就是消息的灵通性。\n‍\n商业 2.0 时代\n思维——单品海量\n载体：传统互联网\n市场：第三方市场\n从互联网诞生的那一刻起，这个世界的规则就注定要被改写。\n从 2003 年开始，中国就在逐渐进入电子商务时代。此时社会的「生产」方式依然没有变，但「消费」方式发生了重大变化。\n这时，各种第三方电商平台产品（包括价格、质量）在你面前一览无余，它彻底撕裂了「人为」和「区域」制造的差价信息，再加上交易的信息化和物流快递的发展，商品流通得更快了。\n而此时，中国实体店经过 30 年的发展，同质化现象越来越严重，于是，一大批单纯靠「信息不对称」来赚取差价的店家被淘汰了。\n然而，一批人倒下，就必然会有另一批人站起来，这是铁律。何况在当时开「网店」是免费的，成本几乎为零。于是，第一批从「实体店」转型到「网店」的人，都是最懂这个时代的人，理所当然地收获了财富。\n由于电子商务不受现实空间限制，很容易产生边际效应（即产品销量越大成本越低），所以很适合「单品海量」的产品，商家们最喜欢的就是「爆款」产品。\n此时还有一个重大变化就是：由于第三方平台主导着流量和排名，「卖方市场」迅速变成了「第三方市场」。「谁主导市场，谁就在分钱」，这也是个铁律。所以，我们可以看到一个现象：商家并没赚多少钱，却把阿里巴巴、京东等第三方平台养肥了。\n但是，电商时代的商品都是大同小异的，消费者比价太容易，导致价格战越来越激烈，「网店」只有不断地促销、刷单才能产生交易量，所以「网店」的成本不断攀升。\n最终，电商又把大家带入了价格战、同质化的怪圈。\n此时还有一个变化在发生：由于产品一直在加速生产，已经由「短缺」步入了「饱和」阶段。当消费者的选择余地越来越大时，必然开始挑三拣四，这也就意味着一种微妙的变化又将发生了。\n‍\n‍\n商业 3.0 时代\n思维——增值服务\n载体：产品增值\n市场：买方市场\n随着市场上的产品越来越多，产品开始出现「过剩」现象了，这就是「产能过剩」。产能过剩是件很可怕的事。在供大于求的情况下，无论是什么产品都急于出手，反正你不卖有人卖，你不做有人做。\n所以，这个阶段一定有很多传统工厂要倒闭，很多粗放式的生产方式要被淘汰。\n但大家不要忽略了，此时，还有一个很重要的变化：那就是大家的消费水平也在升级，也就是说，传统方式生产的产品，已经越来越无法满足人们日益增长的需求。\n以前，人们的需求是如何更加快捷地找到产品，买到性价比更高的产品。如今，产品已经足够丰富、足够多，而且都在打折促销。人们的需求升级成了如何找到「好产品」，或者说是找到属于自己的产品，这就是眼下的状态。\n所以，那些能给大家带来「价值」的产品，仍然是短缺的。这就需要我们给产品增值，我认为大概有两个方向。\n第一，纵深化。将产品的某种功能做到极致，越来越聚焦，越来越专注，就服务特定人群，引领行业的不断细分。\n第二，定制化。给消费者量体裁衣，走个性化生产路线，今后的产品不再是整齐划一的一刀切模式，这也是工业 4.0 时代的生产特征。\n以上两个方向会导致市场的分化，所谓市场分化就是说，市场「大一统」的时代正在结束。\n今后的产品很难再有统一的标准，这一群消费者喜欢的「产品」跟另一群消费者喜欢的「产品」是完全不同的，多元化是这个时代最大的特征。\n大家彼此之间将完全搞不懂对方在搞什么，当然了，我们也不需要懂，你只要生活在属于你的世界里就可以了。\n由于商业的细分，商家同质化竞争和价格战的情况将越来越少了，都属于「闷声发大财」型的。\n从这里我们可以发现，商业重心已经转移到消费者这一端，「第三方市场」主导的市场正在变成「买方市场」主导。现在最关键的问题是如何圈住自己的消费者。其实，最好的切入点就是需求，一切从消费者的需求出发。\n以前是先做产品，再去找消费者；今后是先找消费者，再去定做产品，这完全是倒施逆行的逻辑。\n我们终于发现：商业的核心最终从做「产品」切换成了聚「群众」。\n而按照「谁主导市场，谁就在分钱」的定律，此时，消费者将大大受益，并且有权分得产品利润的一杯羹。进而言之，谁拥有聚合消费者的能力，谁就掌控了未来商业。\n‍\n商业 4.0 时代\n思维——号召力\n载体：社交媒体\n市场：信用市场\n马云曾说：「如果说中国还有什么红利没有被发掘的话，信任、互信是最大的未开发财富。」\n的确，中国未来还有一波最大的红利：社会信用关系的重建。为什么这样说呢？\n之前，第三方平台的特点是「强信息、弱关系」，如淘宝、大众点评，都是在强调商品信息的正确性、公开性，但平台上的消费者之间的联动比较小，由于消费者过于分散，只能任由平台发号施令。哪个商品做活动了，哪个商品能上首页，哪个商品必须得下线，都是第三方平台说了算。\n而社交媒体已经让大家进入「弱信息，强关系」的时代，我们每一个人都是一个独立的 IP (3) 、一个独立的经济体，而且彼此联动性很强。我们获取信息的方式更多地来自「分享」，而不是「告知」。\n正如上面所言，既然商业核心机理从「物以类聚」过度到了「人以群分」，那么，今后的消费者也必将从分散走向联盟。作为一个消费者，今天你不主动把别人团结过来，明天别人也会把你团结过去。请记住，这一点非常关键，因为谁主导了消费者，谁就主导了市场，谁就能来分钱。\n看看现在的淘宝吧，排名靠前的店铺都被「网红」把持了，再看看现在的大 V、自媒体、各种小众品牌的崛起等，都是这种特征的直接反映。\n什么才是团结别人的最好工具？当然是信用和影响力。\n一方面，如今的信用市场还未建立；另一方面，大家彼此之间失去了信任。我们都把大量精力、成本放在了如何互动、提防上了。但在区块链、云计算等新技术的驱使下，信用市场必将一步步建立。今后的市场一定是「信用市场」。\n未来最好的营销是内容，最好的内容是产品，最好的产品则是信用。\n未来对于每个人来说，信用会变得格外重要。同时，「链接力」将成为未来最重要的一种能力。\n未来我们经营的不再是产品，而是一种精神和文化符号，产品只是一种副产品。\n有人会问，拼多多算哪一阶段的产物呢？其实拼多多具备了这一阶段的特征，因为它的驱动力是「低价 + 团购」。它具备了社交的属性，但它并不是这一阶段的代表，因为它的产品不具备品牌化、定制化、品质化的特征，拼多多只是特定经济环境下的产物，它并不代表未来。\n思维——小众品牌\n我们现在面对的一切经济问题，都可以用一种手段来解决，那就是个体化。\n顺应个体化这个大浪潮，中国未来将有海量的中小品牌崛起，这才是未来商业的大势所趋。\n在过去，十个亿的市场规模是由五十个客户构成的，三年以后，十个亿规模的市场将是由两千个客户构成的。\n社会已经在越来越细分，点对点的衔接越来越细致，这是海量小众品牌崛起的基础。\n未来，这些中小品牌将非常专注、聚焦于某一品类，具备垂直打通、纵向整合的能力。比如，从原料来源、设计开发，到生产营销，再到客服、后期维护，而且它们的背后可能不是一家工厂，可能是一个工厂群，都能随时被它们整合。\n其次，这些小众品牌将非常善于把人聚合起来，它们用内容和用户建立起强关联。当然，它们懂得如何更好地运用群众的力量，每一句话都蕴含了发动群众的艺术。\n当众多品牌开始百花齐放、百家争鸣时，平台就可以发挥更宏观的作用了。平台可以通过数据统计把同类的需求放到一起，进行协同生产，如原材料采集、下单时间等。这些看似碎片化的生产环节，又可以具有强大的「计划性」了。而且平台还有一个核心的任务：给平台上的各个环节的企业进行授信，降低大家不必要的磨合损耗的成本。\n平台还可以根据零售数据做精准匹配，促成「消费端」向「生产端」的渗透，帮助「生产端」做各种计划准备。这就会让「零售」和「生产」之间的协同效率增加，这解决的是无效产能，使库存最优化。\n这就是「市场经济」中的「计划经济」，非常符合辩证的哲学。\n总之，只有抓住商业变化的精髓，深刻理解商业变化规律，才能在市场上立于不败之地。\n可以发现，公开化、共享化、平台化、定制化，是未来商业的大势所趋。\n从大的方面来说，这就好比逆向打通了中国经济的任督二脉，唤醒中国进入下一个春天。\n从小的方面来说，这种新型的商业趋势，必将引起一场人们个性和兴趣的解放，包括个人价值的实现。\n‍\n# 商业版图的改变 中国经济上半场的特点，可以用四个字概括，那就是：跑马圈地\n中国经济原始积累的过程有两大红利：第一，人头红利，针对的是制造业和房地产；第二，流量红利，针对的是互联网行业\n‍\n很客观的事实，就是：中国人口高速增长的时代已经一去不返。\n尽管我们已全面实施了二孩政策，但从 2017 年开始，中国人口自然增长率明显回落，只有 5.32‰。\n与此同时，北京、上海这两座超级大都市已经在控制人口增长，数据显示北京和上海两地常住人口 40 年以来首次同时出现负增长。\n‍\n很多事物的拐点，往往从人口的拐点开始。\n2018 年之前的房地产，依靠的是大量人口进城的红利，而现在随着人口增长的放缓，这种模式也走到了尽头。\n2018 年之前的制造业，依靠的也是大量廉价劳动力的红利，而现在随着劳动力的减少，用工成本就水涨船高，劳动密集型企业彻底没了出路。\n既然外部流入人口越来越少，那就只剩一个出路：盘活存量。\n房企开始进入「盘活存量」和「生活服务」的时代，从「拿地建房」向「构建生活社区」升级。\n未来城市的特点，用一个词可以概括：人以群分。城市一定会出现一个个不同主题的群居社区，并需要有配套的服务，然后更好地服务好这一群人，这才是房企应该思考的问题。\n同理，制造型企业也必须看清未来产品的方向，定制化和个性化产品占的比重将越来越大。「按需生产」的时代正一点点接近，必须找到自己服务的精准人群，建立链接。\n\u0026hellip;\n我们已经明显地感觉到，现在的互联网行业，无论是成熟平台还是创业者，从外部获得流量的成本越来越高。\n互联网的上半场，我们抢占的是用户规模，我们通过广告活动及奖励来不断提升下载量。\n互联网的下半场，我们抢占的是用户时间，每个用户的停留和使用时间及频率，才是最关键的。\n\u0026hellip;\n‍\n都说互联网的下半场是产业互联网，什么是产业互联网呢？简而言之，就是能够深刻改变实体行业的互联网。\n互联网的优势是可以改变生产关系，改变生产关系就是优化资源配置，提升实体的供应效率、运作效率和协作效率。\n在下半场，互联网开始进入「深挖用户」和「服务实体」的阶段。未来，那些能够彻底掌控实体供应链的互联网企业，那些能够真正提升实体运作效率的互联网企业，那些能够促进实体之间协作效率的企业，一定能胜出。\n互联网的上半场，大家只顾去抢别人的地盘，天天忙着革别人的命，现在地盘抢得差不多了；互联网的下半场，轮到革自己的命了。\n数年之前，传统企业就提出了「精细化管理」的概念，现在，互联网企业必须提出「精细化运营」的思路了。\n‍\n# 商业的流体化 未来所有的东西都是一种流动的状态，包括各种平台、产品、服务，硬件、软件，有形的、无形的，都在从固定不变的，变成可以组装的、可以共享的、可以迭代的。\n世界正在回到它最本源的状态——混沌的，流动的——不断地趋向于一种平衡，打破平衡，再形成新的平衡。生生不息，日夜循环。\n世界正在从「大工业」时代过渡到「互联网」时代。\n大工业时代遵循的逻辑是「占有大于一切」，而互联网时代遵循的逻辑是「连接大于拥有」。\n大工业时代关注的是有形产品的生产和流通，有形的空间对它来说既是优势，也是一种阻碍；而互联网时代却可以把人、货物、现金、信息等一切有形和无形的东西「连接」起来，完全突破了物理空间的限制。\n大工业时代需要占有大量实体产品和有形的资源，互联网时代最关键的不是你拥有了多少有形资源，而是你能配置和影响多少资源。资源属于谁并不重要，重要的是谁在使用资源，如何更高效地使用资源。\n互联网时代注重的是流动和循环的效率，共享、分享才是大势所趋。每个人都只是一个信息节点。\n于是，所有固化的、有形的壁垒都会被流动的、无形的力量所摧毁。没有任何东西能阻碍这股洪荒之力。\n未来的世界是柔软的、流动的，所有的东西都在不断地流动、不断地迭代，变得不稳定，充满了各种不确定。\n‍\n‍\n在未来整个流动的时代，人最珍贵的东西是什么呢？\n第一是注意力，第二是感情。\n我们将不再随便消耗我们的注意力，因为世界越来越丰富，注意力就会变得越来越分散，变得越来越稀缺。没有谁的一天是 25 个小时，而且没有哪一种技术可以增加我们的注意力。\n未来的注意力就是金钱，金钱就是注意力\n‍\n在情感方面，我们更不会轻易浪费自己的感情，因为未来很多东西都是被运算出来的，如找对象、找工作、找合伙人等。人发挥主观思想意识的空间将越来越少，我们将越来越少地去动真感情，大部分的时间我们都是在逢场作戏。\n流体化的另一个特征是：互相渗透性。没有哪一个人可以无条件地主导他人，没有哪一方可以占据绝对的主动性。一切都是在互动中产生的，一切都是在协作中产生的，一切资源都将变得开放和共享。行业之间的界限越来越模糊，所有边界都被打开，互联互通是大势所趋。\n在未来那个流动的世界里，再也没有所谓的经验，没有所谓的权威，没有所谓的标准。所有人都是新手，同时所有人也都是老手，大家永远都是公平的。\n未来社会财富的流动性也会越来越快，首先，财富将变得越来越虚拟化。我们的财富经历了四个阶段：第一阶段是粮票时代，第二阶段是现金时代，第三阶段是不动产时代，第四阶段就是市值或估值时代。一旦到了第四阶段，人没有股权就很难富有，然而，股权时代的财富最大特征就是虚拟化、流动化。\n未来社会最重要的财富形式就是估值或市值，趋于虚拟和流动，只是一个数字而已。你拥有多少财富，并不代表你就可以随便花这些钱，而是代表你有支配这些钱的权利，财富多少意味着调动资源的大小。究其本质，是整个社会越来越流动化、公开化。\n在流动的世界里，未来只有现金流，没有利润率。在流体化的时代，未来会有很多生意，表面上看都是不赚钱的。比如，很多卖课程的把课程变成免费，然后靠运作社群赚钱。如果你还在依靠表面生意赚钱，那么，你必须早一天实现转型，否则总有一天你会被别人颠覆。\n在未来那个无常的社会里，你要想有存在价值，必须先能创造价值。让自己永远都有价值，是立于不败之地的根本。\n未来我们能做的只有终身学习，不断迭代自己的认知。当你一直处于学习的状态时，你也变成了一个流动的人，永远保持饥渴和虚无的状态，你就能和世界融为一体。\n‍\n# 未来你靠什么而活？ 未来的社会只有三种企业角色：一、负责国计民生的资源型企业，如国企、央企；二、负责商品流通的平台型企业，如阿里巴巴、京东、拼多多；三、在各种细分领域里有独特产品或深度服务的小公司，如价值主体。\n除此之外，就是游离在各种平台上的个体，如网店主、自媒体达人、网约车司机、律师、设计师、会计师等。\n如果以上这些都没有你的位置，你就应该考虑一下自己的未来定位了。\n在社会不断向「平台 + 个体」的结构转变过程中，平台先淘汰掉了一部分人，如各级经销商、中介、经纪人等。\n与此同时，平台又成全了很多个体户，如司机、设计师、律师、保姆、快递员、送餐员等。\n也就是说，虽然大量中间商不存在了，大量的服务个体却出现了。\n比如，由于产品越来越趋向定制化，所以大量产品设计师出现了；又如，由于产品的后期服务越来越重要，所以大量售后人员和客服出现了。\n这就是变革时代的特征：一批人倒下，必然有另外一批人站起来。\n平台的价值，就是通过运营，能够精准地将生产者和消费者对接起来。于是，定制化、个性化产品越来越多，并且商家努力的方向就是千方百计地提升产品的附加值，这就是点对点的服务。\n而在之前，这是不可能实现的，因为生产者和消费者是无法直接对接的，所以只有让大量的中间商去做对接，让大量的企业去做对接，但他们只充当了桥梁的作用，并没有提升产品的附加值。\n也就是说，原来的投机倒把、囤积居奇、反经济周期、低买高卖等差价思维，正在被一种与众不同的创造性思维取代。\n由于 5G 等新技术的出现，未来所谓的商业会越来越趋向于流体化。线上有两个流体：信息流、货币流；线下也有两个流体：产品流、人群流。线上的两股流体和线下的两股流体互相依托。\n世界的本质就是流体的，这个世界在回归它最本质的属性：流动的、变化的、生生不息。\n信息、货币、产品、人群，这四种东西会流动得越来越快，中间的阻隔会越来越少。未来商家的最大价值就是促进流体流动，商家必须成为流体的推动力，而不是各种阻碍。\n未来，我们唯一要做的，就是要成为一个价值放大者，即要使产品或服务流经你这里时能把它的价值放大，这样流体才有流经你这里的价值。而不是成为一个阻隔，让人家必须从你这里流通，然后去收买路钱。\n‍\n# 赚钱的六个层次 人赚钱的方式可以划分为六个层级：第一个层级的人，靠力气赚钱，如在工地上搬砖的工人；第二个层级的人，靠技能赚钱，如掌握一定技术的工人、月嫂等；第三个层级的人，靠经验赚钱，如帮很多人打官司的律师、做过很多手术的医生等；第四个层级的人，靠能力赚钱，如老板就是靠管理能力，创业者靠创业能力；第五个层级的人，靠名字赚钱，如作家、画家、艺术家等，越有名气，作品越值钱；第六个层级的人，靠脸面赚钱，这种人不需要力气，只要露脸就可以赚钱，如明星。\n‍\n# 二十个人性的误区 ‍\n一、我们总以为，消费者要的是货真价实的产品。实际上，消费者要的是一种幻象，要的是能把他带入一个故事场景里的产品。反复诉说自己的产品质量，不如说一个好故事。\n二、我们总以为，观众要的是有思想的好作品。实际上，观众要的是一种心理上的自我安慰，需要的是自我陶醉，大家宁可沉溺在各种虚设里不可自拔，也不愿意面对现实。所以，越有思想的文艺作品，越无人问津，而越肤浅的作品，票房越高。\n三、我们总以为，大众最想要的是各种真相，因此，我们努力呈现真相。实际上，我们通过《乌合之众》可以了解到，大众追求的从来不是什么真相，而是各种情绪和欲望，是盲从、偏执和狂热。那些让大家感觉不爽的「真相」，大家一直充耳不闻。相反，那些能给大众带来美好幻想的谎言，却可以让大众狂热。\n四、我们总以为，大众都是成年人，应该理性且成熟。实际上，很多大众的心理都还停留在婴儿阶段。他们既不想得到价值，也不想听什么道理，他们只想得到好处。他们就像嗷嗷待哺的孩子，一旦想得到好处了，就会哭闹，而妈妈就得赶紧去哄他们，或者给一口奶吃，他们马上就会喜笑颜开，满足地睡去。\n五、我们总以为，在这个信息时代，每个人都能随时随地获取各种信息。实际上，越是在这样一个似乎什么都能看得见的时代，我们越什么都看不见。信息自由传播的时代，并不意味着价值可以自由传播。相反，那些粗俗下流的内容却无孔不入。\n六、我们总以为，遇事讲道理是有用的。实际上，只有当别人也讲道理，当大家都遵守规则的时候，讲道理才是有用的。只有对文明人才能讲道理，面对流氓和小人，你讲不清道理。\n七、我们总以为，一切关系都是逻辑关系或者情理关系。实际上，很多关系都是利益关系。你伤害了谁的利益就是谁的敌人；你符合了谁的利益，就是谁的朋友。\n八、我们总以为，做人最重要的是靠能力，做事最重要的是靠拼搏。实际上，你和谁结成了利益共同体，才决定了你的发展。因此，你不能只埋头做事，你还需要不断地抬头看势，这就是识时务者为俊杰。\n九、我们总以为，规则是用来遵守的。实际上，规则是用来打破的，就看你会不会打破。\n十、我们总以为，人的自由度越高，社会就越平等。实际上，当人的综合素养还没到一定的阶段，当人还没普遍地学会自律的时候，绝对的自由只能导致绝对的奴役。人都被各种商业利益操控，人性将被约束。\n十一、我们总以为，给孩子创造最好的条件，把自己最好的都留给孩子，就是父母最大的责任，心里才能踏实。实际上，世上最大的悲剧是让孩子「蠢而多财」。自古以来，企图给孩子留一笔钱，梦想让孩子也可以富贵逍遥的人，基本上没有实现的。相反，那些留下良好习惯、家风的家族，却可以昌盛多年。\n十二、我们总以为，给孩子讲各种大道理，就可以让孩子好好读书，热爱学习。实际上，孩子从来不会听你说，他们只会模仿你。因此，大人教育孩子读书的最好办法，就是以身作则。而多少家长自己从来不读书，时间都花费在酒桌上、牌桌上和各种低级趣味的娱乐上，却指望着孩子的精神趣味在书本上，这太荒谬了。\n十三、我们总以为，一个老实人往往是比较靠谱的。实际上，很多老实人都是因为没见过世面或没有机会而老实，他们一旦有了机会，往往立刻变了样。真正的老实人是经历过风风雨雨后依然守得住自己初心的那种人，是见过各种世面和诱惑后依然淡定和坦然的人。\n十四、我们总以为，那些对我们恭敬的人，都是真正的朋友，都是应该善待的客人。实际上，那些喜欢用语言来讨好我们的人，往往口蜜腹剑，内心对我们也许已是百般抵触。相反，那些对我们总是直言不讳，让我们感到不爽的人，往往才是成全我们的贵人。「良药苦口利于病，忠言逆耳利于行。」就像唐太宗离不开魏征，我们每个人都需要一面镜子。\n十五、我们总以为，一起合谋做了坏事而没被发现，一切就会过去。实际上，只要有不正当利益，就会有分赃，一旦分赃不均，就会引发仇恨和忌恨，从而导致报复，事情总会有败露的那一天。因此，做一个堂堂正正的人，才是最明智的。\n十六、我们总以为，谈恋爱就要找个一心一意，并且毫无保留对自己好的人。实际上，这就是悲剧的引子。因为，只要有牺牲，就意味着不公，最后总会失衡，甚至拔刀相见。\n十七、我们总以为，那些对天发誓的爱情最值得珍惜。实际上，真正会爱别人的人，一定会先爱自己，会经过百般努力让自己成为对方喜欢的模样，而不是打着爱别人的名义去要挟别人来满足自己。爱情的最高境界，是两个人通过相互激励和影响，最后都变成了彼此喜欢的模样。\n十八、我们总以为，当一个人无缘无故地为自己付出时，是因为自己遇到了一个好人，遇到了对的人，然后接受得心安理得。实际上，在当今社会里，如果一个人总是无条件地对你好，往往会以对你好的名义窥探你拥有的东西。世界上没有无缘无故的忠诚，人和人最健康、最长久的关系，就是互相成全，而不是牺牲一方成全另一方。\n十九、我们总以为，要尽最大努力地帮助每一个人。实际上，当你给一个人提供了帮助，远远超过了困境对他的限制，他就会对困境麻木，甚至放弃突破困境的意愿，对你形成依赖，由感激变成理所当然。当你不再施舍的时候，他就会和你反目成仇。因此，帮助一个人的最高境界就是帮他实现自力更生，然后离开。\n二十、我们总以为，简简单单地做一个好人就够了。实际上，这个世界对好人的要求真的是非常严苛的。如果你被当成一个好人，你必须做到完美无缺，大家会把所有的道德枷锁套在你身上。哪天你要是有一丝一毫没有做到完美，你所有的努力都会前功尽弃。一个人有多大的善良，就必须有多高的智商与之相匹配，更要有保护自己的能力。\n‍\n# 赛博 ‍\n# 快速开发框架评价 ‍\n无利益相关，这几天正好在欣赏若依这个框架，顺手答一下.\n不管大家喜不喜欢这种开源的快速开发框架，恐怕都很难否认一点：这种框架中的佼佼者，里面是有着很多最佳实践的.\n姑且不谈底层的计算机基础和编程语言基础的学习，在学习框架和库这个层面上（因为题主问的就是学习 SpringBoot），文档和示例是必不可少的，文档告诉你在语法层面可以怎么做，示例告诉你在经验层面最好怎么做.\n学习框架和库，核心是上手实践. 这有两种选择，一是看着文档，从无到有地实现功能，这难免要试错犯错，但掌握得更扎实. 二是看着示例，照猫画虎地实现功能，这能少走弯路，但是认知效果较差.\n人的学习进步，以理论联系实践效果最佳，理论由文档和书籍提供，实践又分为直接经验和间接经验. 亲自去编码去试错，这是宝贵的直接经验，而优秀的开源项目的源码和文档，则提供了宝贵的间接经验.\n我认为最好的学习方法，是先自己闭门造车，把功能做完，然后再开眼看世界，看别人是怎么做的. 两相比较，去思考别人的做法好在哪里，其中包含了哪些面向对象的或者软件工程的理论，自己能从中学到哪些东西，怎样用学到的这些东西改进自己的代码. 这看起来是弯路，但其实是捷径，能把理论和实践、直接经验和间接经验有效地结合在一起.\n若依这种优秀的快速开发框架，这十多年来我看过不少，它们的主要组成部分都是技术层面的 CRUD 封装，和业务层面的权限字典等通用功能. 可以说用做管理系统，它们已经接近当下程序员所能做到的极限了. 这不是一个溢美的结论，优秀的快速开发框架太多了，横向比较可知不会有质的突破了. 而学习 SpringBoot，用 SpringBoot 做项目，几乎不可能不做 CRUD. 所以只要目的是学习和使用 SpringBoot，那去阅读和理解这些优秀框架的源码，就一定能从中吸收到营养.\n但必须注意，不能停留在使用快速开发框架的舒适窝里. 如果只成为一个若依程序员而不是一个 SpringBoot 程序员，只是一个 SpringBoot 程序员而不是一个 Java 程序员，只是一个 Java 程序员而不是一个通用的程序员，那学习和成长都会遇到瓶颈. 越是傻瓜式的框架，越有把需求实现员隔开于技术的本质的副作用. 从 JSP+Servlet 到 SSH，从 SSH 到 SpringBoot，从 SpringBoot 到若依，我们实现需求越来越快了，同时深入底层和亲手封装的次数也越来越少了，照猫画虎，搭一搭积木，钱就到手了，这是赚钱的愉悦，但不是技术长进的愉悦.\n所以不要满足于使用，而要追求于吃透，使用若依简单，吃透若依不简单，它里面包含了很多对编程语言、面向对象、软件工程、业务逻辑的深入理解，体现出了作者深厚的内功. 如果真的想看透它的门道，不止是 SpringBoot，它能倒逼你去读很多书、看很多文档、理解很多业务. 正是因为简单的背后有很多东西，所以它才能让你实现需求起来如此简单.\n快速开发框架确实烂大街，也确实无非是 CRUD、代码生成和通用业务，确实容易让有追求的程序员看不起，但不得不承认的是，这种快速开发框架，大部分程序员也是没能力从零开始手动封装一个的. 与此同时，它又没有像真正顶级的开源项目那样深奥莫测、高不可攀，大部分程序员努努力，下下功夫，封装一个低配版出来，还是有希望的. 这个难度，正好适合于作为普通程序员的学习材料，只要避免在学习过程中动眼比动手多，看得比敲得多就可以了.\n所以我个人的建议是，对它采用对待好学生的作业的态度，你先自己试着把作业做出来，然后再去看，看了也不要停留于抄，而是琢磨、理解，最后自己再上手把自己的作业改好. 做习题而没有答案，那是不行的，上来就抄答案，那更是不行的. 在管理系统和 CRUD 这个层面，说若依这种优秀的快速开发框架的源码是答案，恐怕大差不差，至少说它是好学生的作业，不会是夸大其词.\n至于 SpringBoot 的文档和源码，那是教材正文啊. 正文和习题答案，当然缺一不可. 无论编程，还是其他方面，如果你学习的时候不得要领，就想想教材的组织方式，最重要的一点是，一定要亲手做题.\n‍\n嗯, 当初学习了若依, 除了拿来对付期末作业之外的用处竟然还有, 那就是对付公司的内部框架, 确实有可以共通的地方.\n# 关于要不要刷算法题 ‍\n几乎所有的计算机专业笔试都会带上算法题.\n关于算法题的声音历来呈对立态势. 有人说数据结构很实用，说算法能锻炼思维，锻炼在压力环境下解决问题的能力，但也有人说算法题都是花招之类，说一块奖牌没多大用.\n虽然声音不统一，但是可见的是，只要有笔试，不管是申请实验室还是找工作，算法题是常客. 所以，即使不从纯粹的学术角度出发，在刚进入大学的时候，多刷算法题还是对自己的发展还是很有帮助的.\n如果是刚刚入坑计软网的小白，首先推荐去洛谷的题单，把官方题单刷一遍. 刚开始刷题时，即使自己完成了，也要看题解中是否有更优秀的方案（一般是没有，leetcode 这种时间卡得松的会有）；如果独立完成不了，思考最多 10 分钟，去把题解看懂，不要觉得气馁，因为很多题目都需要特定的数据结构和算法，你只是不知道而已.\n‍\n鼠鼠我啊, 真的是寄了, 成也算法, 败也算法.\n‍\n# 本科生算法学习 发现很多吧里老哥对算法有误解。作为二本菜狗我讲一下自己的见解, 大一大二的同学可以参考一下。\n首先明确的是本科是进不了算法岗的,算法对于本科的作用是应付笔试和面试。\n对于所有同学,如果想打 acm，或者已经入队了,推荐刷取。比赛完后停。\n对于二本学院及以下或接近二本的同学,我是不推荐刷算法的。面对现实,招你们的公司都是不看算法的。我至今实习给面试的所有公司中，有笔试且有算法的 hot100 水平随便秒，大部分是没笔试或笔试不考算法。至于面试,没有一家问算法。\n至于工作以后跳槽换工作要考算法,可以以后再刷，你本科期间实在要刷，我觉得 hot100 刷两遍绰绰有余\n一本重本 91 的同学,你们想冲大厂，毫无疑问算法是要刷的，我做过美团的海笔，还是有难度的。面试没面过，预估 hot100 瞬秒的水平。\n我反在大学期间多次接触算法, 就算原本数学天赋不行也借此机会大幅提升了能力, 因此我对于算法这块还是有信心的.\n‍\n你有信心个屁 ‍\n# 设计模式拾遗 - 实战建议 ‍\n# 基于接口而非实现编程 ‍\n\u0026hellip;\n除此之外，很多人在定义接口的时候，希望通过实现类来反推接口的定义。先把实现类写好，然后看实现类中有哪些方法，照抄到接口定义中。如果按照这种思考方式，就有可能导致接口定义不够抽象，依赖具体的实现。这样的接口设计就没有意义了。不过，如果你觉得这种思考方式更加顺畅，那也没问题，只是将实现类的方法搬移到接口定义中的时候，要有选择性的搬移，不要将跟具体实现相关的方法搬移到接口中，比如 AliyunImageStore 中的 generateAccessToken() 方法。\n‍\n# 如何给代码“解耦”？ 封装与抽象\n封装和抽象作为两个非常通用的设计思想，可以应用在很多设计场景中，比如系统、模块、lib、组件、接口、类等等的设计。封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口\n中间层\n引入中间层能简化模块或类之间的依赖关系。下面这张图是引入中间层前后的依赖关系对比图。在引入数据存储中间层之前，A、B、C 三个模块都要依赖内存一级缓存、Redis 二级缓存、DB 持久化存储三个模块。在引入中间层之后，三个模块只需要依赖数据存储一个模块即可。从图上可以看出，中间层的引入明显地简化了依赖关系，让代码结构更加清晰\n除此之外，我们在进行重构的时候，引入中间层可以起到过渡的作用，能够让开发和重构同步进行，不互相干扰。比如，某个接口设计得有问题，我们需要修改它的定义，同时，所有调用这个接口的代码都要做相应的改动。如果新开发的代码也用到这个接口，那开发就跟重构冲突了。为了让重构能小步快跑，我们可以分下面四个阶段来完成接口的修改。\n第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。 第二阶段：新开发的代码依赖中间层提供的新接口。 第三阶段：将依赖老接口的代码改为调用新接口。 第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口。 这样，每个阶段的开发工作量都不会很大，都可以在很短的时间内完成。重构跟开发冲突的概率也变小了。\n模块化\n模块化是构建复杂系统常用的手段。不仅在软件行业，在建筑、机械制造等行业，这个手段也非常有用。对于一个大型复杂系统来说，没有人能掌控所有的细节。之所以我们能搭建出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，让不同的人负责不同的模块，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。\n其他设计思想和原则\n“高内聚、松耦合”是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。实际上，在前面的章节中，我们已经多次提到过这个设计思想。很多设计原则都以实现代码的“高内聚、松耦合”为目的。我们来一块总结回顾一下都有哪些原则。\n‍\n# 代码行数越少就越“简单”吗？ 我们先一起看一个例子。下面这三段代码可以实现同样一个功能：检查输入的字符串 ipAddress 是否是合法的 IP 地址。一个合法的 IP 地址由四个数字组成，并且通过“.”来进行分割。每组数字的取值范围是 0~255。第一组数字比较特殊，不允许为 0。对比这三段代码，你觉得哪一段代码最符合 KISS 原则呢？如果让你来实现这个功能，你会选择用哪种实现方法呢？你可以先自己思考一下，然后再看我下面的讲解。\n// 第一种实现方式: 使用正则表达式 public boolean isValidIpAddressV1(String ipAddress) { if (StringUtils.isBlank(ipAddress)) return false; String regex = \u0026#34;^(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|[1-9])\\\\.\u0026#34; + \u0026#34;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.\u0026#34; + \u0026#34;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.\u0026#34; + \u0026#34;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)$\u0026#34;; return ipAddress.matches(regex); } // 第二种实现方式: 使用现成的工具类 public boolean isValidIpAddressV2(String ipAddress) { if (StringUtils.isBlank(ipAddress)) return false; String[] ipUnits = StringUtils.split(ipAddress, \u0026#39;.\u0026#39;); if (ipUnits.length != 4) { return false; } for (int i = 0; i \u0026lt; 4; ++i) { int ipUnitIntValue; try { ipUnitIntValue = Integer.parseInt(ipUnits[i]); } catch (NumberFormatException e) { return false; } if (ipUnitIntValue \u0026lt; 0 || ipUnitIntValue \u0026gt; 255) { return false; } if (i == 0 \u0026amp;\u0026amp; ipUnitIntValue == 0) { return false; } } return true; } // 第三种实现方式: 不使用任何工具类 public boolean isValidIpAddressV3(String ipAddress) { char[] ipChars = ipAddress.toCharArray(); int length = ipChars.length; int ipUnitIntValue = -1; boolean isFirstUnit = true; int unitsCount = 0; for (int i = 0; i \u0026lt; length; ++i) { char c = ipChars[i]; if (c == \u0026#39;.\u0026#39;) { if (ipUnitIntValue \u0026lt; 0 || ipUnitIntValue \u0026gt; 255) return false; if (isFirstUnit \u0026amp;\u0026amp; ipUnitIntValue == 0) return false; if (isFirstUnit) isFirstUnit = false; ipUnitIntValue = -1; unitsCount++; continue; } if (c \u0026lt; \u0026#39;0\u0026#39; || c \u0026gt; \u0026#39;9\u0026#39;) { return false; } if (ipUnitIntValue == -1) ipUnitIntValue = 0; ipUnitIntValue = ipUnitIntValue * 10 + (c - \u0026#39;0\u0026#39;); } if (ipUnitIntValue \u0026lt; 0 || ipUnitIntValue \u0026gt; 255) return false; if (unitsCount != 3) return false; return true; } 第一种实现方式利用的是正则表达式，只用三行代码就把这个问题搞定了。它的代码行数最少，那是不是就最符合 KISS 原则呢？答案是否定的。虽然代码行数最少，看似最简单，实际上却很复杂。这正是因为它使用了正则表达式。 一方面，正则表达式本身是比较复杂的，写出完全没有 bug 的正则表达本身就比较有挑战；另一方面，并不是每个程序员都精通正则表达式。对于不怎么懂正则表达式的同事来说，看懂并且维护这段正则表达式是比较困难的。这种实现方式会导致代码的可读性和可维护性变差，所以，从 KISS 原则的设计初衷上来讲，这种实现方式并不符合 KISS 原则。 讲完了第一种实现方式，我们再来看下其他两种实现方式。 第二种实现方式使用了 StringUtils 类、Integer 类提供的一些现成的工具函数，来处理 IP 地址字符串。第三种实现方式，不使用任何工具函数，而是通过逐一处理 IP 地址中的字符，来判断是否合法。从代码行数上来说，这两种方式差不多。但是，第三种要比第二种更加有难度，更容易写出 bug。从可读性上来说，第二种实现方式的代码逻辑更清晰、更好理解。所以，在这两种实现方式中，第二种实现方式更加“简单”，更加符合 KISS 原则。 不过，你可能会说，第三种实现方式虽然实现起来稍微有点复杂，但性能要比第二种实现方式高一些啊。从性能的角度来说，选择第三种实现方式是不是更好些呢？在回答这个问题之前，我先解释一下，为什么说第三种实现方式性能会更高一些。一般来说，工具类的功能都比较通用和全面，所以，在代码实现上，需要考虑和处理更多的细节，执行效率就会有所影响。而第三种实现方式，完全是自己操作底层字符，只针对 IP 地址这一种格式的数据输入来做处理，没有太多多余的函数调用和其他不必要的处理逻辑，所以，在执行效率上，这种类似定制化的处理代码方式肯定比通用的工具类要高些。 不过，尽管第三种实现方式性能更高些，但我还是更倾向于选择第二种实现方法。那是因为第三种实现方式实际上是一种过度优化。除非 isValidIpAddress() 函数是影响系统性能的瓶颈代码，否则，这样优化的投入产出比并不高，增加了代码实现的难度、牺牲了代码的可读性，性能上的提升却并不明显。 ‍\n# 如何写出满足 KISS 原则的代码？ 实际上，我们前面已经讲到了一些方法。这里我稍微总结一下。\n不要使用同事可能不懂的技术来实现代码。比如前面例子中的正则表达式，还有一些编程语言中过于高级的语法等。 不要重复造轮子，要善于使用已经有的工具类库。经验证明，自己去实现这些类库，出 bug 的概率会更高，维护的成本也比较高。 不要过度优化。不要过度使用一些奇技淫巧（比如，位运算代替算术运算、复杂的条件语句代替 if-else、使用一些过于底层的函数等）来优化代码，牺牲代码的可读性。 实际上，代码是否足够简单是一个挺主观的评判。同样的代码，有的人觉得简单，有的人觉得不够简单。而往往自己编写的代码，自己都会觉得够简单。所以，评判代码是否简单，还有一个很有效的间接方法，那就是 code review。如果在 code review 的时候，同事对你的代码有很多疑问，那就说明你的代码有可能不够“简单”，需要优化啦。 ‍\n我错了我错了, 之后写 Dirty Code\n# 如何实现一个简单的 DI 容器？ 用 Java 语言来实现一个简单的 DI 容器，核心逻辑只需要包括这样两个部分：配置文件解析、根据配置文件通过“反射”语法来创建对象。\n‍\n# 最小原型设计 因为我们主要是讲解设计模式，所以，在今天的讲解中，我们只实现一个 DI 容器的最小原型。像 Spring 框架这样的 DI 容器，它支持的配置格式非常灵活和复杂。为了简化代码实现，重点讲解原理，在最小原型中，我们只支持下面配置文件中涉及的配置语法。\n配置文件beans.xml \u0026lt;beans\u0026gt; \u0026lt;bean id=\u0026#34;rateLimiter\u0026#34; class=\u0026#34;com.xzg.RateLimiter\u0026#34;\u0026gt; \u0026lt;constructor-arg ref=\u0026#34;redisCounter\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;redisCounter\u0026#34; class=\u0026#34;com.xzg.redisCounter\u0026#34; scope=\u0026#34;singleton\u0026#34; lazy-init=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;constructor-arg type=\u0026#34;String\u0026#34; value=\u0026#34;127.0.0.1\u0026#34;\u0026gt; \u0026lt;constructor-arg type=\u0026#34;int\u0026#34; value=1234\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;/bean 最小原型的使用方式跟 Spring 框架非常类似，示例代码如下所示：\npublic class Demo { public static void main(String[] args) { ApplicationContext applicationContext = new ClassPathXmlApplicationContext( \u0026#34;beans.xml\u0026#34;); RateLimiter rateLimiter = (RateLimiter) applicationContext.getBean(\u0026#34;rateLimiter\u0026#34;); rateLimiter.test(); //... } } ‍\n# 提供执行入口 面向对象设计的最后一步是：组装类并提供执行入口。在这里，执行入口就是一组暴露给外部使用的接口和类。通过刚刚的最小原型使用示例代码，我们可以看出，执行入口主要包含两部分：ApplicationContext 和 ClassPathXmlApplicationContext。其中，ApplicationContext 是接口，ClassPathXmlApplicationContext 是接口的实现类。两个类具体实现如下所示：\npublic interface ApplicationContext { Object getBean(String beanId); } public class ClassPathXmlApplicationContext implements ApplicationContext { private BeansFactory beansFactory; private BeanConfigParser beanConfigParser; public ClassPathXmlApplicationContext(String configLocation) { this.beansFactory = new BeansFactory(); this.beanConfigParser = new XmlBeanConfigParser(); loadBeanDefinitions(configLocation); } private void loadBeanDefinitions(String configLocation) { InputStream in = null; try { in = this.getClass().getResourceAsStream(\u0026#34;/\u0026#34; + configLocation); if (in == null) { throw new RuntimeException(\u0026#34;Can not find config file: \u0026#34; + configLocation); } List\u0026lt;BeanDefinition\u0026gt; beanDefinitions = beanConfigParser.parse(in); beansFactory.addBeanDefinitions(beanDefinitions); } finally { if (in != null) { try { in.close(); } catch (IOException e) { // TODO: log error } } } } @Override public Object getBean(String beanId) { return beansFactory.getBean(beanId); } } 从上面的代码中，我们可以看出，ClassPathXmlApplicationContext 负责组装 BeansFactory 和 BeanConfigParser 两个类，串联执行流程：从 classpath 中加载 XML 格式的配置文件，通过 BeanConfigParser 解析为统一的 BeanDefinition 格式，然后，BeansFactory 根据 BeanDefinition 来创建对象。\n‍\n# 配置文件解析 配置文件解析主要包含 BeanConfigParser 接口和 XmlBeanConfigParser 实现类，负责将配置文件解析为 BeanDefinition 结构，以便 BeansFactory 根据这个结构来创建对象。配置文件的解析比较繁琐，不涉及我们要讲的理论知识，不是我们讲解的重点，所以这里我只给出两个类的大致设计思路，并未给出具体的实现代码。如果感兴趣的话，你可以自行补充完整。具体的代码框架如下所示：\npublic interface BeanConfigParser { List\u0026lt;BeanDefinition\u0026gt; parse(InputStream inputStream); List\u0026lt;BeanDefinition\u0026gt; parse(String configContent); } public class XmlBeanConfigParser implements BeanConfigParser { @Override public List\u0026lt;BeanDefinition\u0026gt; parse(InputStream inputStream) { String content = null; // TODO:... return parse(content); } @Override public List\u0026lt;BeanDefinition\u0026gt; parse(String configContent) { List\u0026lt;BeanDefinition\u0026gt; beanDefinitions = new ArrayList\u0026lt;\u0026gt;(); // TODO:... return beanDefinitions; } } public class BeanDefinition { private String id; private String className; private List\u0026lt;ConstructorArg\u0026gt; constructorArgs = new ArrayList\u0026lt;\u0026gt;(); private Scope scope = Scope.SINGLETON; private boolean lazyInit = false; // 省略必要的getter/setter/constructors public boolean isSingleton() { return scope.equals(Scope.SINGLETON); } public static enum Scope { SINGLETON, PROTOTYPE } public static class ConstructorArg { private boolean isRef; private Class type; private Object arg; // 省略必要的getter/setter/constructors } } ‍\n# 核心工厂类设计 最后，我们来看，BeansFactory 是如何设计和实现的。这也是我们这个 DI 容器最核心的一个类了。它负责根据从配置文件解析得到的 BeanDefinition 来创建对象。 如果对象的 scope 属性是 singleton，那对象创建之后会缓存在 singletonObjects 这样一个 map 中，下次再请求此对象的时候，直接从 map 中取出返回，不需要重新创建。如果对象的 scope 属性是 prototype，那每次请求对象，BeansFactory 都会创建一个新的对象返回。 实际上，BeansFactory 创建对象用到的主要技术点就是 Java 中的反射语法：一种动态加载类和创建对象的机制。我们知道，JVM 在启动的时候会根据代码自动地加载类、创建对象。至于都要加载哪些类、创建哪些对象，这些都是在代码中写死的，或者说提前写好的。但是，如果某个对象的创建并不是写死在代码中，而是放到配置文件中，我们需要在程序运行期间，动态地根据配置文件来加载类、创建对象，那这部分工作就没法让 JVM 帮我们自动完成了，我们需要利用 Java 提供的反射语法自己去编写代码。 搞清楚了反射的原理，BeansFactory 的代码就不难看懂了。具体代码实现如下所示： public class BeansFactory { private ConcurrentHashMap\u0026lt;String, Object\u0026gt; singletonObjects = new ConcurrentHashMap\u0026lt;\u0026gt;(); private ConcurrentHashMap\u0026lt;String, BeanDefinition\u0026gt; beanDefinitions = new ConcurrentHashMap\u0026lt;\u0026gt;(); public void addBeanDefinitions(List\u0026lt;BeanDefinition\u0026gt; beanDefinitionList) { for (BeanDefinition beanDefinition : beanDefinitionList) { this.beanDefinitions.putIfAbsent(beanDefinition.getId(), beanDefinition); } for (BeanDefinition beanDefinition : beanDefinitionList) { if (beanDefinition.isLazyInit() == false \u0026amp;\u0026amp; beanDefinition.isSingleton()) { createBean(beanDefinition); } } } public Object getBean(String beanId) { BeanDefinition beanDefinition = beanDefinitions.get(beanId); if (beanDefinition == null) { throw new NoSuchBeanDefinitionException(\u0026#34;Bean is not defined: \u0026#34; + beanId); } return createBean(beanDefinition); } @VisibleForTesting protected Object createBean(BeanDefinition beanDefinition) { if (beanDefinition.isSingleton() \u0026amp;\u0026amp; singletonObjects.contains(beanDefinition.getId())) { return singletonObjects.get(beanDefinition.getId()); } Object bean = null; try { Class beanClass = Class.forName(beanDefinition.getClassName()); List\u0026lt;BeanDefinition.ConstructorArg\u0026gt; args = beanDefinition.getConstructorArgs(); if (args.isEmpty()) { bean = beanClass.newInstance(); } else { Class[] argClasses = new Class[args.size()]; Object[] argObjects = new Object[args.size()]; for (int i = 0; i \u0026lt; args.size(); ++i) { BeanDefinition.ConstructorArg arg = args.get(i); if (!arg.getIsRef()) { argClasses[i] = arg.getType(); argObjects[i] = arg.getArg(); } else { BeanDefinition refBeanDefinition = beanDefinitions.get(arg.getArg()); if (refBeanDefinition == null) { throw new NoSuchBeanDefinitionException(\u0026#34;Bean is not defined: \u0026#34; + arg.getArg()); } argClasses[i] = Class.forName(refBeanDefinition.getClassName()); argObjects[i] = createBean(refBeanDefinition); } } bean = beanClass.getConstructor(argClasses).newInstance(argObjects); } } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) { throw new BeanCreationFailureException(\u0026#34;\u0026#34;, e); } if (bean != null \u0026amp;\u0026amp; beanDefinition.isSingleton()) { singletonObjects.putIfAbsent(beanDefinition.getId(), bean); return singletonObjects.get(beanDefinition.getId()); } return bean; } } 执行入口那里调用addBeanDefinitions​ 然后addBeanDefinitions​ 再调用 createBean 利用反射创建对象，如果对象的 scope 属性是 singleton，那对象创建之后会缓存在 singletonObjects 这样一个 map 中 最后最小原型设计那里再调用 getBean 从 singletonObjects 获取对象。 ‍\n‍\n# MyBatis-Plus 是如何拓展 mybatis 的 ‍\n首先我们只解释为什么他可以做到不写 SQL . 我们回答这个问题. 其实拓展 Mybatis 是个很麻烦的事 , page-helper 依靠的事 Mybatis 自带的拦截器. 会代理 executor 执行. 可以看看 org.apache.ibatis.plugin.Plugin​ 和 org.apache.ibatis.plugin.InterceptorChain​ 我一直不懂 pluginall 是做啥了, 一个循环迭代, 那么为啥要循环, 但是代理层并没有迭代哇. 我不懂,有小伙伴懂可以点我联系方式.\n说完 Mybatis 我们聊聊 Plush 咋做的. 其实由了解过 TKmapper 也和他做法相似.\n简单开始 :\npublic interface OrderMapper extends BaseMapper\u0026lt;Orders\u0026gt; { } 为啥要实现这个接口呢. 接口一般是代理 , 所以其实他修改了原来 Mybatis 的代理逻辑. 在 com.baomidou.mybatisplus.core.override.PageMapperProxy​ 这个类里. 其实他基本重写了 Mybatis 注册逻辑. 但是流程不变, 比如\n他封装了一个 MybatisConfiguration​ 继承了 Configuration​ ,\n其次就是MybatisMapperRegistry​ 和 MapperRegistry​ ,\n​PageMapperProxy​ 和 MapperProxy​ ,\n​PageMapperMethod​ 和 MapperMethod​ ,\n​MybatisSqlSessionTemplate​ 和 SqlSessionTemplate​ 代理关系. (这里是 Spring 的)\n流程不说了, 就是 Configuration 就是元信息. 给了 SqlSession. 其次我们拿 Mapper 依靠的是 MapperRegister 拿到一个代理对象. 剩余的流程就是 Executor 不断的委托代理执行, 其实也类似于装饰着模式. 就是 a 只做缓存, 查询的交给下一级 . 可以说包装了一层缓存.\n其实说到这里也很简单 , 获取一个 SQL 就行了, 所以有一个接口 com.baomidou.mybatisplus.core.conditions.ISqlSegment​ 来获取 SQL . 下层有\n他的 Wrapper 类了, 就负责包装 SQL . com.baomidou.mybatisplus.core.conditions.Wrapper​ 来实现的 . (注意版本不一样, 可能也不一样 . 我是 3.0) .\n这里负责构建 SQL .\n@Test public void testSelect() { LambdaQueryWrapper\u0026lt;Orders\u0026gt; eq1 = new LambdaQueryWrapper\u0026lt;Orders\u0026gt;().eq(Orders::getName, \u0026#34;小李\u0026#34;); System.out.println(eq1.getSqlSegment()); } 会输出 :\nname = #{ew.paramNameValuePairs.MPGENVAL1} 其实如果有人 Debug 不知道 ew 是什么? 其实就是个占位符, ew 的意思是 EntityWrapper​ , 是 2.X 版本的玩意, 但是迁移把他删了.\n就是依靠这个玩意来构建 SQL . 最后把他给 SqlStatement. 也就能获取最后的 SQL 了.\n反正我就记录一下. 也就是 上层全部有 MybatisPlush 进行封装了. 但是核心部分还是 Mybatis . MybatisPlus 也就是基于原来进行继续来覆盖核心方法 . 或者增强.\n‍\n# MYSQL远程连接的密码和本地连接的密码不一致 部署完 MySQL 后，只修改了云服务器里面的一个账户密码所引起的\n‍\n查询 mysql 用户\n# 登录mysql mysql -u root -p # 使用mysql数据库 use mysql # 查询mysql用户 select user, host from mysql.user; 能够发现有 4 个用户\nhost 为 % 的表示是远程连接用户，而 localhost 和 127.0.0.1 都是本地用户\n‍\n在 Windows 上通过 SQLyog 远程连接我们的云服务器，就只能通过 % 用户进行连接了，现在我们要做的是修改 % 用户(也远程连接用户) 的 密码即可。\n# 修改密码，改成 mogu2020 GRANT ALL PRIVILEGES ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;IDENTIFIED BY \u0026#39;mogu2020\u0026#39; WITH GRANT OPTION; # 刷新 flush privileges; ‍\n# Servlet 容器、Http 服务器：Servlet、Tomcat、SpringMVC 的关系 参考文章\nhttps://blog.csdn.net/cristianoxm/article/details/121268913\n‍\n# 1. Servlet ‍\n# 概念 ‍\nservlet 就是一个接口；接口就是规定了一些规范，使得一些具有某些共性的类都能实现这个接口，从而都遵循某些规范。有的人往往以为就是 servlet 直接处理客户端的 http 请求，其实并不是这样，servlet 并不会去监听 8080 端口；直接与客户端打交道是“容器”，比如常用的 tomcat。客户端的请求直接打到 tomcat，它监听端口，请求过来后，根据 url 等信息，确定要将请求交给哪个 servlet 去处理，然后调用那个 servlet 的 service 方法，service 方法返回一个 response 对象，tomcat 再把这个 response 返回给客户端。\n简而言之，就是说 Servlet 是一个小型的 JAVA 程序，运行在 Web 服务器中来处理用户的请求，我们实际上使用的各路 Servlet 都需要通过各种方式实现这个接口。\n‍\n# 生命周期 调用 init() 方法初始化 调用 service() 方法来处理客户端的请求 调用 destroy() 方法释放资源，标记自身为可回收 被垃圾回收器回收 ‍\n# 请求处理 ‍\nservlet 的 init 方法和 destroy 方法，一般容器调用这两个方法之间的过程，就叫做 servlet 的生命周期。调用的整个过程就如上图所示。当请求来容器第一次调用某个 servlet 时，需要先初始化 init()，但当某个请求再次打到给 servlet 时，容器会起多个线程同时访问一个 servlet 的 service（）方法。\n由此可以看出，多个客户访问同一 service（）方法，会涉及线程安全的问题。\n如果 service()方法没有访问 Servlet 的成员变量也没有访问全局的资源比如静态变量、文件、数据库连接等，而是只使用了当前线程自己的资源，比如非指向全局资源的临时变量、request 和 response 对象等。该方法本身就是线程安全的，不必进行任何的同步控制。 如果 service()方法访问了 Servlet 的成员变量，但是对该变量的操作是只读操作，该方法本身就是线程安全的，不必进行任何的同步控制。 如果 service()方法访问了 Servlet 的成员变量，并且对该变量的操作既有读又有写，通常需要加上同步控制语句。 如果 service()方法访问了全局的静态变量，如果同一时刻系统中也可能有其它线程访问该静态变量，如果既有读也有写的操作，通常需要加上同步控制语句。 如果 service()方法访问了全局的资源，比如文件、数据库连接等，通常需要加上同步控制语句。 ‍\n# Servlet 如何同时处理多个请求访问？ 单实例多线程: 主要是请求来时，会由线程调度者从线程池李取出来一个线程，来作为响应线程。这个线程可能是已经实例化的，也可能是新创建的。Servlet 容器默认是采用单实例多线程的方式处理多个请求的：\n当 web 服务器启动的时候（或客户端发送请求到服务器时），Servlet 就被加载并实例化(只存在一个 Servlet 实例)； 容器初始化化 Servlet 主要就是读取配置文件（例如 tomcat,可以通过 servlet.xml 的设置线程池中线程数目，初始化线程池通过 web.xml,初始化每个参数值等等。 当请求到达时，Servlet 容器通过调度线程(Dispatchaer Thread) 调度它管理下线程池中等待执行的线程（Worker Thread）给请求者； 线程执行 Servlet 的 service 方法； 请求结束，放回线程池，等待被调用； （注意：避免使用实例变量（成员变量），因为如果存在成员变量，可能发生多线程同时访问该资源时，都来操作它，照成数据的不一致，因此产生线程安全问题） 以上方法主要优点如下\n第一：Servlet 单实例，减少了产生 servlet 的开销； 第二：通过线程池来响应多个请求，提高了请求的响应时间； 第三：Servlet 容器并不关心到达的 Servlet 请求访问的是否是同一个 Servlet 还是另一个 Servlet，直接分配给它一个新的线程；如果是同一个 Servlet 的多个请求，那么 Servlet 的 service 方法将在多线程中并发的执行； 第四：每一个请求由 ServletRequest 对象来接受请求，由 ServletResponse 对象来响应该请求； ‍\n# 2. Tomcat 尽管 tomcat 非常灵活而强大，可以作为 web 应用服务器，启动端口，使用 Socket 进行网络通信实现 Web 服务器，通过多线程的方式提供请求并发处理能力。 但是 tomcat 首先是一个 Servlet 容器,Servlet 容器可以对 Servlet 进行管理，控制其生命周期。使其可以专注于自己应该做的事情，不需要考虑端口啊多线程啊 socket 之类的东西，也使得 Servlet 在各种环境下具有适应性。一个基本的流程：tomcat 接收请求，找到合适的 Servlet 来处理请求，如果该 Servlet 没加载，就顺便编译加载到 JVM,如果加载了，就调 init 方法初始化，调 Service 方法处理 request 并返回 responser，观测 Servlet 状态变化，在结束时调用 destory 方法。 ‍\n# 3. SpringMVC 任何 Spring Web 的 entry point，都是 servlet。\nspring 的核心就是通过依赖注入、面向切面编程 aop、和模版技术，解耦业务与系统服务，消除重复代码。借助 aop，可以将遍布应用的关注点（如事物和安全）从它们的应用对象中解耦出来。\n‍\n# 4. 三者关系 Tomcat 和 jettey 类似，都是 HTTP 服务器和 Servlet 容器，负责给类似 Spring 这种 servlet 提供一个运行的环境，其中：Http 服务器与 Servlet 容器的功能界限是：可以把 HTTP 服务器想象成前台的接待，负责网络通信和解析请求，Servlet 容器是业务部门，负责处理业务请求。 Tomcat 和 Servlet 作为 Http 服务器和 Servlet 容器的结合，可以接受网络 http 请求解析为 Servlet 规范的请求对象和响应对象。比如，HttpServletRequest 对象是 Tomcat 提供的，Servlet 是规范，Tomcat 是实现规范的 Servlet 容器，SpringMVC 是处理 Servlet 请求的应用，其中 DispatcherServlet 实现了 Servlet 接口，Tomcat 负责加载和调用 DispatcherServlet。同时，DispatcherServlet 有自己的容器（SpringMVC）容器，这个容器负责管理 SpringMVC 相关的 bean，比如 Controler 和 ViewResolver 等。同时，Spring 中还有其他的 Bean 比如 Service 和 DAO 等，这些由全局的 Spring IOC 容器管理，因此，Spring 有两个 IOC 容器。 JavaEE 中如果只是使用 spring(不包含 springmvc)，那么是 tomcat 容器解析 xml 文件，通过反射实例化对应的类，根据这些 servlet 规范实现类，触发对应的代码处理逻辑，这个时候 tomcat 负责 http 报文的解析和 servlet 调度的工作。 如果使用 spring mvc，那么 tomcat 只是解析 http 报文，然后将其转发给 dispatchsetvlet，然后由 springmvc 根据其配置，实例对应的类，执行对应的逻辑，然后返回结果给 dispatchservlet，最后由它转发给 tomcat,由 tomcat 负责构建 http 报文数据。 ‍\n# Web 服务器的实现方案 实现 web 服务有很多种方案。为了能够模块化每一个功能，将整个 web 服务器分为一下三个部分。大致分为一下三个步骤：\nHttp 服务器：监听端口、解析 Http 协议的数据包，将处理后的数据包转换成 Http 格式的数据包返回给操作系统。提供并发处理请求的能力，这种并发能力可以基于多种不同的技术实现（多线程、异步非阻塞），但都必须遵循标准。 服务路由映射：将解析后的数据包转换为 Java 类型的请求，通过 Url Mapping 到指定的业务处理器上。 业务逻辑处理：根据请求的具体内容，处理业务需求，返回处理结果。 其中典型的实现方案包括一下几种：\nServlet with JavaEE。基于 Servlet 标准提供 Web 服务，其主要实现包括原生的 Servlet 服务器。Tomcat、Jetty 等 Http 服务器和 Servlet 容器实现，客户实现的 Servlet 中实现了业务逻辑处理。\nTomcat 实现了 Http 服务器 Tomcat 实现了 Servlet 容器，在 Servlet 容器中实现了服务路由映射。 在不同 Servlet 中实现了业务逻辑处理。 Servlet with SpringMVC 中。和 SpringMVC 通过封装 Servlet 实现的 Web 服务器，+SpringMVC 提供的服务路由映射和业务逻辑处理能力\nTomcat 实现了 Http 服务器 Tomcat 实现了 Servlet 容器，将所有请求/**映射到同一个 Spring 的 DispatcherServlet 上。 SpringMVC 实现了服务路由映射（通过内置的服务路由映射机制路由到具体的业务代码）和 Servlet 处理业务需求。 WebFlux With Netty。底层是 Netty，通过异步非阻塞的方式实现的 web 服务器。异步非阻塞不是指在调用链上的某个节点，而是所有节点都是异步非阻塞的。\nNetty 实现了 Http 服务器 SpringMVC 实现了服务路由映射 用户自己实现了业务逻辑处理 Jax-RS with Resteasy/Jessy。底层也是 Netty，通过多线程阻塞的方式实现 web 服务器。\nNetty 实现了 Http 服务器 Jax-RS 实现了服务路由映射和过滤器的标准、Resteasy 提供了具体实现。 用户自己实现了业务逻辑处理。 ‍\n# 静态方法和非静态方法评判 ‍\n静态方法和非静态方法，他们都是在第一次加载后就常驻内存，所以方法本身在内存里，没有什么区别 在内存中的区别是，非静态方法在创建实例对象时，因为属性的值对于每个对象都各不相同，因此在 new 一个实例时，会把这个实例属性在 GC Heap 里拷贝一份，同时这个 new 出来的对象放在堆栈上，堆栈指针指向了刚才拷贝的那一份实例的内存地址上。而静态方法则不需要 ‍\n为什么要有非静态方法？\n‍\n早期的结构化编程，几乎所有的方法都是“静态方法”，引入实例化方法概念是面向对象概念出现以后的事情了，区分静态方法和实例化方法不能单单从性能上去理解，创建 c++,java,c#这样面向对象语言的大师引入实例化方法一定不是要解决什么性能、内存的问题，而是为了让开发更加模式化、面向对象化。这样说的话，静态方法和实例化方式的区分是为了解决模式的问题。\n接下来继续思考，如果我们全部用静态方法，不用非静态方法，不是一样能实现功能吗？是的，没错，但是你的代码是基于对象，而不是面向对象的，因为面向对象的继承和多态，都是非静态方法。\n第二个原因是为什么不建议都用静态方法，我们如果多线程的情况下，如果静态方法使用了一个静态字段，这个静态字段可以会被多个线程修改，因此说如果在静态方法里使用了静态变量，这就会有线程安全问题，当然了，就算不是多线程，因为静态字段只有一份，同样会有被其他地方修改的问题。\n‍\n从这三点我们得出的结论如下：\n‍\n一、 什么时候用静态方法，什么时候使用非静态方法？\n既然静态方法和实例化方式的区分是为了解决模式的问题，如果我们考虑不需要继承和多态的时候，就可以使用静态方法，但就算不考虑继承和多态，就一概使用静态方法也不是好的编程思想。\n从另一个角度考虑，如果一个方法和他所在类的实例对象无关，那么它就应该是静态的，否则就应该是非静态。因此像工具类，一般都是静态的。\n‍\n二、 为什么使用单例模式而不用静态方法？\n‍\n从面向对象的角度讲：\n虽然都能实现目的，但是他们一个是基于对象，一个是面向对象的，就像我们不面相对象也能解决问题一样，面相对象的代码提供一个更好的编程思想。\n如果一个方法和他所在类的实例对象无关，那么它就应该是静态的，反之他就应该是非静态的。如果我们确实应该使用非静态的方法，但是在创建类时又确实只需要维护一份实例时，就需要用单例模式了。\n比如说我们在系统运行时候，就需要加载一些配置和属性，这些配置和属性是一定存在了，又是公共的，同时需要在整个生命周期中都存在，所以只需要一份就行，这个时候如果需要我再需要的时候 new 一个，再给他分配值，显然是浪费内存并且再赋值没什么意义，所以这个时候我们就需要单例模式或静态方法去维持一份且仅这一份拷贝，但此时这些配置和属性又是通过面向对象的编码方式得到的，我们就应该使用单例模式，或者不是面向对象的，但他本身的属性应该是面对对象的，我们使用静态方法虽然能同样解决问题，但是最好的解决方案也应该是使用单例模式。\n‍\n从功能上讲：单例模式可以控制单例数量；可以进行有意义的派生；对实例的创建有更自由的控制\n我们在工程中有时需要维护一份信息，比如系统运行时加载的一些配置属性，这些配置属性必须在应用整个生命周期中一直存在，而且是公共的，所以只需要一份就可以了。这时候我们就会考虑使用单例或者静态方法去维护这一份数据，但此时这一份数据又是通过面向对象的方式获取的我们就会使用单例。\n首先静态方法是基于类的，单例是基于对象的。如果解决模式是基于对象的就是用单例，否则使用静态方法。比如需要继承类，实现接口，需要延迟初始化，需要重写父类等要使用单例，第二，静态方法是面向过程的，单例是面向对象的。第三，静态属性变量不会被 GC 清除，所以单例的对象不会被 GC 清除，静态方法中产生的对象会随着静态方法执行完毕而被释放。\n从时空角度分析问题，空间上模块的划分，时间上生命周期的管理。生命周期：进程生命周期（伴随着程序的启动和退出）、请求生命周期（一次请求的开始和返回）、功能生命周期（一个功能的进入和退出）。一个框架最简单的就是实现这个神功周期。（库和框架的区别就在这里，使用库来实现自己的功能逻辑，框架则负责接管自己的功能逻辑。也就是业务功能 决定 类库的生命周期，框架决定了业务功能的生命周期这种。)\n习惯用法是不需要依赖于其它类或资源时，用静态方法，这时就是一个面向过程的函数而已；如果需要依赖其它类的实例，或者需要某些资源时，用单例。 需要继承、重载、多态、设计模式（面相接口编程）、依赖设计好的框架时，使用单例模式。通过继承框架类和实现框架的接口能够快速接入框架提供的功能。 需要方法库是，使用静态方法。（库和框架的区别就在这里，使用库来实现自己的功能逻辑，框架则负责接管自己的功能逻辑。也就是业务功能 决定 类库的生命周期，框架决定了业务功能的生命周期这种。) ‍ ‍\n# Java 协变 \u0026amp; 逆变拾遗, 标记 Java 协变返回类型是指在子类中重写一个方法时，该方法的返回类型可以是父类中该方法返回类型的子类。这意味着子类可以返回更具体的类型，而无需强制转换为父类类型。\n例如，假设有一个父类 Animal 和一个子类 Dog，它们都有一个返回类型为 Animal 的方法 getAnimal。在 Dog 类中重写该方法时，可以将返回类型更改为 Dog，因为 Dog 是 Animal 的子类。这样一来，当调用 Dog 的 getAnimal 方法时，会返回一个 Dog 对象而不是 Animal 对象。\n导出类（子类）覆盖（即重写）基类（父类）方法时，返回的类型可以是基类方法返回类型的子类。\n‍\n# 内省 ‍\n在计算机科学中，内省是指计算机程序在运行时（Run time）检查对象（Object）类型的一种能力，通常也可以称作运行时类型检查。\n‍\n不应该将内省和反射混淆。相对于内省，反射更进一步，是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。\n内省(Introspector)是 Java 语言对 Bean 类属性、事件的一种缺省处理方法。例如 A 类中有属性 name，那么我们可以通过 getName 和 setName 来得到当前值或设置新的值。通过 getName/setName 来访问 name 属性，这就是默认规则。\n‍\nhttps://blog.csdn.net/weixin_43726137/article/details/122924821\n‍\n‍\n# 代码防腐技巧 博主\n‍\n如果没有做好业务逻辑拆分，可能在项目晚期造成以下三种问题：\n拆了微服务之后做一个需求要拉很多人，代码写进来了就再也删不掉了 要么放任自流，1 个 App 里有 4 种日期选择方式。要么用力过猛，抽象出来的营销接口动辄几百个参数 线上出了问题很难定位到谁引起的，本地做不了任何有意义的测试，反馈周期特别长 为何随机选择了这三种问题并归纳为业务逻辑拆分问题呢? 因为我认为以上三种问题都是由同一个不易变化的本质约束所造成。这个本质约束就是人类的感知与沟通速度是很慢的。 所谓业务架构，其实质就是想尽一切办法减少沟通。只有沟通少，效率才会高，质量才会好。就是这么简单的一件事情。\n‍\n‍\n# 代码腐化 没有哪份代码一开始是不想好好写的。大家在开始落笔之前都知道会出现上述三种症状，并且都自认为做好了设计去避免这些问题。然而往往事情的发展不是如自己所想的那样。我们可能会把代码腐化归咎于自己不够努力，或者需求太多了做得太匆忙。如果当初更用心一点就不会这样。是吗？\n如果你带了一个新人，他可能会问你“我这个需求的代码应该写在哪个 Git 仓库里？”。然后你会根据你的直觉做出一个判断。这种高度依赖于某个人“我觉得”的决策模式是长久不了的。只要摆放代码严重依赖于某个人的判断，腐化就是无法阻挡的趋势。那有没有什么办法可以像“防腐剂”那样，在一开始的时候放进去，然后就可以保持很长时间的“新鲜”呢？\n实现方案也不复杂，代码分成两部分。可以随便乱写的，和不能随便乱写的，这两部分。不知道“组合代替继承”的小朋友，只能在可以随便乱写的那部分里发挥。如果大部分代码量都在“可以随便乱写”的那部分里，那么只要很少的人就可以看住“不可随便乱写”的那部分。\n说简单也不简单，怎么做到呢？\n‍\n# 你说的东西可以落地吗? 大部分人的日常工作都是维护一个已有的项目，没有几个人能够参与到 Greenfield 项目的初始设计阶段。这也是大部分读者所懊恼的地方，“我读你的东西有什么用，我这项目就已经烂成了这个样子了，我也改不了”。我希望能够出一些可度量的指标。这样对于现有的项目，我们可以拿这些指标去度量这些问题有多严重。 当下次别人问你微服务为什么这么拆，而不是那么拆的时候，你可以给出令人信服的理由，而不是“我觉得”。\n我不是销售像 Angular 那样可以直接 git clone 一份的代码框架给你。我想分享的是一套可以适用于任何语言和框架的分解业务逻辑的套路。从《Clean Architecture》和《Domain Driven Design》你应该已经学到了很多了。如果仍然不会拆，那么可以再读读《业务逻辑拆分模式》试试。\n‍\n# 拆分 拆分是任意的。随意给一个标准，我们都可以把任何东西按照这个标准给拆了。以下是我给的拆分角度：\n业务逻辑可以被拆分成：\n编辑时：拆分成文件、文件夹、Git 仓库 运行时：拆分成进程 ‍\n# 文件、文件夹、Git 仓库 这种拆分标准屏蔽了不同编程语言和编程框架的影响，我们不用争论什么是 Class，什么是 Module，什么是 Package。\n文件：大部分编程语言都使用了文本文件。只有非常少量的编程语言有自己的 Projectional Editor，这些语言的开发者面对的编辑界面和文件上存储的内容需要通过 IDE 进行映射。 文件夹：绝大部分开发者使用的操作系统，对于每一个文件都有所存放的文件夹的概念。一个文件从属于唯一的一个文件夹。部分操作系统在从属关系之外，还有链接，把两个文件建立关联。文件夹与文件夹呈树状组织。 Git 仓库：绝大部分公司会把代码拆分成多个 Git 仓库。Google 等公司没有采用多 Git 仓库，而是全公司所有人在一个巨型的 monorepo 上工作。大部分公司切分 Git 仓库的主要目的是控制访问和版本。不同的开发者控制不同的 Git 仓库，从这个仓库下的代码产出整个仓库意义下的版本。 业务逻辑在编辑时需要拆分成文件、文件夹、以及 Git 仓库。那么从 Autonomy，Consistency，Feedback 这三个角度，如何评价拆分出来的结果，又有哪些拆分模式呢?\n‍\n# 进程 这种拆分标准屏蔽了不同运行环境的影响，无论是 iOS 设备上的 App，还是 apple.com 这个域名背后的服务器，软件总是运行在进程里的。\n手机桌面上的 App 图标：从用户的角度来说，两个图标就是两个 App，是两个不同的东西。 网站的域名：对于用户的角度来说，两个域名就是两个网站。 网络游戏：对于用户的角度来说，我们一起刷的副本，那就是同一个游戏。 运行时的表面现象太多了。我们可以随意给一个标准，比如两个界面有什么本质不同呢? 我们可以说不同 URL 的界面是两个“页面”。但是也完全可以 URL 不变，使得界面处于完全不同的两个状态。这样的情况下，这算两个页面还是同一个页面呢? 所以避免拆分出来的东西见仁见智，我们只能选择不那么用户可见，但是又相对稳定的东西。想来想去，也就是进程是歧义比较少的东西。\n‍\n# 业务逻辑拆分模式是关于什么的 如何拆分文件，文件夹，Git 仓库：目标是“代码防腐” 如何拆分进程：目标是“只负责自己写的代码” 如何分层：这个其实也是分 Git 仓库，目标是“突出大逻辑，隐藏小细节” 相比堆砌 MicroService，Domain Layer 这样的辞藻，更能穿透表面现象，看到事物的本质。到头来，总归是文件，文件夹，Git 仓库和进程这些东西。\n‍\n余下见仓库\n‍\n# 文化 ‍\n# 平台 自媒体时代用影响力赢取惊人财富 - 迈克尔哈耶特 记录了一些内容\n‍\n# 创作电梯演讲 电梯演讲一词产生于一种理念，就是你能够在搭乘电梯上几层楼的时间里，进行一场简短而又令人印象深刻的演说以描述自己的产品，而这一切需要在大约 30 秒到 2 分钟内完成。\n随着网络的发达，过去数年颇为重要的电梯演讲从有形的电梯转入无形的网上空间，更显示出其独特效果，因为网上你要抓住一位潜在客户的注意力，所需时间比电梯更短。大多数人能够集中注意力——短期刺激反应——的时间段非常短暂，完全不走神的时间最多不超过 8 秒\n‍\n# 演讲的艺术 （美）史迪芬·E·卢卡斯 小阅读笔记 ‍\n形象化的力量: 演讲人主动地去想象一次成功演讲的生动画面\n‍\n大多数紧张都是看不出来的: 等待上场演讲时，悄悄地绷紧和放松大腿肌肉，或者两手用力握紧再放松。这有助于舒缓紧张情绪\n‍\n讲解了许多演讲中用到的要素, 将演讲的各个组成部分拆解开了, 信息 - 反馈 - 渠道 - 干扰 - 主体个体等, 提供了思考的框架\n‍\n例如可以这么分析\n场合指的是演讲的时间和地点。对话总是在某种场合当中发生的。有时候，说话的场合很有利，比如在烛光晚宴的餐桌上求婚；有时候，场合可能不利于你说话，比如你想盖过吼叫的立体声音乐说一番求爱的话。记住，当你要向某人说一番动情的话时，必须要等到合适的场合才说。\n公共演讲同样对场合很敏感。有些时候——葬礼、教堂举行的仪式、毕业典礼——都要求有某种形式的正式演讲。演讲的环境也很重要。一次演讲在户外还是在室内进行，是在小房间里还是在体育馆里进行，是对一群人还是对少数几位人士讲，这些都有很大区别。可以这样理解，当你调整方案，使一次演讲更适应当时的场合时，你不过是在较大的规模上进行日常对话罢了。\n十分生动的例子, 让我想到了理科生测量求爱时候的适合指数的情境(55 分贝 - 昏暗光线 - 30cm 距离\u0026hellip;)\n‍\n之前小学时候看到的一个科学证明, 现在再抄一下\n注意力不集中 - 空余的“大脑时间\u0026quot;, 大脑的处理速度远快于对面输入的速度, 这部分冗余带宽并不意味着倾听会变得更容易\n它产生的效果恰恰相反。因为我们可以注意到演讲者的话，但同时还有很多空余的“大脑时间”，我们很想中断倾听的过程而去思考别的一些事情。思考别的一些事情而放弃倾听\n‍\n有时候我们听得又太费力了。我们变成了人造海绵，把演讲人所说的每一个字都当作同等重要似的一股脑吸收进去。我们努力记住所有的人名、所有的日期和所有的地点。在这个过程当中，我们会错失演讲中的要点，因为我们将这个要点淹没在汪洋大海一般的细节里面去了。更糟糕的是，我们最后甚至还有可能把事实弄错。\n有效率的倾听者通常都是集中精力于观点和证据，而不是试图记住演讲者所说的所有东西。\n‍\n做个积极的倾听者\n现代生活的诸多方面其实是在鼓励我们消极地倾听。我们一边学习一边听 CD，我们一边从这个房间晃到另一个房间一边听电视节目。父母在敲定晚餐吃什么的时候听他们的孩子的意见；学生们一边做着填字游戏一边听课；电视记者一边在听众席到处乱转寻找下一个采访目标，一边听着政客们的发言。\n‍\n搁置判断\n除非只听和我们的思想一模一样的人讲话，否则，我们就一定会听到与自己意见相左的内容。如果出现这样的情形，我们自然的倾向就是在心里与演讲人发生争论，或者根本不再听他把话说完。但是，这两种反应都是不公平的，对于演讲人和自己都是不公平的。在这两种情况下，我们都失去了一个机会，不能掌握别人的观点，也不能被别人说服。\n你应该听人们说下去，最后才能作出你自己的判断\n‍\n三条专心听讲建议\n‍\n听要点\n‍\n听论据\n关于一个演讲人的论据，有四个问题必须问：\n准确吗？\n是从客观来源得到的资料吗？\n跟演讲人所说的话有关联吗？\n足够支持演讲人的观点吗？\n‍\n听技巧\n■ 分析介绍部分：演讲人用什么方法引起别人的注意，如何使演讲和\n听众发生关系，如何建立可信度与善意？\n■ 评估演讲的组织方法：是不是很清晰，很容易跟上？你能挑出演讲\n人的要点吗？演讲人从一个要点转向另一个要点的时候，你能跟上他\n吗？\n■ 研究演讲人所用的语言：是否准确、清晰、鲜明、合适？演讲人是\n否针对听众和当时的具体情况做了合适的调整？\n■ 诊断演讲人的演讲方式：是否流畅、有强烈的影响力、有说服力？\n‍\n‍\n即兴演讲\n大多数专家都建议采用临场发挥的即兴演讲，因为即兴演讲把谈话的自发性和热情综合在仔细的演讲准备中。临场发挥的演讲的目的，是计划好要点和论证材料，但不是把演讲稿逐字逐句背诵下来。\n可以用一些特殊的小物品来当提示物\n总体来说，不要让手势或身体动作使听众分心。应该尽一切努力避免紧张的动作\n说话期间，应该尽量多看同学，即兴演讲最重要的表现之一，是要与听众保持视线接触\n‍\n演讲准备：起始部分\n总体目标确定\n中心思想确定\n‍\n没人指望你仓促发表一次“完美”演讲。如果你正在参加会议或讨论，应该注意其他演讲人都说了些什么，最好做一个简要的记录，你就能自然而然地整理出自己要说的话。这样，轮到你的时候就不至于无话可说。\n针对前面的演讲发表自己的意见时，可以采用这样四个简单的步骤：首先，表明你是否接受上述的观点；其次，说明你想表达的观点；第三，用合适的统计数据、案例或证词来支持你的观点；第四，总结自己的观点。这个“四步法”可以帮助你迅速而清晰地组织好自己的思想\n‍\n听众\n切莉的经验表明，你需要掌握听众已经知道、相信和关心的东西。索尔·阿林斯基是著名的社区工作者，他说：“人们只能够以自己的经验来理解事物。”这\n说明，要和别人交流，“你必须深入了解他们的经验”。\n也许，你不能完全掌握他们的经验，但是，你可以掌握听众尽可能多的情况，以便确定自己应该做些什么，使自己的思想更明确和有意义。\n‍\n听众情境分析\n‍\n规模\n不管你演讲的听众规模有多大，心中一定要记住一个基本的原则：听众规模越大，你演讲的方式就要越正规。听众规模会对你演讲方式产生极大的影响，但是，它也有可能会影响到你的语言、诉求的选择，以及可视辅助物的使用。\n‍\n环境\n‍\n对演讲话题的态度, 例如兴趣, 知识储备\n‍\n适应听众 - 前中后\n如果听众的身体前倾，带着很大的兴趣望着你，边听边点头，说明演讲进展不错。假如你发现他们在皱眉头，做出困惑的表情，那你可能需要再次说明自己的观点\n‍\n下面有许多内容是高中语文知识, 不记录\n‍\n乐子\n下面这个故事很有名，说明了不能清晰地表达思想会惹出多大的麻烦。\n一位管道工写信给当地的政府机构，问用盐酸冲洗下水道会不会有任何危险。\n这个机构回函说：盐酸的功效无可争议，但其腐蚀效果与金属耐久性不可兼容。\n管道工谢谢政府同意使用盐酸。\n这家机构马上去函说：我们无法承担因为盐酸产生的有毒及有害残余物而造成的责任，建议您采用替换程序。\n管道工再次感谢这个部门同意使用盐酸。\n最后，这个部门意识到会有数百根下水管道被毁掉而惊慌失措，不得不请教一位科学家。\n这位科学家写道：不能用盐酸。它会在管道上咬出洞来！\n请记住，人和人差别很大。对某人来说意义重大的东西，对另外一个人来说可能就是一堆废话。你无法假设你了解清楚的东西，对你的听众也就一定是清楚的。演讲中尤其如此。听众和读者不一样，他们无法查字典或再读前面的内容来发现一些词的确切含义。演讲中的用词必须非常清楚，不能有产生误解的可能。\n选择通俗的词汇、选择具体而不是抽象的词汇可以帮助你做到这一点。\n‍\n‍\n为答听众问做好准备\n‍\n不同演讲类型的不同处理, 告知型, 劝说型, 不细细展开\n‍\n‍\n# 演讲之禅：一位技术演讲家的自白-斯科特博克顿 小阅读笔记 ‍\n“演讲结束后，演讲大师常常会发现自己的演讲有 4 个版本：一个是他们所发表的，一个是他们准备要讲的，一个是报纸报道的，一个是讲完之后反思的。”\n‍\n我们的大脑认为以下 4 点会危及生命：\n·独自站立\n·在没有地方躲避的空旷地域\n·手无寸铁\n·在一群人的注视下\n‍\n对于所有的生物而言，当以上 4 种情况并存时，的确会造成威胁，因为这意味着你被袭击或被吃掉的可能性极大。许多猎手都是结对打猎的，他们最早的猎物都是独自处于一块毫无遮蔽物的地方（如舞台），并且手无寸铁。我们的祖先在历经这些威胁后生存下来，同时也将这种恐惧遗传给我们。尽管我在过去的 15 年中教过书，开过工厂，做过演讲，但当我站在讲台上时，无论我表现得如何自然，其实我的身心都会在开讲之前，有时还会在演讲的过程中感到恐惧。大脑的这种固定思维模式早就已经有了，比演讲甚至比说话的历史都要早上千百万年。当人们遇到这些险境时，大脑的固定模式会让我们想起最坏的情况下的应对方法，这会使我们难以消除恐惧感。我们对此毫无办法，至少不能完全避免恐惧。这种思维模式根深蒂固地存在于我们的大脑中，并且和许多其他的重要功能一样，几乎完全无法控制。\n‍\n演讲前努力保持镇定\n·提前到达演讲现场，以防匆忙上阵。\n·在开始之前测试技术和音响效果。\n·绕讲台走一圈，这样你的身体会在室内感觉安全。\n·在观众席上亲身感受一下，了解从观众的角度能看到什么。\n·早早吃点东西以防饥饿，但不要在即将开讲之前吃东西。\n在开始之前和听众聊聊天（如果方便的话），这样你就不会感觉是在给陌生人演讲（朋友会让你感到安全）。\n‍\n其实，我们已经很擅长演讲了——常人平均每天说 1.5 万个字。除非你是在单独的禁闭室里读书，否则你的大多数话都是对别人说的。如果你交际广泛，还在星期五的晚上出去应酬，那你可能会同时和两三个甚至五个人说话。祝贺你，你已经是一个有经验的成功的演讲家了。你同自己的同事、家人和朋友说话。使用邮件和网络时，你所写的东西每天可能会被成千上万人阅读。上面列出的那些令人害怕的事情也有可能出现在这些情况下。\n我一天说几句话?\n吃饭的时候: \u0026ldquo;在这吃. 这个, 还有这个, 没了\u0026rdquo;, 一天 2 次, 除此之外没有说过其他话, 连续 5 天, 总共不超过 60 个字.\n因此我通过在家人群里吹逼保证一天的演讲量\n‍\n坐在听众席上时，你能轻而易举地看到讲台上的我，但我却什么都看不到。屋子里所有的灯光都聚集在我脸上。无论演讲场地的条件恶劣与否，观众都能清清楚楚地看到演讲者，而演讲者却处于孤身奋战的境地。杰出演讲家的著名演讲图片都像是在观众席的最佳座位上拍摄到的。舞台上除了演讲者之外，没有其他人，即使有，他们也不会到场上移动，以免影响观众。如果在奥巴马总统演讲时，他身后有一群人在吃三明治或者玩猜字游戏，那么台下的观众一定会很生气。然而，当我看向观众席时，很多人都让我心烦意乱。我能看到和听到那些迟到早退的人开门关门的声音，看到那些一心二用者在摆弄笔记本电脑，还能看到观众席后排的摄影师及舞台工作人员在移动器械、拍照、互相打趣。当然，除了我之外，也没有人能看到。最糟糕的是，有时我简直倒霉透顶了，我的正前方唯一能看到的只有会议厅的吊灯，它的光芒让人晕眩。这种吊灯往往是由灰色金属制成的，表面上还涂有一层零碎的金色图案。它们挂在观众席的上方，很少有观众会注意到，但是台上的演讲者的目光总是很自然地停在那里。一个高级演讲场所的天花板上不会有这些让人分神的东西，而在条件较差的场所里就会挂有这种难看的摆设。\n是的, 这种感觉我经常体会过, 台下时候很轻松, 台上时候很疲惫\n‍\n无论你做何种演讲，人们之所以来听的原因只有几个。当你准备演讲内容的时候，应该以满足听众以下这些需求为出发点：\n1.希望能学到知识。\n2.希望受到激励。\n3.希望获得快乐。\n4.希望你能满足他们的某种需要。\n5.希望结识同样对某个主题感兴趣的人。\n6.希望能与他人有共同的积极经历。\n7.被他人所迫，如老板、父母、老师或者配偶。\n8.被铐在座位上，好几天都没有离开过演讲厅。\n只有蠢人才会讲了 1 个小时还满足不了任何需求\n‍\n在每场电影、音乐会和演讲开始之前，观众都会有一段时间很安静。这时，所有的谈话声和杂音都会停止，所有的人几乎同时在期待节目的开始。这段时间称为观众寂静期，这也是观众自发的行为。200 位有着不同想法和观点的人在这一刻成为了一个整体，他们的注意力都集中到了大厅的前方。观众将控制权交给了一个他们尚不知道的人，这未免有点奇怪。在这之前，他们从未听过这场演讲或演出。这是一种尊敬和期待，也是一件令人惊叹的事情。世界上能让一屋子人自己安静下来的事情不多，而演出开始之前的期待便是其中之一。\n‍\n我经常在大学和企业做演讲，听众都是比我聪明得多的人，他们比我更有创意，更幽默，但是我依然能讲得很成功，因为我给了他们一个清晰明快的节奏。\n演讲前，我会说：“我演讲的时间是 30 分钟，要讲的内容一共有 5 条，每一条我将花 5 分钟来讲解，剩下的时间欢迎你们提问。”说这些话花费了我大概 10 秒钟的时间，但是我却能因此吸引他们的注意力，告诉了他们我的计划，这样他们就能知晓演讲的节奏。无论在何时，当他们开了小差，如幻想夏威夷海滩上的性感美女或帅哥，然后突然回到现实中时，他们还能依据我之前说的节奏来跟上步伐，他们也许会想：“哦，我完全没听讲，他现在讲到哪里了？哦，讲到第三条了，我知道了。”即使是最专心的听众也会有走神的时候，我要做的就是当他回到现实后，让他很容易就能重新跟上节奏。\n一旦所有的听众都在关注你时，你就要把握住机会，简单介绍本次演讲的程序，这也能为你加分。如果过程清晰，而你解释的用时又不多，那么听众根本就不在乎其余的细节。\n‍\n一些演讲者真正需要的反馈信息：\n·和其他人的演讲比起来，我的演讲如何？\n·为了提高演讲水平，我需要做出哪些改进？\n·除了我回答的那些问题以外，你还希望我回答哪些问题？\n·我在演讲中给你带来了哪些烦恼？\n‍\n‍\n# Stand by LGBT 我支持所谓的 LGBT 人群合理, 正当而合理的表达自己的权利. 当然我不提倡不鼓励.\nPurple - 知乎 (zhihu.com) 这个是今天看到的清华社团, 里面有许多这样的帖子.\n原因不解释了\n‍\n作者：五道口 purple\n链接：https://zhuanlan.zhihu.com/p/69486720\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n主流规范所规定的行为方式和交往方式有明确的指向：婚姻、生育和抚养后代。与之相关的制度同规范之间存在着千丝万缕的联系。对于初识规范的儿童来说，他们或许只是亦步亦趋地模仿成人世界的暴力模式。而如果探究施加这类暴力的成年人的逻辑，那么多半会到达这样一个根源：这样的人不会结婚生子，即便是结婚生子也做不了好丈夫/好妻子/好家长，那当然就是反常的，他们过得不如意也是事出有因/咎由自取，别人施加暴力也理所应当。 当然，他们过得不如意的确是事出有因，但却决不是咎由自取；恰恰相反，他们过得不如意的原因，乃是制度不会给予他们以相应的生存空间。例如，独自一人生活从来都相当艰难，但是同性伴侣之间的结合（这首先是一种社会契约！）却游荡在合法化的边缘，这种矛盾对于大部分同性恋者来说都是难以承受的。为什么社会不能为不结婚的人提供足够的福利保障呢？为什么不生育的结合会是一种活该被施加暴力的罪过呢？再例如，生养后代被视为女性的天职，但是在生存压力越来越大的时代里，有越来越多的女性会选择放弃这一「天职」。为什么社会不接过这一「天职」呢？固然只有女性才能生育和哺乳，但是有任何证据显示抚养也是只有女人才能做的事情吗？退一步说，为什么抚养和教育的责任都推到小家庭身上呢（尤其是在这个义务教育日益退化的时代）？\n‍\n我们可以概括一下这些现象：与婚姻、生育和抚养有关的制度，正是基于性别规范的各种暴力的「沉默的背景音」。 规范不仅仅是规定，它更加涉及到规范背后的制度，以及制度所依附的诸多权力关系。如果想要研究规范的运作，就必须要透视其背后的所有这些东西。反规范的行为和针对此类行为的暴力，便给了我们一个透视规范及其背景的窗口。\n‍\nSO, 这里强调的是, 正是当下父权家长制独裁政体的背景会发生这样的事? 确实, 例如那些神圣的保守国家, 塔利班那群家伙. 我们的开放程度算是高多了, 但我认为确实在这方面着实是洼地. 就我看到的封建愚昧的落后世界来看.\n‍\n这就是酷儿理论的基本思维方式。它是一种批判理论（critical theory）。我们之所以要研究规范的产生和运作机制，正是因为我们注意到了现实中存在的这诸多的暴力，并力图改变这种现状，而理清暴力如何运作正是其第一步。 这就要求我们首先要批判地检视那些习以为常的性别规范，分析与之相关的话语，形成另外一套能够与之抗衡的话语，并以此来动员那些受到压迫的性别。\n‍\n‍\n当然可以将此称为情欲的解放，但这种解放并不彻底。仅有自由恋爱不能触动问题的根基。现存的资本主义制度不会采用社会化的方式来保证人类的繁衍和教育，于是都将这个责任推给了家庭，包括生育、抚养、教育（学校当然执行教育职能，但是但凡上过学的人都能感觉到：原生家庭对一个人的塑造作用决不是学校教育可以抵消的），因为社会化的抚养没有短期利益可图。即便政府愿意为生育者派发津贴，在大部分情况下，这种津贴也远不足以补偿生育者的付出。如此一来，需要生养才能保证劳动力供给，但社会不承担养育的职能；既然接纳了这个制度，那么人们就要么不得不选择走入婚姻、繁衍后代，并承担繁重的养育责任；要么选择不生育，而接受社会的指责。特别地， “女性=具有女性外生殖器的人=具有生育能力的人”的本质主义界定必须被强化，才能迫使女性走入婚姻。对性少数群体的歧视，就根植于于这种本质主义界定之上。这种意识形态根据生殖器的形态来划分人的职能（而这正是利用女性生育能力完成再生产的关键），从而迫使一定的人执行一定的表演仪式，来完成那名为“性别”的社会身份建构，最终都要指向婚姻与繁衍；突破表演仪式的行为不利于维护体系的稳定，所以很容易被污名化。\n‍\n《同》一文信誓旦旦地宣称，同性恋解放运动将导致生育率下降，长此以往将会出现严重的劳动力供给危机。然而，这种归因却是倒果为因。这种逻辑以为，“自由主义”这种意识形态的泛滥就足以解释生育率的下降——然而这不过是某些假共产党一贯的宣传伎俩，仿佛问题全然在于某种舶来的意识形态，而不在于官僚资本主义自身。生育率的下降不是性少数群体解放运动乃至性解放运动的责任，它的根本原因是社会对生育和抚养的补偿已远远不足以补贴生育者的付出。用更笼统的话来概括，它是资本主义剥削的一种体现。这恰恰体现了这种经济制度的难以为继：为了追逐短期利益，这制度迫使大部分人不得不在“被婚姻家庭绑架”或“不生育”两者中作出艰难的抉择，而社会化养育职能的缺失，又导致大部分新出生的孩子无法得到良好的教育，加重本已十分严重的阶级固化现象；长此以往，这将使得劳动力数量和质量严重下降。 至于《同》文中提出的什么“共产主义者要捍卫伦理”，则根本是无稽之谈。这个伦理体系最终服务于哪种制度、哪个阶级？如果不搞清楚，那共产主义者为什么要捍卫这名为道德实为压迫的伦理？\n‍\n总结起来，对待女权和性少数群体解放运动的态度，是试探真假马克思主义的一个标志。持反对态度而自称马克思主义者/共产党的，或者是分析能力不精，或者是心怀叵测（或两者兼有）。 马克思主义为被压迫者说话，但却又不简单停留在“说话”上。它要剖析压迫的原因，并且改造这种现实。被压迫者能否赢得整个世界？谁也没法断言。但有一点是确凿无疑的：在斗争中，他们将失去的只是锁链。\n‍\n怕文章爆炸, cite 了部分内容\n‍\n‍\n# 猪突一词 在谈到当下的形势的时候, 用到了猪突这一词.\n这个词最早来源于中国汉朝。\n据《汉书》记载，王莽曾率领一支由囚犯组成的队伍，名为“猪突豨勇”。日本人翻译成“猪突き勇”。\n是时，关东饥早数年，力子都等党众浸多，更始将军廉丹击益州不能克，征还。更遣复位后大司马护军郭兴、庸部牧李晔击蛮夷若豆等，太傅牺叔士孙喜清洁江湖之益贼。而匈奴寇边甚。莽乃大募天下丁男及死罪囚、吏民奴，名日“猪突豨勇”，以为锐卒。——《汉书·王莽传》\n大概是因为那个“豨”在日语中没有汉字对应，比较尴尬吧，于是就改成了“猛进”\n‍\n「猛進」就是“勇猛前进”的意思，并没有什么特别的出处。\n合起来就是「不怕死向前进攻」的意思。\n然后“突”这个字吧，大家会发现日语中的“突”字其实下面是个“大”而非“犬”字，这是后来才变成这样的。\n其实“突”字也源于汉语，原本它就是上“穴”下“犬”拼起来形成的一个汉字，意思是狗突然从洞里冲出来的样子。\n现在, 若宿舍猪突, 这里的意思就是王莽里面说的\u0026quot;不怕死的队伍, 对我们的大本营进行突进\u0026quot;, 意味着我们的危机.\n# 学习 ‍\n# 厕所里面找屎吃 百度搜不出啥有用信息，现在要根据需要的信息种类去不同的平台搜. 公众号，小红书，微博，购物平台. . .\n百度和知乎都是自己作死，商业化吃相难看导致原有的基本盘也没守住.\n小红书一些攻略是真的细\n比如换乘，有的攻略他能把你从进站到站台多少分钟，等车多少分，下车出站多少分，事无巨细地写出来\n对于坐飞机高铁这类时间卡死需要精细规划的人来说，简直是神. 没有哪个地方的攻略会写得这么详细\n抖音、B 乎、X 、weibo-\u0026gt;看乐子看仍子\n微信公众号-\u0026gt;看新闻\n小红书、下厨房-\u0026gt;生活、美食、旅游\ngoogle 、gpt-\u0026gt;搜正经东西\nbaidu-\u0026gt;搜中文内容甚至都不如 google\n‍\n‍\n# 提问的智慧阅读笔记 Link\n完整版存档本地, 时时当勉励\n‍\n# 目录 声明\n简介\n在提问之前\n当你提问时\n慎选提问的论坛 Stack Overflow 网站和 IRC 论坛 第二步，使用项目邮件列表 使用有意义且描述明确的标题 使问题容易回复 使用清晰、正确、精准且合乎语法的语句 使用易于读取且标准的文件格式发送问题 精确地描述问题并言之有物 话不在多而在精 别动辄声称找到 Bug 低声下气不能代替你的功课 描述问题症状而非你的猜测 按发生时间先后列出问题症状 描述目标而不是过程 别要求使用私人电邮回复 清楚明确地表达你的问题以及需求 询问有关代码的问题时 别把自己家庭作业的问题贴上来 去掉无意义的提问句 即使你很急也不要在标题写​紧急​ 礼多人不怪，而且有时还很有帮助 问题解决后，加个简短的补充说明 如何解读答案\nRTFM 和 STFW：如何知道你已完全搞砸了 如果还是搞不懂 处理无礼的回应 如何避免扮演失败者\n不该问的问题\n好问题与蠢问题\n如果得不到回答\n如何更好地回答问题\n相关资源\n鸣谢\n‍\n‍\n# 简介 在黑客的世界里，你所提技术问题的解答的好坏, 很大程度上取决于你提问的方式与此问题的难度。本指南将教你如何正确地提问以获得你满意的答案。\n黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。\n我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（loser）​ （由于历史原因，我们有时把它拼作 lusers​）\n我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答赢家（winner）​ 的问题。\n‍\n# 在提问之前 ‍\n在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：\n尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到答案。 尝试自己检查或试验以找到答案。 向你身边的强者朋友打听以找到答案。 如果你是程序开发者，请尝试阅读源代码以找到答案。 ‍\n寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西​ 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助\n绝不要自以为够格得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去挣到一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动地从他人处索取知识。\n另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？​、我的这个例子里缺了什么？​ 以及我应该检查什么地方​ 比请把我需要的确切的过程贴出来​ 更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。\n‍\n# 当你提问时 ‍\n慎选提问的论坛\n小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：\n在与主题不合的论坛上贴出你的问题。 在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。 在太多的不同新闻群组上重复转贴同样的问题（cross-post）。 向既非熟人也没有义务解决你问题的人发送私人电邮。 ‍\n别像机关枪似的一次“扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。\n‍\n一个好标题范例是目标 —— 差异​ 式的描述，许多技术支持组织就是这样做的。在目标​ 部分指出是哪一个或哪一组东西有问题，在差异​ 部分则描述与期望的行为不一致的地方。\n蠢问题：救命啊！我的笔记本电脑不能正常显示了！\n聪明问题：X.org 6.8.1 的鼠标指针会变形，某牌显卡 MV1005 芯片组。\n更聪明问题：X.org 6.8.1 的鼠标指针，在某牌显卡 MV1005 芯片组环境下 - 会变形。\n‍\n‍\n‍\n# 使用易于读取且标准的文件格式发送问题 如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：\n使用纯文字而不是 HTML (关闭 HTML 并不难）。 使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。 不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。 但是，对一些特殊的文件不要设置固定宽度（譬如日志文件拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。 在英语论坛中，不要使用Quoted-Printable​ MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的=20​ 符号既难看也分散注意力，甚至有可能破坏内容的语意。 绝对，永远不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。 如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的智能引号​ 功能 （从[选项] \u0026gt; [校订] \u0026gt; [自动校正选项]，勾选掉智能引号​ 单选框），以免在你的邮件中到处散布垃圾字符。 在论坛，勿滥用表情符号​ 和HTML​ 功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码​ 命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。\n‍\n# 精确地描述问题并言之有物 仔细、清楚地描述你的问题或 Bug 的症状。 描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4​、Slackware 9.1​ 等）。 描述在提问前你是怎样去研究和理解这个问题的。 描述在提问前为确定问题而采取的诊断步骤。 描述最近做过什么可能相关的硬件或软件变更。 尽可能地提供一个可以重现这个问题的可控环境​ 的方法。 ‍\n# 别动辄声称找到 Bug ‍\n当你在使用软件中遇到问题，除非你非常、非常的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug​，你应该能提供相应位置的修正或替代文件。\n编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug​ 时，这尤其严重。\n‍\n# 描述问题症状而非你的猜测 ‍\n告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。\n‍\n# 按发生时间先后列出问题症状 ‍\n问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。\n如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多​ 不等于好​。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。\n如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。\n‍\n# 描述目标而不是过程 ‍\n如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。\n经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。\n‍\n# 别要求使用私人电邮回复 ‍\n黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。\n当你要求私下回复时，这个过程和奖励都被中止。别这样做，让回复者来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于不可能使其他人产生兴趣。\n‍\n这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复​。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。\n‍\n# 询问有关代码的问题时 ‍\n如果没有提示别人应该从何入手，别要求他人帮你调试有问题的代码。张贴几百行的代码，然后说一声：它不能工作​ 会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 \u0026lt;x\u0026gt;，但实际出现的是 \u0026lt;y\u0026gt;​ 比较有可能让你得到回应。\n‍\n# 问题解决后，加个简短的补充说明 ‍\n问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。\n‍\n# 如何解读答案 ‍\n# RTFM 和 STFW：如何知道你已完全搞砸了 ‍\n有一个古老而神圣的传统：如果你收到RTFM（Read The Fucking Manual）​ 的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。\nRTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）​ 的回应，回答者认为你应该到他妈的网上搜索。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友！）\n在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。\n通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为：\n你需要的信息非常容易获得； 你自己去搜索这些信息比灌给你，能让你学到更多。 你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。\n‍\n# 如果还是搞不懂 ‍\n如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。\n‍\n# 如果得不到回答 ‍\n如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。\n总的来说，简单地重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。\n你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。\n有许多网上的以及本地的用户群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。\n另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。\n‍\n# 如何更好地回答问题 ‍\n态度和善一点。 问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。\n对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。\n如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。\n如果帮不了忙，也别妨碍他。 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆瓜会把它当成真的指令。\n试探性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。\n尽管对那些懒虫抱怨一声 RTFM 是正当的，但能给出文档的链接（即使只是建议个 Google 搜索关键词）会更好。\n如果你决定回答，就请给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。\n正面地回答问题！ 如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B​ 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C​ 并附上一个链接一点用都没有。\n帮助你的社区从问题中学习。 当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？​，接着再向文件维护者发一份补丁。\n如果你在研究一番后才作出了回答，展现你的技巧而不是直接端出结果\n‍\n妙哉, 建议办公室的大伙人手一套 ‍\n# 大佬提升生产力工具建议合集 ⚙️【方法论】我的效率提升方法论 - 工具使用篇 ⑥ (imageslr.com)\n‍\n‍\n# 浏览器整理妙招 ‍\n用 📥 收件箱 和 🔖 工作区 思维管理标签页和窗口：\n打开一个 Inbox 窗口。Inbox 窗口是一个收件箱，放在这里的标签页全是待处理的，例如“待阅读”“待填写”“待评审”等。处理完后关闭。 控制工作区窗口的数量。人的注意力是有限的，最多同时处理 2~3 件事。因此，最多同时打开三个工作区，当前不用的工作区通通关闭，减少分神。 每个打开的标签页，都需要定期整理：要么移动到 Inbox 窗口，表示待处理；要么分配到特定的工作区窗口，持久保存；要么关闭。 不需要每打开一个标签页就立刻整理。可以先进行手头的工作，等闲下来之后再整理。 ‍\n# 书签管理 书签管理也是浏览器一个很重要的话题。我们会把任何可能有用的、或者感兴趣的网页存成书签，但往往是收藏的时候很顺手，想用的时候却找不到。下面是我解决这个问题的方法。\n‍\n# 为书签设置一个有意义的名称 Chrome 的地址栏支持搜索书签和历史记录。输入标题或 url 中的关键字\n‍\n因此，可以为每个书签设置一个有意义的名称。当需要查找一个书签时，直接在地址栏输入几个关键字，比先思考它属于哪个类别、再去查找对应的文件夹要更方便。\n我采用[平台]名称​ 的命名方式，比如 [Gitlab]imageslr/blog​、[TCC]ad.engine.api​。这里可以配合 TabModifier 插件，使标签页的标题和书签名称一致。\n书签名还可以添加一些辅助搜索的 SEO 短语，比如 性能平台-云服务​ 可以修改为 性能平台-云服务|golang pprof|profile|服务性能优化|内存泄露排查​\n‍\n‍\n# 使用文件夹管理书签 不要把书签直接保存在书签栏上，而是要放在文件夹里。书签的标题会占用书签栏的空间。\n不需要创建层层嵌套的文件夹。一般来说，在书签命名良好的情况下，我们可以很快搜索到想要的内容。因此，书签的文件夹只需要简单的划分，粒度可以粗一些，层级可以扁平一些。附录是我的书签分类方式。\n‍\n‍\n# 将参考资料移动到别处 许多书签实际上是”参考资料“ —— 或者是对某项工作有用的参考文档，或者是一些学习资料，又或者是一些感兴趣的文章。我们需要定期整理书签栏，将这些”参考资料“移动到别处：\n某项工作的参考文档：移动到这项工作的项目文档。 学习资料：移动到学习笔记，或者移动到任务清单，作为一个 TODO。 感兴趣的文章：移动到稍后读工具。 总之，”参考资料“应当移动到特定的上下文 中，而不是放在书签栏里石沉大海。书签栏只保留那些需要经常打开的、真正有用的页面，减少干扰，易于维护。\n我也有在做, 将大量临时文件存放到所谓\u0026quot;堆叠文件夹\u0026quot;中\n‍\n‍\n# 全局快捷键唤醒 此外，还可以为常用的 App 配置全局快捷键，便捷切换可见状态。配置方法见 Preferences - Workflows - 右下角加号 - Getting Started - Hotkeys。比如我把 Alt+Q​、Alt+E​、Alt+F​ 分配给了提醒事项、飞书和微信。\n我打算等工作区固定后进行\n‍\n‍\n# Workflow ‍\nWorkflow 是 Alfred 的核心功能。Workflow 类似于 iOS / Mac 的「快捷指令」，通过可视化的方式串联一系列操作，之后用一个命令直接执行整个流程。很多工作中的重复性操作都可以配置为 Workflow，节省时间，提高效率。\n网络上有许多 Alfred Workflow 资源：\nhttps://www.alfredapp.com/workflows/ https://github.com/alfred-workflows/awesome-alfred-workflows 我常用的是这几个：\n有道翻译 Lark 云文档搜索 MWeb 文档搜索 Don’t Repeat Yourself。多观察自己有哪些重复的操作，尝试把它配置成 workflow。举个例子，我经常需要执行一个命令，里面包含了 1.0.1​ 这样的版本号，版本号每次执行都不一样。一开始，我是手动填充版本号。后来配置了一个 Workflow，只需要输入版本号，就能自动拼接完整命令，并复制到剪贴板，非常方便。\n‍\n# 理念 ‍\n# 如非必要，勿增实体 使用一组简单的工具，完成不同的需求；而不是使用一个复杂的工具，完成全部的需求。 使用一个复杂的工具时，前期只使用必要的功能。不要强行迎合软件，而是要根据实际需求，渐进式地选用新功能。 ‍\n# Don’t Repeat Yourself 经常需要复制粘贴的内容 (如地址、邮箱、发票抬头、工号等)，存成 Snippet。电脑上可以使用 Alfred Snippet；手机上可以使用备忘录，或者在输入法中配置快捷短语。 重复性操作，配置成 快捷指令 或 Alfred Workflow。 ‍\n# 善用 SEO 关键词 SEO 关键词可以增加信息量，提升检索效率。下面这些位置可以添加 SEO 关键词：\nChrome 书签标题 笔记标题、笔记内容 文件名 … (所有要查找的位置) ‍\n# 多用键盘，少用鼠标 ‍\n不同的软件快捷键可以配置成一样的，便于记忆\n‍\n# Mac 从零开始配置高效 Mac 开发环境\n暂时没用\n‍\n‍\n‍\n‍\n# 娱乐 ‍\n# 优势在我演讲完整版 链接\n电影《大决战·淮海战役》中常公那段经典念白\n徐州地方，历代 大规模征战五十余次，是非曲折 难以论说，但 史家无不注意到，正是在这个古战场，决定了多少代王朝的盛衰兴亡、此兴彼落，所以 古来就有 问鼎中原之说.\n当年 先总理 令革命军 分三路 会合徐州，兴师北上，光复徐州的第二天，清帝见大势已去，宣告退位. 民国十六年四月，也正是在徐州城郊，我有幸亲率数十万健儿 征讨北洋军阀孙传芳、张宗昌，大获全胜！\n我不明白，为什么大家都在谈论着 项羽被困垓下，仿佛这中原古战场 对于我们注定了凶多吉少. 二十年前，我从徐州踏上征途，开始了第二次北伐，中华秋海棠叶 遂归于一统. 本党本军所到之处，民众竭诚欢迎，真可谓占尽天时，那种勃勃生机、万物竟发的境界，犹在眼前. 短短二十年之后，这里竟至于一变 而成为我们的葬身之地了么？\n无论怎么讲，会战兵力，是八十万对六十万，优势在我\n‍\n转译\n许邹底芳，李代，打龟摸增錾五色于此，死飞取泽，楠衣论缩，胆，私架五部组衣倒，怎斯在泽个古錾仓丧，撅钉辽多扫呆往糙的森帅信汪，呲新逼罗，蓑衣，古来揪有，稳定总冤资缩\n当念，仙总利，林葛皿菌，粉三芦，毁喝许邹，新斯播桑，关父许邹的底儿舔，亲笛减打斯姨渠，宣高颓维，皿锅色洛年四月，耶怎斯栽许邹岑交，我油信亲帅苏色碗捡二，怎套波样军发，孙蹿放，赃总仓，打货犬森\n窝不皿败，维森摸打加都栽毯轮则，想鱼背昆该侠，仿佛泽总冤古錾仓，堆于我们租钉辽胸多技嫂，饵丝年前，我葱许邹塌桑怎图，开司辽底儿次波罚，宗花秋海棠爷，虽龟鱼椅痛，奔裆本俊缩刀资粗，皿宗姐岑换阴，怎可畏攒劲甜四，那宗伯伯森鸡，晚雾锦发的晋借，有在眼前，断断饵丝黏吼，泽哩井资雨衣贬，而为我的脏森资敌了妈?\n五抡怎么姜，灰錾兵哩，四拔四湾对洛四湾，油四栽我\n‍\n八十万! 六十万! 思政课上吾人的惊天一吼 ‍\n# 超强的 P 社战犯 大学时迷上了 p 社游戏，虽然读的工科专业，但是对历史产生了浓厚的兴趣，于是本科毕业后打算跨考历史. 大家可以翻翻我 20 年写的帖子，那个时候是第一次考研前一天写的，说实话那一年其实也是 p 社游戏入脑了，人家叫我回答“近代欧洲历史进程”，但是我写了一堆这样那样的战争，从瓦尔纳十字军，写到什么哈布斯堡-瓦卢瓦战争，还有西班牙王位继承战争……\n但最后竟然分数还可以，其实就这一道题如果答好，可能那年也上岸了. 后来又考了三次，这次是第四次了，进了面试，也看到了以前视频讲座才能看到的导师，有种说不出来的感觉.\n本科的时候打算以后考研历史，还有一个原因. 其实我想以后再回到高中和历史老师当同事. 高一文理不分科的时候，我历史从不复习，也考了第一名，那个时候是真的很喜欢高中历史老师（当然还有化学）. 高二分了文理科之后，他依然带我们理科班，那个时候很多人上历史课其实就是写理科作业，很多时候只有我在和老师互动（当然也是因为我上课时话比较多……）. 有次讲到苏联，他还让我和他一同梳理苏联领导人的顺序，“列宁，斯大林……”我从勃列日涅夫直接就跳到了戈尔巴乔夫，他告诉我中间还有安德罗波夫和契尔年科……\n当时只道是寻常. 我很想跟他说我最近看了什么新书，我还有好多观点都想讲给你……但是，我再也没有机会和他分享我对历史的喜爱，他已在 2020 年去世了，去世时可能还不到四十岁……\n什么时候喜欢上历史的呢？我记得是小时候翻的什么青少年百科吧？我为我记住了两河流域的两河是“幼发拉底河与底格里斯河”而雀跃，“秦朝是公元前 221 年建立的”“金朝竟然灭亡于 1234 年，这年代真有意思”，还拿去考考爸妈，获得他们的认可.\n一路走来，选了理科，不过我化学确实挺不错的，如果高考可以选的话，我可能回选“历史+化学+生物”.\n“历史有什么用呢？”我常常听到一些人会这样问. 马克布洛赫早已作了回答，但我觉得抛开“历史是否有用”，他所说的“历史有独特的美学愉悦”“难道所有的男女不都应该成为历史爱好者，乃至历史迷么？”，才是真正击中我内心的观点.\n复试结束，离开学校，碧空如洗. 我想起了苏轼在离开儋州时写下了“兹游奇绝冠平生”的诗句. 是啊，这趟旅途是我人生最奇绝的经历，我想不管结果如何，我都给这些年的经历画上了一个句号. 历史很有用，历史很有趣.\n要是我这次复活赛真没打赢然后死了, 我也去跨考历史(艹, 搞笑罢了, 肯定还是搞软工啊)\n‍\n# 政治 ‍\n# 观马克龙讲话 Link 疫情之前的演讲了, 很远之前的了\n他有一句话，非常文艺.\n我反问美国人，把俄罗斯与加拿大的位置互换一下怎么样呢？\n这个修辞，是能让欧洲人振聋发聩吧.\n小马是中学时期上台的 30 多岁的年轻领导人, 2018 好像, 但是一直到现在还在.\n# 战争 # 著名战争演讲 Link\n列宁在伯尔尼国际群众大会上的演说:\n同志们！欧战逞狂肆虐已经一年零六个多月了，战争每拖长一月，每拖长一天，工人群众就更加清楚地知道齐美尔瓦尔得宣言说的是真理：“保卫祖国”之类的词句不过是资本家骗人的话，现在人们一天比一天看得更清楚，这是资本家、大强盗的战争，他们所争夺的不过是谁能分到更多的赃物，掠夺更多的国家，蹂躏和奴役更多的民族。\n二战期间的话就多了，丘吉尔，罗斯福，蒋介石，希特勒，以及各国将领的阵前讲话，都是经典之作。\n先从希特勒二战前的一篇演讲说起吧，希特勒这人不管后世评价如何，行为又如何，至少在煽动群众情绪上是一把好手，这是不能否认的。\n如果有那么一天，我，阿道夫.希特勒，也会像本杰明.马丁那样，举着属于我们德意志的大旗冲在最前方！哪怕是战死，我也会微笑着进入天堂！我会见到那些德意志的荣耀的祖先们，我可以昂着头颅走到伟大的腓特烈大帝跟前，我可以骄傲地对他说：我，你的子孙，没有给你丢脸，我为伟大的德意志流尽了最后一滴血！\n丘吉尔的话，最经典的就是那篇广播演讲了。热血，辛劳，眼泪和汗水。\n我向国会表明，一如我向入阁的大臣们所表明的，我所能奉献的唯有热血、辛劳、眼泪和汗水我们所面临的将是一场极其严酷的考验，将是旷日持久的斗争和苦难。\n若问我们的政策是什么？我的回答是：在陆上、海上、空中作战。尽我们的全力，尽上帝赋予我们的全部力量去作战，对人类黑暗、可悲的罪恶史上空前凶残的暴政作战。这就是我们的政策。\n若问我们的目标是什么？我可以用一个词来回答，那就是胜利。不惜一切代价，去夺取胜利\u0026ndash;不惧一切恐怖，去夺取胜利\u0026ndash;不论前路如何漫长、如何艰苦，去夺取胜利。因为没有胜利就不能生存。\n再比如，罗斯福在珍珠港事变后的国会演讲。\n昨天，日本政府已发动了对马来亚的进攻。\n昨夜，日本军队进攻了香港。\n昨夜，日本军队进攻了关岛。\n昨夜，日本军队进攻了菲律宾群岛。\n昨夜，日本人进攻了威克岛。\n今晨，日本人进攻了中途岛。\n因此，日本在整个太平洋区域采取了突然的攻势。昨天和今天的事实不言自明。美国的人民已经形成了自己的见解，并且十分清楚这关系到我们国家的安全和生存的本身。\n作为陆海军，总司令，我已指示，为了我们的防务采取一切措施。\n但是，我们整个国家都将永远记住这次对我们进攻的性质。不论要用多长时间才能战胜这次预谋的入侵，美国人民以自己的正义力量一定要赢得绝对的胜利。 我们现在预言，我们不仅要做出最大的努力来保卫我们自己，我们还将确保这种形式的背信弃义永远不会再危及我们。我这样说，相信是表达了国会和人民的意志。\n再其次，要谈谈中国，抛开国军作战水平如何不谈，单说演讲稿的水平，蒋总统在庐山的抗战声明，的确可以称得上中国一流的文章了。\n我们希望和平，而不求苟安；准备应战，而决不求战。我们知道全国应战以后之局势，就只有牺牲到底，无丝毫侥幸求免之理。如果战端一开，那就是地无分南北，年无分老幼，无论何人，皆有守土抗战之责任，皆应抱定牺牲一切之决心。\n最后上一篇巴顿第三集团军演讲稿，大家感受一下，这狗娘养的巴顿，是多么有他妈的才华。\n弟兄们，你们所听到的那些有关美国人不想打仗，只想置身事外的说法，那都是一堆臭屎。美国人爱打仗。所有真正的美国人都爱战场上的刺激和交锋。当你们还是孩子的时候，你们都会崇拜弹子球冠军、跑得最快的人、大联盟球员和最强悍的拳击手。美国人爱戴赢家而且不能容忍输家。美国人每一次都会赢。这也是为什么美国人从来都没有输过而且永远也不会输掉一场战争。美国人对输的念头都感到可恨。战斗是一个人能够参加的最重要的比赛。它会让所有最好的脱颖而出，让底层的彻底淘汰。\n你们不会全部都死。今天在这儿的人只有 2%会在一场重大战役中牺牲。每一个人第一次上战场都会害怕。如果他说他不怕，他就是个天杀的骗子，但真正的英雄是那些即使害怕仍然坚持战斗的人。有些人到了火线下只要一分钟就能克服他们的恐惧，有些要一个钟头，还有些要花上好几天。但一个真正的男人从不会让他对死亡的恐惧胜过自己的荣誉感，他对自己祖国的责任感和他天生的男子气概。 所有经过军旅生涯的人都曾抱怨过“鸡屎演练”。那都只是为了一个目的——确保对命令的即时服从并时刻保持警惕。每一个士兵都必须做到这一点。我才他妈不在乎什么一个人不能永远都忙个不停。这些演练已经把你们所有人都训练成了老将。你准备好了！一个男人要想活命就必须随时保持警惕。西西里岛有 400 个整整齐齐的坟墓，都是因为一个人值班的时候打瞌睡——不过那都是德国人的坟墓，因为我们比那个长官先发现他在睡觉。 所有真正的英雄不是像故事书上描述的那样。军队里的每一个人都扮演着至关重要的角色。所以永远都别松劲。连想都不要去想什么你的任务不重要。要是每一个卡车司机都决定他不喜欢炮弹的轰鸣然后给吓坏了接着一头扎进一条沟里的话怎么办？那个没胆的混蛋可以对自己说，‘见鬼，他们不会想我的，只是几千人中有一个。’要是每个人都这么说呢？那这个世界会变成什么鬼样？不，感谢上帝，美国人不会这么说。每个人都会尽责。每个人都很重要。我们需要有人来提供枪支弹药，需要军需官来给我们准备食物和衣服，因为我们要去的地方可没有大把的东西可以偷。食堂里的每一个天杀的人，哪怕只是个烧水的，都有他的职责。\n每个人都应该想到身边一起出生入死的战友，而不是只想到自己。我们的军队里容不下胆小鬼。他们应该像苍蝇一样被清理掉。不然，他们就会在战争结束后回到家，天杀的胆小鬼，然后养出更多的胆小鬼。勇士会养出更多的勇士。杀光这些天杀的胆小鬼，我们就会成为一个勇士的国家。\n我在非洲战场上见过最勇敢的人之一，是我们正朝突尼斯前进时一个在强大火力下爬到电线杆上的人。我停下来问他爬到那上面干什么鸟。他回答，“修复线路，长官。”“这个时候在那上面不是有点不健康么？”我问。“是的长官，但这天杀的线路还是必须得修好啊。”我又问，“这些飞机低空扫射不打扰你吗？”他回答，“不长官，不过你倒肯定是打扰了。”你看，这就是个真正的战士。一个真正的男人。一个把一切都投入到自己的职责，不管赔率有多大，不管他的职责当时看起来有多么无关紧要。 你们应该都看到了那些前往加贝斯路上的卡车。那些司机真是气壮山河。他们整日整夜地沿着那些狗娘养的路前进，从不停车，从不因为周围的炮弹爆炸而偏离路线。很多人已经连续开了超过 40 个小时。我们能够通过，都是靠这些有胆量的美国好汉。他们不用上战场。但他们是有任务在身的战士。他们是团体的一部分。没有他们这一战就会输掉。\n是，我们都想回家，我们希望结束这场战争，但你不能靠躺着来赢得战争。最快的方法就是干掉这些发动战争的王八蛋。我们要冲过去把这些天杀的都清理掉，然后再干掉那些日本鬼子。我们越快把他们消灭干净，就能够越早回家。回家最近的路是通过柏林和东京，所以保持前进。 当一个人躺进个猫耳洞里，如果他在那儿呆一整天，德国兵总会抓到他。见鬼去吧。我的人不挖猫耳洞。猫耳洞只会拖延进攻。继续前进，我们就会赢得这场战争。但我们只有通过战斗，并且给那些德国人看看，我们比他们更有胆量才能赢得战争。可能会有一些抱怨说我们把自己人逼得太紧了。我还他妈不在乎这些什么抱怨呢。我相信一杯汗水可以挽救一桶鲜血。我们逼得越紧，就能杀越多德国人。我们杀的德国人越多，我们自己人被杀的就越少。逼得紧意味着更少的伤亡。我要你们都记住这一点。我的人不投降。我不想听到我手下任何一个军人被俘虏，除非他受了伤。即使你受了伤，你还是能够战斗。这也不是说什么胡话。我想要像利比亚那位中尉那样的男子汉，有支鲁格对着他的胸口，他用手扫开那支枪，猛地用另一支手取下头盔把那个德国佬打得晕头转向。然后捡起枪打死了另一个德国人。而在这一切发生前，已经有一颗子弹打穿了他的肺。这就是你们的真汉子！\n别忘了，你们完全不知道我来过这里。一个字都不能泄露出去。全世界都不应该知道你们跟着我在干嘛。我没有在指挥这支军队。我甚至不应该出现在英格兰。让那些天杀的德国佬们第一个发现吧。总有一天，我要让他们吓得屁滚尿流地爬起来号叫。\n等战争结束你们这些男子汉回到家以后，你们就有资格说一件事。三十年后，当你坐在壁炉边，你膝盖上的孙子问你：“你在那场伟大的第二次世界大战期间都干了什么？”你不用咳嗽一声说：“这个，你爷爷在路易斯安那州铲粪。”不，先生们，你可以直视他的眼睛说：“孩子，你爷爷当时正和伟大的第三集团军，还有乔治·巴顿并肩作战！” 好了，你们这些兔崽子们。你们知道我的想法。我会为能够在任何时间、任何地点领导你们这些了不起的家伙感到骄傲。就这些。\n# 职场 ‍\n# 关于实习我想说的一切_牛客网 Link\n我感觉目前牛客的言论趋势似乎走到了另一个极端，那就是认为实习大于一切，所有反对实习的贴子都会遭到群嘲. 这种言论风气并不是一个好的现象. 回想起来，我也有很长一段时间认为应该不顾一切去实习. 但在后来秋招的时候认识了很多人，有很多 0 实习也拿到了很好的 offer，而一两段大厂实习但 offer 一般甚至至今失业的也不在少数. 再加上我本身属于实习比较早比较多的那一类，这让我现在可以相对客观地来看待实习这件事. 这篇帖子主要想讲一下我对实习的看法和实习这件事带给我的收获，至于要不要去实习，什么时候去，去多久，那就由各位按照自己的情况决定了. 另外，本人学历情况是末 2 本科，求职和实习方向都是前端，其他方向和学历的情况可能有很大不同，各位仅作参考即可.\n先说一些本人的实习路线：\n大二暑假：初创公司（日常实习） 大三寒假：美团（日常实习，无转正） 大三下学期：百度（日常实习，有转正机会） 大三暑假：美团（暑期实习，有转正机会） 现在：快手（拿 offer 后提前实习） 跟连着去 BAT 实习的大佬差距很大，但在整体应该还算是实习比较多的了. 下面是我在这一年半实习的时间中的一些感受，可能对大家有所帮助\n‍\n# 打破大厂实习的幻想 首先我要对很多没有去过大厂实习的同学说，大厂实习，尤其是大厂的日常实习，跟你去之前想的其实是有很大差距的. 如果说公司的福利情况和硬件设施还可能跟你在牛客或小红书之类的平台看到的差不多. 但如果从从事的工作来看，可能跟你的想象有很大出入.\n在去大厂实习之前，我也总会觉得，在大厂写代码一定需要更强的能力，有更高的要求，但去了之后会发现，更多的其实还是写业务，甚至很多内部项目的代码质量还不如你自己的项目. 不仅是我，周围很多去大厂实习的同学也有这种感受，感觉能学到的东西其实有限，每天写业务学不到东西.\n这其实就要说到大厂招日常实习的本质逻辑，对于绝大部分公司来说，日常实习只是招一个能完成一些非核心工作的人. 这些工作正职员工没时间去做，但专门招个外包干又太亏，这时招个日常实习生就是个很好的选择（当然这只是原因之一）. 比如一个大厂的算法组或大数据组的内部平台需要增加 CRUD 功能，但组里没有人会写前后端或没时间写，这时就会招个日常实习生来干这些事，或者你们组的主要负责业务是 TOC，但还有一些不重要的 B 端项目，这时也会招实习生来负责这个项目. 这时你会发现，组里的技术水平似乎很高，但这些技术你一点都接触不到，有难度的项目根本不会给你做，你能接触到的全是增删改查 当然，这里不排除一些大厂会将一部分日常实习生作为正式员工的预备役进行培养（比如宇宙厂），或者让实习生去干一些难度很高的工作. 但根据我了解的情况来看，我说的这种情况一定是占大多数的. 至于在这种日常实习中如何提升自己，后面的部分会说到.\n相对而言，暑期实习的含金量就要高很多了，由于暑期实习本质上就是去招秋招的储备人才，因此组里基本都会对暑期实习生进行培养的. 这时就很可能会分给你一些有技术难度的项目或者让你独立完成一个技术需求，能学到的东西会多很多，会相对更接近你对大厂实习的幻想. 再不济，即使你依然在做 CRUD 和切图，你做的工作也大概率是组里的主要业务之一，整个开发流程会跟正式员工对齐，一般不会出现很多日常实习那种组里全是写 toC，然后把不重要的 B 端扔给你，让你自生自灭的情况. 这也是暑期实习为什么重要的原因，即使不考虑转正因素. 相比于日常实习来讲，也能成长得更快.\n‍\n# 理智看待实习 我觉得上面分享的那篇贴子一个非常好的观点就是，基础不牢，实习救不了你. 如果你把大量的时间花在边缘的日常实习，每天都干着重复且没有技术含量的工作，每天没有任何成长，其实是对时间的浪费，而且每天下班，在工作一天后，你大概率是没有精力在晚上学习了，也就会导致所谓的的“基础不牢”. 这种实习干一段三四个月刷个经历是个非常好的事情，但如果开始得过早，把大把的时间花在这上面，其实我认为是不太妥当的. 除非你实习的组技术强，能让你有很多的收获，或者跳了很多大厂，带来很漂亮的简历和隐性资源，再或者你毅力过人，能上了一天班晚上回去还能坚持学习. 否则我并不认为过早地将时间 all in 在实习上是一件好事（注意是 all in）.\n之前在初创公司实习的时候，我帮公司面试了很多前端实习生（这里如果大家有兴趣，之后可以再写个帖子细聊），有非常多简历上有好几段实习的，看着非常漂亮，但一问一点深度没有，基础问题还答的磕磕绊绊. 这种情况我真的觉得，把其中一段实习的时间拿出来巩固基础，或许他们的发挥会好很多. 包括就我自己的情况来看，在那家初创公司实习到后两个月的时候，明显感觉对自己的提升有限，且因为忙于实习，每天能学习的时间也少了很多. 而且因为每天做的东西都太简单了. 甚至一度让我对前端这个岗位对技术上限感到了迷茫. 回过头来看，如果我当时早点辞掉这个实习，开始全天学习，可能基础的扎实程度和八股能力都能再提高很多.\n总而言之，当你选择实习时，一定要考虑清楚这份实习能给你带来什么，能力提升，视野提升，大厂背书，转正机会等等，都是理由. 但也要清晰地认识到一点，实习本质上一个交换的过程，用大把的学习时间交换你想要的东西. 因此，神化实习的作用是不可取的，如果你发现当你实习到某一天，发现这份实习没发带给你更多的提升，或者带给你的提升已经不如你去自学了，就应该考虑这种交换是否值得继续下去了. 尤其是我见过很多技术相对一般的同学，因为暂时去不了大厂实习，就开始疯狂地去中小厂刷实习. 这种行为我个人是不太认可的. 因为中小厂的实习培养机制普遍不完善，实习带给你的能力提升有限，更多的还是刷经历，但当你有两段实习后，后面的中小厂实习带给你的背书能力已经很弱了. 这时你出去实习其实就远不如在学校沉淀技术，夯实基础了\n‍\n# 实习没有提升怎么办 很多人其实都会有这样的困惑，那就是自己的实习每天干的活都是基本的业务，技术含量有限. 感觉每天技术没有提升，开始质疑实习的意义. 其实根据我和很多 25 届的学弟聊发现，这是一个正常现象，甚至可以说，绝大部分的 25 届日常实习生可能都会面临着这种情况. 包括我自己也有过这种情况，第一次实习稀里糊涂，混了好多日子. 结果就是后面的面试问起这段实习经历时，答的磕磕绊绊. 而且简历上也没什么能写上去的东西. 后面从第二次实习开始，逐渐开始认识到了问题的所在，在实习期间就开始进行规划，在后来的面试中讲实习经历就会流畅很多. 这里浅浅跟大家分享一下经验\n‍\n入职第一周就开始思考：我的这份实习经历如何写简历，如何讲清楚我的这份实习，面试官可能会问我这份实习那些问题. 这点我认为非常重要，这并非是让你面向面试实习，而是如果你带着这种思维去开始你的实习的话，你就会去刻意关注很多你平时可能不会关注的问题. 比如，我们组的业务是什么，有哪些技术积累，上下游和哪些部门对接，能带来怎样的价值. 我在实习中负责的项目是什么，这个项目在整个小组的业务中的定位是什么，我做的这件事有怎样的收益，项目的技术栈是什么，如果项目框架是开源框架，那为什么要用这个框架，如果是自研框架，那为什么要自研，自研框架是为了解决项目的哪些痛点. 这个技术方案是怎么做的，为什么不用现成方案和库，前期调研了哪些方案 \u0026hellip;.诸如此类的问题，当你带着面试官的视角来看你实习的组时，就会对自己的实习有更加深入的了解，而不是只关注于自己负责的一亩三分地. 后面讲起这段实习时，也有更多的谈资 主动要活. 这并非工贼行为，这里的主动要活，并不是要一些业务需求，而是要一些技术需求. 大厂基本都会每个季度的技术需求排期，你可以留意一下组里这个 Q 的技术排期是什么. 然后问你的导师能不能把他的技术需求里一些简单的事情交给你来做，或者把一些技术调研的事情分给你. 如果技术需求较难且重要的话，代码部分可能不会给你，但要技术调研的话，导师基本不会拒绝. 不要小看技术调研，做技术调研是一个很好的学习过程，一方面，它能让你有机会深入了解一个特定的方向，这个方向可能是你之前根本不曾关注或没有听说过的. 同时，它也能让你了解这个技术项目的前因后果，为什么要做这个需求，痛点是什么，目前的数据情况如何. 如果可能的话，一些技术调研还可以借此机会看到组里较为核心的代码. 另外，在之后讲这段实习时，直接说自己做的是有难度的部分是技术调研也是没有任何问题的（我讲自己实习中的一个难点就会说高性能 web 调研，没碰到过面试官不认可这个难点的情况），前提是你把这个调研做好，做全. 当然，这里还有一个问题就是一些人实习的公司没有技术需求，甚至自己的导师和主管都不是跟自己一个岗位的. 那么这种情况就要看下面这点了 积极发现项目中存在的问题，设计解决方案. 这点更多的是针对在中小厂实习和在大厂做边缘 B 端的同学. 因为核心一点的大厂 C 端基本都会非常关注代码规范和性能，能给你一个实习生做的东西非常少了. 但很多边缘的 B 端项目，或者很多中小厂的 C 端项目，其实都有很大的优化空间，就看你有没有能力发现并抓住这些机会了. 比如如果是 C 端项目，作为前端你就可以去开发者工具去分析整个项目的性能指标，从火焰图去看整个项目的执行情况，有没有执行时间过长的函数可以考虑优化. 或者直接去代码里理逻辑，看看有没有哪些地方可以优化，即使你的优化方案都是八股文里烂大街的，如果能在项目中落地也是一件很了不起的事情. 如果是 B 端项目，那么除非性能优化可以提升非常多，否则性能优化价值不大，更多的可以从构建流程的角度来考虑，比如升级构建的一些配置来加速构建时间或产物大小等. 或者就是一些项目开发中的痛点，能不能写一些小工具来解决. 比如你们的测试环境要带上特定的请求头才能访问，之前都是改配置代码，那能不能写一个浏览器插件来完成这件事，这样就可以更快得切换开发和测试环境，不用走改配置+构建的过程了. 或者你们的图片需要去特定的网站处理后才能使用，那能不能写个 node 脚本并接入构建流程，让这个流程自动化进行？总之公司的项目并不想你想的那么完美，会有一大堆正式员工没来急的处理或不太重视的小问题，发现这些问题并解决，就能让你的实习更加具有含金量. 看文档，看组里其他人在干什么. 看文档是非常重要的，大厂基本都会有自己的文档和知识库. 这是一个非常好的提升技术视野的途径. 我在美团实习的时候因为疫情过年没回家，那年的大年初一到初六，我每天做的事情就是睡到自然醒，然后去公司看一天的学城文档. 那段时间是我技术视野和认知提升最快的时候. 从那时我才逐渐发现，切图，框架，请求，构建工具这些都只是前端世界非常非常小的一部分. 一个真正牛逼的前端工程师能做的事情还很多. 当时看到的很多技术方案是我从未想过可以去做的，在这个过程中我逐渐明白如何发现项目中存在的问题，如何制定一个技术方案，如何画架构图和设计图，如何做前期调研，如何量化收益等等. 那段时间是我觉得自己成长最快速的时间，看文档带给我的思考方式提升，我觉得也对我之后的实习和秋招有很大帮助. 当然，很多小公司是没文档的. 这个我也清楚，那么这种时候就只能 all in 第 3 点了. 要是第三点也没机会搞，或者主管不支持，那就刷两三个月经历趁早跑路吧 ‍ 很好, 自己基本是运用上了\n# 不去实习该如何学习 前面讲到一点，就是去一堆中小厂刷含金量不高的实习经历是没有意义的. 另外，在第二部分也讲到，实习的本质是用大把的学习时间换取你想要的东西，这也就意味着，如果你能利用好大把的学习时间，也是可以得到比实习更多的收获的. 这里主要讲一下如果不去实习的话，应该如何提升自己的技术水平.\n首先要注明一下，虽然不想搞学历对立，但根据我周围去年的秋招情况来看，学历 92 或双一流以上即是没有实习也有机会拿到大厂面试和 offer，相对而言，双非的同学如果没有实习拿到面试的机会就会少很多（前端岗，其他方向不了解）. 这是客观存在的情况. 因此建议各位如果学历在双一流以下，至少得在秋招前拿到一段实习. 这部分的内容针对的人群大概是：\n学历较好，但受限于各种原因（导师不放人，学校的课没法请假）无法去实习的同学 学历一般，已经有过实习但感觉含金量不高，陷入实习焦虑的同学 26 届及以下的同学 个人认为大三以前沉淀技术\u0026gt;实习，最快也应该到升大三时再考虑实习，虽然我个人是大二暑假开始的，但现在让我重新选择的话，我会更倾向于大三中期或大三寒假再去实习，大二继续沉淀技术和基础. 之前我也觉得开发岗怎么可能碰到复杂的算法，结果就是，后面工作中真的碰到需要自己设计和优化算法以及较为复杂的场景时，明显感觉自己基本功不够. 因此还是建议大家大三以前一定要打好基础. 把计算机基础知识，设计模式和算法学好. 这里提一嘴，在前端方面个人认为重要性的排名是（设计模式\u0026gt;计网\u0026gt;编译原理\u0026gt;算法\u0026gt;OS/计组），设计模式绝对是被很多人忽略的东西，写业务还好，一但你需要看源码或者写轮子，编辑器这种较为复杂的项目，不懂设计模式真的会一头雾水.\n至于 25 届，学历一般，还是 0 实习的同学，这部分也可以抽时间搞一下提升自己，但更关键的还是尽快拿到实习机会，不然秋招难度真的会指数级增加\n首先，大厂实习带给你最多的，其实是技术视野的开阔和接触到复杂工程的机会，协作能力和所谓的沟通交流能力其实没有那么重要，至少重要性远没有很多人想的那么高（对于技术同学而言），其次，就是背书的能力，但要认识到的一点是，如果你本身能力不够，再多的面试机会也没有意义. 因此，能力够硬是最根本的前提.\n另外一点就是，大厂实习是一个能够提升你的技术视野和思维，让你突破技术瓶颈的地方，如果你在学校自学，把框架，构建工具，工程化，Node 服务端都学完后，很容易陷入到技术瓶颈当中. 也就是在一直寻求学习更多的框架技术，去学 rust,webGL,甚至 redis 和 MQ，但是对所有技术的掌握又很浅，能明显感觉到框架只是工具，学再多也没有用，但又不知道如何提升自己，我自己也在这种阶段滞留了相当长的时间. 说白了就是技术认知不足，不知道如何将技术真正运用到项目中去解决真实问题，不知道技术落地过程中可能出现哪些问题. 比如你在学校做的项目都是 QPS 只有几十的，是很难想想到 QPS100 万的项目会出现哪些问题的. 这时就需要去开阔技术视野，了解到一些技术在业内的实践方式，在实际开发过程中有哪些问题需要解决，如何解决等等. 这本质上就是一个认知迭代的过程. 大厂中的实际项目是接触这些东西很好的方式，但并不是唯一的方式\n那么也就是说，如果不去实习，其实在学校里要做的就是三件事：\n打基础，至于怎么打基础，那就不是我要讲的了，这么多年了，先问问自己八股背完了没有，hot100 刷了几遍（bushi） 严肃地说，这个打基础就是要把基础搞明白，弄清楚，而不是为了面试而背一大串的烂八股. 这也是我觉得把实习看太重的一个弊端，那就是在明明时间还很充裕的情况下，为了尽早拿到实习机会而把大量时间花在烂八股上，而不是去研究更有深度的东西. 这实际上是相当浪费时间的. 经历过大厂秋招大厂面试的同学一定清楚，面试官会问你垃圾回收或事件循环这种跟工程能力有关的八股， 但绝不可能问你!DOCTYPE 的作用这种纯靠背且对开发基本没什么帮助的烂八股. 而很多离秋招和暑期还很远的同学，因为太早地去准备实习而花了大把时间去背这种东西，其实完全是本末倒置的行为.\n正确的打基础应该是，如果你时间充裕，那么就应该根据八股去研究更底层的东西，比如今天你看到了 Vue 的 diff 算法的八股，那你要做的就应该是直接去 github 上把 Vue 的源码拉下来，看看内部这个 diff 算法到底是怎么写的，key 是如何生成的，为什么要设置四个指针，而不是直接跟 React 那样建立映射关系？而不是查一大堆二手资料然后背一堆概念. 诚然，这个过程是相当耗费时间的，可能你做他的这个时间可以背四五页八股了，但是这个过程是能给你的提升是远比你能把死的概念背下来要强很多的. 同理，JS 如果你想去研究得更加深入，可以看看 V8 官方的一些博客https://v8.dev/blog\n扩宽技术视野，这点我吃亏真的很多，在初创公司实习完冲大厂的时候，背了很多八股文，但实际上在面试很多大厂时，都会因为技术视野和解决方案设计相关的问题而吃大亏. 因此，我希望之后的 25 届一定要抽时间去扩展自己的技术视野. 去多看看一些大厂的技术实践. 不要把视野局限在框架上. 比如美团技术团队的博客和字节终端团队的一些博客，很大程度上可以替代实习中看知识库和文档，增加技术视野. 看看很多技术在企业级项目中是如何落地的，又可能会出现哪些问题. 或者去多跟一些上岸大厂的学长或前辈聊聊他们最近在做的事情，都能很大程度上提升自己的技术视野. 这本质是一个潜移默化的过程. 虽然你不可能看完 rust 在构建工具上的落地，就马上学会如何在你的项目中使用 rust，但文章中记录落地过程中出现的问题，前期调研的过程，解决思路和方式，其实都有很多的借鉴作用. 会让你逐渐学会这种思考方式.\n接触复杂项目，这个很多人可能很难理解，不去实习如何接触复杂项目呢？答案很简单，那就是去 GitHub 没错，我可以负责任得说，绝大部分中小厂的项目和大厂的非核心项目，跟 GitHub 上的千星项目比，代码质量差的可不是一星半点，如果你想见识高质量的项目，没有比 GitHub 更好的渠道了.\n很多人可能会说，自己水平有限，给大项目提 PR 根本没人叼，那些 issue 自己又不会修，怎么办?\n答案是不需要，提 PR 参与开源这件事，能做当然是最好的，但实际上，就算你只是看很多开源项目的代码，也能有很多收获，而且很可能比在大厂实习能学到的技术还要多，而且基本上包罗万象，各种领域的都有.\n但是看也是要有方法的，不是你随便找个几万行的大项目从 index.js 看起，这么搞的话，估计你看一小时就会被劝退了，正确的方法是在学完某个方面的知识后，带着问题专项研究\n比如你看完了 Vite 的课程，感觉学了不少东西，但又没法检验自己的水平，那么这时一个很好的方式就是，去 GitHub 把 Vue 团队下，所有用 vite 构建的项目都看一遍，看的过程中其他的代码不用管，只看 vite 的配置文件和相关的脚本是怎么写的就够了，然后想一想为什么要这这样写配置，为什么要写这些脚本. 这样很大程度上，你就明白了 vite 配置的最佳实践. 同理，如果你学完 redux，也可以找很多使用了 redux 的高星项目，看看他们是如何使用 redux 的，通过这样的方式，你对这些技术的掌握程度和最佳实践的理解程度，绝对不会比在大厂实习的同龄人低，甚至更高.\n再重申一遍，上面这些学习方法是推荐给学习时间充裕的大二及以下，或者学历或其他经历能够让你不去实习也能拿到面试机会的同学. 25 届学历一般又没有实习的同学一定要抓紧找第一份实习！！！！\n‍\n# 实习带给我什么 说起来实习给我带来了什么，我也想了很久，可能最直接的就是，让我秋招拿到了一份还算不错的 offer，但我觉得，或许不止于此. 我觉得这些实习真正给我带来的是，一种不一样的大学生活，让我看到了更广阔的世界.\n在那个初创公司实习的时候，我直接就是跟创业的老板汇报工作的（毕竟团队太小了，就二十几人），看着他是如何带着一群人，在没什么资源的情况下一步一步往前走. 当时从项目研发，拉资源，招聘，谈客户，他基本在全程负责. 有时我都感觉，我高三都没有他那么累，后来我辞职去了美团，还跟他一起吃了几次饭. 当时我肉眼可见地能看出他的疲惫. 但他却总是斗志昂扬地跟我说，咱们的公司已经越来越好了，以后咱们做大了我就把你们都请回来. 那是我第一次见到的纯粹的互联网创业者，虽然我之前吐槽过那段实习带给我的技术成长有限，但我一直觉得，在那里的经历是我不可磨灭的记忆，之后我在美团，百度和快手见到了很多技术大佬或职级很高的主管，但再也没见过和他一样眼里有光的人.\n后来去了上海美团和北京百度，认识了很多跟我一样出来实习的人，现在和其中很多人都成了很好的朋友，也见到了很多真正的大佬. 在这个过程中，对自己的预期也变得更高. 刚上大三的时候，感觉年包 25W 已经是很高的 offer 了，但认识了很多 23 届 40W，50W 的大佬，对自己的要求和预期才变得越来越高. 很多时候限制自己人生高度的是自己的想象，这句话一点没错. 甚至回顾我过去的一年，我常常感觉，相比于所谓的努力，我觉得认知才是我拿到一个还算满意的 offer 的主要原因，我见过很多比我卷的多的多的人，跟他们相比我简直是个废物，但最后他们最后的结果却并不如人意. 或许这就是成年人社会的不公平，也正因如此，我才花掉了清明假期的一天写下这篇帖子，希望帮助更多的 25 届找到满意的工作，不让自己的努力因为认知问题而白费掉\n过年的时候跟很多老同学一起聚了聚，他们说看我的朋友圈，这一年去了好多地方，说我的生活才是他们想要的大学生活. 举杯谈笑间，我自己也有点恍惚. 记得我小时候总是对旅行和奔波有一种莫名的痴迷，有一天突然在想，自己未来做什么工作比较好，于是拿着平板电脑查了一下午什么工作可以经常全国各地跑，因为当我我还是一个百分之百的 i 人，在排除了记者，销售，演员等自己明显不能胜任的职位后，我极度悲哀地发现除了通缉犯之外，再没有什么职位符合我的要求了，为此狠狠地 Emo 了一天. 回过头看，我有时候也觉得去年一年，我似乎确实是在过着自己曾梦想过的生活，这一年我跳了三家大厂，从上海去了北京再回到上海，去了武汉，长沙，杭州，苏州，南京，济南，秦皇岛，郑州\u0026hellip;好像一年都在奔波的路上. 那个阳光并不明媚的下午拿着平板的小孩，或许不会想到自己未来会过着这样的生活.\n但当时我真的开心吗，或许并没有，去年我总是在焦虑，焦虑如果被学校抓回去怎么办，焦虑大四没法代课了，学校不放实习怎么办，焦虑转不了正怎么办，焦虑需求排期太紧怎么办，焦虑拿的 offer 开的太少怎么办\u0026hellip;.我就这样一直在焦虑着，在曾经觉得应该岁月静好的时光里焦虑着.\n高三那年，年级主任站在台上对我们振臂高喊着，翻过这座山，后面就是你们梦想的地方. 时至今日，我才发现，山的那边依然是山，翻过那座山，不过是重新仰望另一座山罢了. 那年我花了无数个日夜考上了现在的大学，我清楚地记得我入学第一天，看着曾经只在照片中见过的学校大门和图书馆，感到莫名的激动与自豪. 三年后，却又因为学校一系列让人寒心的行为而对它失望透顶. 我们总是竭尽全力追求自己梦想中的东西，再带着对他渐冷的失望离开. 普通人的一生，或许就是带着希望翻过一座山，在品尝到片刻的快感后，发现山的那头依旧是山，只好再苦笑着整理心情，开始新的攀登，直至终了. 所谓上岸，所谓进大厂，并不如很多人想象地那么光鲜，不过是跨过了就业这座大山，来到了名为社会的这座山脚下罢了. 我们终其一生，拼尽全力向上攀爬的意义，或许只是为了在某个平凡的日子，在吐槽完一大堆生活的狗血和不如意后，猛然发现，自己正过着曾经梦想过的生活，虽然这生活太过无奈和辛酸，却也是曾经的自己无数次憧憬过的.\n‍\n普通人和生活的战斗，大抵如此\n‍\n‍\n# 程序员个人影响力 在这个注重个人品牌的时代，每个人都是一个超级 IP(intellectual property)，任何人都有可能成为明星，我们应该把自己当成一家公司来经营。已经有无数的人通过微信公众号、知乎、直播平台、抖音等内容平台收获大量粉丝，形成自己的个人品牌和影响力。\n对于程序员来说，自然也要跟上时代的浪潮，积极的去打造个人影响力。影响力对于工作求职来说都是有促进作用的，当你在技术领域有一定影响力，说明大家认可你的能力，也有利于个人成长和事业发展。\n明确定位\n提升技术\n乐于分享\n‍\n写技术文章是一个比较常见的方式，我认为写博客有几个关键点需要考虑：\n文章要有质量 记录解决问题的过程及思考 系列化输出 考虑受众的层次：初级入门者？进阶？高级？ 坚持输出 很多人会说，写博客不知道写什么内容，其实写博客不一定要写很高深的内容，但是一定要有质量，要有自己的思考，寻找自己与别人的不同之处。例如，你现在搜一下 ES6，网上的入门教程已经有很多了，所以你再去写入门教程就没有什么意义了。你可以写一写自己在学习 ES6 过程中遇到的问题，或者分享自己在学习过程中写的 Demo，这样的分享内容就具有一定的价值。\n我们在学习的过程中肯定会遇到各种各样的问题，我们可以把遇到问题和解决问题的过程和别人分享。分享自己遇到了哪些问题，怎么解决这些问题的，在解决问题的过程中收获了什么。\n对于一个技术领域，可以尝试进行系列化输出，这样即可以整理自己的知识体系，也能给受众一个系统化的学习资料。例如前端开发的学习，可以分初级、进阶、高级等阶段进行系列化整理输出。\n写文章的过程中，最重要的就是要坚持。一开始可能粉丝很少，阅读量很少，但你的文章质量都不错，在达到一定的数量后，自然会有一定的影响力。所以最重要的是要坚持去写，不能放弃。当然也不能自嗨，要注意去营销自己、推广自己。\n当然，我们分享的方式也不局限于写文章，还有制作培训视频，在技术交流会上分享等方式。\n最后可能还有一个问题：我们可以在哪里去分享自己的文章？ 实际上现在有很多的垂直内容平台，我们可以针对与自己的领域，在很多平台上进行分享。\n‍\n可以帮助打造影响力的平台的梳理\n文章类型 文章内容 平台 技术文章 技术以及技术职场相关 Github、cnblogs、CSDN、博客园、掘金、简书、知乎专栏、segmentfault 生活感悟 生活中的遇到的问题 微信公众号、个人博客、知乎、豆瓣、简书 读书笔记 书中内容引发的思考 微信公众号、知乎、豆瓣、简书 ‍\n# 程序员职业规划 程序员的职业路线总体来说并不复杂，主要可以分为技术、管理、转行和创业四条路线，不同职业路线的能力模型不同，所需要眼光和思维模式也不一样。不同路线的共通点是对程序员技术能力以及沟通协调能力等软技能的要求。技术能力作为大厦的根基，是程序员一定要打好的基石，程序员作为公司的一部分，工作中必然要和其他人打交道，所以沟通协调能力和表达能力等软技能应该是作为必须具备的通用技能。\n‍\n​​\n‍\n‍\n# 技术型 技术型路线可以细分为技术专家和架构师两类，两者在能力模型上都要求对技术充满热情，能够持续不断的去学习新技术。 区别点在于技术专家要精通某一技术领域，偏向理论知识研究；架构师要具备技术视野、系统性的思维以及领导力等软能力，偏向工程实践。\n‍\n‍\n# 管理型 程序员工作时间长是众所皆知，很多人说在一线技术岗位不适合做太久，做几年就转成管理岗。管理岗也是有对应的能力模型的，能力达到了要求，带团队是顺其自然的事情。一个团队的负责人对整个团队的影响非常大，决定了整个团队整体的工作氛围和发展方向，“兵熊熊一个，将熊熊一窝”，这话一点不假。\n‍\n程序员的管理路线可以分为技术管理和项目管理（Project Manager），两条路线都要求具备管理能力，也有着不同的侧重点。技术管理者要带领团队保质保量完成业务需求，首先是要对业务有一定的了解，同时要能够具备团队管理能力，进行工作量的评估，分配任务，提升团队成员实力。技术管理侧重于以事情为中心，项目经理侧重于以人为中心。 项目经理要协调多方资源保证项目的交付，这就需要组织协调能力，同时要能够具备项目管理能力，能够理清项目干系人，分解项目职责，考虑项目风险，使各个团队资源达到一个平衡点。\n‍\n# 转型 一般在互联网公司的一个业务部门，有销售、技术、产品、设计、运营等岗位。技术岗可以转型做销售、产品、运营、设计，甚至成立工作室去做一些个人项目。拿产品岗举例来说，程序员转型做产品的优势就是具有技术思维，懂得如何通过技术去实现产品需求，但是也有许多劣势。\n‍\n商业思维： 技术开发只需要完成产品经理的需求，很少去考虑实现需求的目的，不用思考产品背后的业务逻辑，公司是如何通过这个产品去盈利的。这是技术转产品需要锻炼的一个能力：培养自己的商业思维，对所在行业有清晰的认识，理解产品的商业目标，站在用户的角度去思考用户需求。\n‍\n沟通表达能力： 程序员给人的印象都是木纳的，因为程序员主要和机器打交道，机器比人简单多了，按照逻辑流程执行代码，不会出现千变万化的结果，就像一个纯函数一样。但是产品岗位需要和技术、运营、设计去打交道，让各个岗位的同学理解你的产品需求，产品上线之后要给运营或者客服进行培训，这都需要良好的语言组织能力和表达能力。\n‍\n写作能力： 技术开发的主要工作是写代码，也就在写注释和产品说明书的时候需要写一些文档。如果让技术人员去针对产品去写商业需求文档、市场需求文档、产品需求文档，可能还有一定难度，所以文档写作能力也是很重要的一个点。\n‍\n# 创业 创业对于程序员来说，也是一条可选择的职业规划路线，毕竟人人都有出任 CEO 的理想。程序员创业不一定要做 CEO，可以做技术合伙人（CTO）\n\u0026hellip;\u0026hellip;\n‍\n‍\n# 25 届福建三本科班找实习 ‍\n问问大佬们，准备今年大三下找实习，啥时候开始投简历开始找，现在在做第二个项目，估计二月中旬差不多做完项目，准备做完回头复习 mysql,Java 基础之类的东西，不知道来不来得及\n当时看到帖子的时候是 2.1, 于是就在想像他一样这样搞了. 但是 3 月份就遇到了逃不掉事件加上自己的基础有许多地方有问题, 不能忍, 于是回头修理.\n到 5 月份自己项目还是破破烂烂只有框架, 基础倒是复习挺好了.\n基础好一个星期可以做一个项目，一个星期刷面试题，半个月再回炉一下，三月够了\n这个确实中肯, 这样就是还要一个月了\n2024-06-16 我做出的评价: 项目设计到完工花了 12 天的产能, 面试题只需要 1 周重点刷(之前 1-2 个月整理知识体系), 还要回炉和设计简历等流程, 没有专业团队的话就只能自己凎了(因此花费了 2 周的时间)\n‍\n‍\n‍\n# 职场鼠鼠历险纪 ‍\n# 步入职场, 寻找机遇 永远不要停止「寻找机遇」。小米总裁雷军有一句著名的话：「站在风口上，猪都能飞起来。」但问题的关键，是如何能够提前站在风口上？答案是，不断寻找。同时，你需要拥有「寻找发展机遇」的能力，根据你现有的能力和时下的热门职业做出规划，利用业余时间搜索资源，拓宽视野，然后放手去干。\n普通人如何实现呢？就是从你步入职场的那一刻起，就要抱着「持续学习，提升敏锐度」的心态开展各项工作，并且每天预留出「阅读热门资讯」「丰富圈层社交」「学习、兼职、成长」三个部分的时间\n‍\n# 不宜工作的碎片时间怎么利用？ 在这个时代，我们经常被打断，时刻被打扰，手机已经成了工作和生活不可缺少的部分，我们的心流时间越来越短。经常工作五分钟，拍照半小时；刚看五分钟的书，却玩一天手机。感觉一看信息，就陷入了回复微信的黑洞里，感觉自己的时间不够用，没有时间学习。\n在时间管理上，秋叶在《时间管理 7 堂课》中介绍了「加减乘除」四步走的方法，我觉得很好用。我们可以有意识地规划好时间，就会让自己有越来越多的时间做自己想做的事情。\n加：增加碎片时间的价值。\n很多时候，我们之所以浪费碎片时间，不是我们不知道时间的价值，而是因为我们不知道碎片时间有哪些价值。那么我们怎样赋予碎片时间更多的价值呢？这时我们可以想一想，如果拥有 1 分钟，可以做什么？1 分钟可以想一个文章标题；1 分钟可以发会儿呆；1 分钟可以休息一下……以 1 分钟类推，还可以为 3 分钟、5 分钟、10 分钟找到不同的用途，并将不同分钟数的用途结构化，放入自己的脑子里。\n减：将事务分类，合并同类项。\n当我们专注学习和工作时，突然被人打扰或者被杂念打断，会大大干扰我们的专注力。这时我们可以将事务分类，类型相同的事情合并放在同一个时间段做，例如：把需要电话处理的事情、需要外出处理的事情、需要找老板沟通处理的事情分别集中到一起，然后分别在不同的时间段来做，这样就可以有效提升效率，降低成本，避免时间碎片化。\n乘：用场景化思维实现多任务叠加。\n当两种任务类型差别很大的时候，我们很难做到快速切换，更别说提高时间效率了。比如，等公交车的 3 分钟掏出一本书看，肯定是没有什么效率的。但我们换种方式，在吃饭的碎片化时间里，可以跟同事聊天互通信息；开会前的碎片化时间，提前熟悉会议材料，想一想待会儿自己要发言的内容……我们可以用场景化思维来实现多任务的叠加，让你的碎片时间价值最大化。\n除：主动把重要任务碎片化。\n如果这周五前需要完成一个项目方案，你会怎么做？很多人会想要找到一个大块的或整块的时间去做，但是可能很难找到。这个时候如果把完成一个项目方案分解为「构思 + 列提纲 + 高效率写方案 + 修改 + 二次修改 + 定稿」。这样一来，一个大任务就可以被分解为不同的小任务，匹配到我们长短不一的时间段中。\n‍\n为了保证花费的精力能产生最大价值，我们需要怎么做呢？\n要事第一。根据 80/20 原理，80% 的效益都是由 20% 的工作创造的。也就是说，在最关键的 20% 之外投入的精力都属于过度消耗。工作不是做得越多、越完美就越好，而是要精准地使用 20% 的精力投入，撬动 80% 的价值产出。所以我们要秉持一个原则：要事第一，把时间投入在最重要的工作上，不必把每件事都做到极致。\n那么怎么判断哪些工作更有价值呢？我有一套自己的原则：\n■ 以管理者的思想决定自己的时间分配。即把老板当成客户，以满足客户的需求和利益为最大价值。能解决这些问题的工作就是核心工作。\n■ 了解任务的性质，如果这个任务是经常性的，那么先建立起一套模板或者能运转起来的流程，才是当下最有效益的事情；当需要做报告、回复邮件时，马上去执行通常不是当下最重要的事，而总结好能反复使用的模板应该排在任务优先级的前面。\n■ 与团队进行手脑协作。和组员们充分沟通、协调，各司其职，形成一个高效运转的整体。其他人做过的，就不要重复做了。\n■ 勇于忘记过去。从前遗留的不再有成效的事情，要果断抛弃；如果利益远大于成本及风险，就立刻行动。比如，之前花了很长时间做到一半的策划案，因为某些情况与公司走向不符了，就要果断放弃，不要心疼之前付出的努力。\n在我们面对大量烦琐的工作时，判断力会被干扰。在即时反应下，我们很容易选择优先完成那些虽然紧急但是不甚重要的任务。所以，为了避免这种情况，我一定会留出复盘一天工作的时间，反思我这一天有没有违反「要事第一」的地方，并总结出来以示警惕，顺便优化一下工作流程。复盘的依据，就是自己建立的一套时间监控体系。\n■ 记录时间。记录和了解每天都做了什么事，花在各项工作和休息的时间各有多少，从而判断时间是否被浪费。\n■ 分析、管理时间。找出非生产性的浪费时间的活动，从以后的日程中剔除。一些使时间碎片化的动作，也会引起我的注意，接下来就是进一步系统性地优化这些碎片化动作。\n■ 统一安排时间。把时间和工作内容化零为整。\n‍\n‍\n# 主题式学习 ‍\n我之前在写论文时常用到的一个方法，其实就是围绕一个问题或话题寻找大量资料阅读，然后在每篇资料下面深度挖掘参考文献并再次阅读，就这样层层展开学习，直到构建起比较深刻的认知体系。整个阅读过程可以分为三层，最中间的是我要解决的问题，圆心向外第一层和第二层分别是我要找的资料和要看的书（见图 3-1）。\n图 3-1 主题式学习\n第一步，确定要了解的问题，然后去看通识读本、手册，了解这个领域大概在研究什么，搭建出比较完整的基本框架。比如，我想了解社会心理学，就会选择先读戴维·迈尔斯的《社会心理学》，而不是直接看《乌合之众》这类畅销书。通识类书籍会对问题的各个方面有全面的描述，但是不会涉及太多的细节，避免刚上手的人在过于追求细节的信息中迷失方向。\n第二步，对整体有了认知后，再顺着线索深入阅读，不断填充认知细节。比如书籍后面通常会有很多参考文献，我一般会由此顺着层层阅读下去，从而建立对新领域的深刻认知。\n刚开始上手的时候，我们要怎么选择靠谱的入门读物呢？这里建议大家看看名校的推荐书单，比如英国牛津大学会给各个学科推荐书单，方便即将入学的学生在开学前读一读，让他们为将要学习的学科做一些准备。\n‍\n# 三种思维方式 这一节我讲了三种思维方式，希望能帮助大家更透彻地看待问题以及更高效地解决问题。\n第一种是主题式阅读。你要勇于走出舒适圈，不断探索新领域，那么如何以最快的速度掌握一门新知识呢？你可以用主题式学习法，在解决问题中逐渐推进学习进程。\n第二种是数据思维。凡是做出的判断和得出的结论，都要以事实为证，而不是单凭感觉。\n第三种是行业报告思维，也就是我们常说的格局和眼界要够大、够开阔。这一点可以通过阅读行业报告实现。\n‍\n‍\n# 外包 ‍\n每天需要做的三类事情\n第一类是纯内耗型：消耗时间过多、薪资固定且上升空间很小。比方说，一些高学历的应届生，刚踏入职场的时候会被要求从最底层的整理材料、统计文档等工作做起。对于应届生来说是熟悉环境和业务模式的好时机，不过这段时间不宜过长，因为后期都是不断重复的体力劳动。\n第二类是潜力型：这件事可能在当下不会带来什么财富收益，但是我们可以看到这件事是有前途的，未来是可以持续增值的。比如，投入时间和金钱学习理财，一定需要一个学习的过程，未来才会为你带来固定收益；比如在各种平台上练习写影评和书评，久而久之在未来会为我们带来稿费收益。\n第三类是综合型：这件事既可以训练我们的能力，又可以立刻为我们带来收益。比如创业，我们能够边学边获得收益。\n我们要做的，就是外包纯内耗型的工作，保证综合型工作的量，增加对潜力型工作的探索。\n‍\n外包进阶：了解自身需求，匹配高效外包团队\n对外的工作，我们需要外包；对内，我们也需要管理自我。身份成长是更高级的外包术，能让你知己知彼，把精力投在成长最快的事业上。\n‍\n我把外包目标分为两类，一类是人，一类是工具。对于人来说，我们需要做到以下方面：\n‍\n（1）寻找价值观相同或是认同你价值、能力的人。我在寻找外包团队的时候，首先会向成员输出我的价值观和做事的原则、标准、内容，观察团队成员是否理解并认同。比如需要将项目中搜集资料的工作交给团队，我会首先介绍整个项目的核心理念，包括项目的内容、用户群体，需要达到什么样的效果；然后介绍一些时间节点，规定好任务完成的日期，介绍我的安排和规划；最后，我会倾听团队成员的意见，看他们是否认同项目的理念，是否理解整个流程和任务分配。我还会提供给外包团队相关案例或是我想要的文案素材。\n保持交流和沟通是了解彼此想法的最佳途径，我们也可以从中让整个外包流程更清楚、更高效。\n‍\n（2）在同学、后辈、朋友圈中寻找外包团队。找外包太贵怎么办？有一个很好的办法是从你的同学、学生、后辈、朋友圈中寻找。这类群体求知欲相对较强，不仅可塑性高，成本也可控。\n我一般会在自己的微信群、微信公众号「学霸星球」里发「兼职招聘启事」，标明自己的需求、标准和薪酬，让合适的人找上门来，这是第一种方法。\n我还会和我的学生、后辈群体沟通。这一类群体主要有两大需求：一是前辈的指导和提点，二是兼职、项目经历需求。大多数刚出校门或还在学校的年轻人都希望刷经验、找实习，丰富自己的简历，以及挣点零花钱。我们不妨向他们介绍自己的项目、工作，看彼此的需求能否匹配。这一类人干劲大、可塑性高，和他们一起工作的时候会更像是一个团队，效能也会更高。\n所以此时，平时积累的人脉就可以动用起来了。我在找我做咨询的「在行」学员、参加过我课程的学员、微信公众号读者中找到了许多可以合作的人。我们对彼此都有所了解，一起工作可以很快进入状态，合作非常愉快。\n‍\n（3）从兼职网站寻找专业人士。你如果资金充足，那么可以直接找专业人士，比如一些独立的摄影工作室、视频剪辑工作室，专业团队最大的好处是可以完美匹配你的需求，具备较高的专业素养。\n‍\n‍\n# 睡后收入 「睡后收入」，指一个人即使不工作也能持续增加的被动的收入。平时上班赚的钱，都叫作「主动收入」，一旦你不上班了，收入也就停止了。相对而言，「睡后收入」属于「被动收入」，即便不干活也不会影响你的收入状况。\n‍\n在创业的过程中，我们通常会做的事情是看市场、看时机、看竞争。在自己感兴趣的事情上，我们要做三个步骤的分析。\n（1）看市场：深入调研国内外市场，判断市场是否饱和。\n市场调研是一种识别目标市场中的机会、问题，并进行改进和评价的工具。无论是线上还是线下的生意，我们都可以借助这个工具发现当下市场中存在的机会。比如，想做线上生意的时候，我们可以在淘宝、天猫上搜索当下自己想要进入领域的市场占比情况是怎么样的，是否具有稀缺性。线下的生意，我们可以调查想要进入区域的商圈状况，以及是否有竞争者、人流状况、租金等信息。\n（2）看时机：根据行业所处的阶段，判断未来趋势。\n行业的选择也是影响机会的重要判断因素。在一个发展势头较猛的行业里，哪怕是猪都会跟着飞起来，若是前几年选择互联网工作，那么个人的增长起点就比较高。例如，近几年社交电商是个比较热门的趋势，我们可以了解一下什么叫作社交电商，它和我们有什么关系，从而发现一些机会。\n提到行业的选择，我想起几年前我还是一个上班族的时候，我在网上搜索了非常多关于线上教育的资料，我推测线上教育将是未来发展的必然趋势，因此我所有的职业选择都与线上业务有关，而互联网让我实现了人生的逆袭。\n（3）看竞争：看对手和看自己，分析有无入场机会。\n‍\n通过上面探索的方式，我发现市场上目前存在五种普遍的赚钱方式，它们分别是技能劳动付出型赚钱模式、关系赚钱模式、资源优势赚钱模式、信息差优势赚钱模式、机会趋势赚钱模式。\n（1）技能劳动付出型赚钱模式。这是一种最普遍的赚钱模式，即付出自己的时间和劳动赚钱，比如线上兼职、网上翻译、PPT 定制、文案写作。\n（2）关系赚钱模式。在工作中积累了一定人脉后，就会产生一些关系。当你发现这些人脉中需要某些资源的时候，你就可以通过推荐的方式赚钱，比如通过人脉销售自己的产品，或者撮合其他人的合作。大家都可以看到的微商、微店，便属于关系赚钱模式。\n（3）资源优势赚钱模式。指的是通过盘点自己已有的资源，在此基础上开启赚钱模式，比如售卖家乡特产、售卖自家的产品。\n（4）信息差优势赚钱模式。指的是通过提前知道一些信息，或者知道少数人才知道的信息的赚钱模式，比如知道哪些地方因为规划建设将带动房地产的价格上涨。在深圳证券交易所刚开的时候，就有人利用信息差优势，挖掘了人生第一桶金。这需要平时多观察、多思考，保持敏感，你会发现，机会并没有想象中那么难找。\n（5）机会趋势赚钱模式。指的是通过观察掌握社会的发展趋势，看到一些发展的好机会，比如投资牛市时的股市或投资一些发展好的行业。\n我们既可以选择单一模式，也可以进行多重组合。\n‍\n如何打造和运转未来赚钱工具？\n如何在未来打造可以产生被动收入的赚钱机器？我主要从三个方面给大家提供不一样的思路，并深度挖掘如何赚钱的秘诀。\n（1）从消费升级中把握机会。消费升级带来新的消费场景，带来市场的洗牌，从而带来新的商机。比如，洗发水这个人人熟悉的东西，也存在很多升级空间。\n（2）抓住新兴行业的发展趋势。\n（3）养老行业是潜力巨大的行业。\n‍\n‍\n# 什么是大厂? 看网友七嘴八舌, 真是众说纷纭, 看来这是薛定谔的大厂了\n一个简单的标准：你爸妈知道名字的一定是大厂\n500 以上中厂，1000 以上算大点的厂吧，外包除外\n人数只是衡量的指标，重点还是看用户量，公司的项目规模\n‍\n可按发的工资大概估算，1.8w 基本是大厂，1.2w-1.8w 中厂\n公众熟知度高的是大厂，500+员工但是公众不认识的是中厂，否则是小厂\n‍\n给的多就是大厂，给的少啥也不是\n看待遇，看在行业的影响力\n‍\n也得看研发占比。\n看有没有测开以及测开的工作内容 (这个我认为中肯)\n看人数是没用的，而且不同领域不同。这个大厂定义主要看在他这个领域，他是啥咖位的。\n像我们实施这一行，深圳本科生 8k 以下就是小厂，8k-12k 就是中厂，能拿到 12-20k 这一块的就是中大型厂了。金蝶除外，金蝶开的是真低\n‍\n‍\n# 程序员找工作黑名单爆料 ‍\n我也只是围观群众，背后的真相大家自己判断，我只是单纯的收藏一些链接，不喜勿喷，欢迎大家关注我微博和提 issues 来参与维护这个名单\n最近的事情 让我意识到 有些同行也是劣迹斑斑，需要记录一下 以后大家招聘注意\n‍\n# 写在前面 ‍\n首先，每一个程序猿，每一个公司都有黑点，但是如果把黑点放大了，黑名单就没存在的意义了。就拿这几个例子来吧\n‍\n# 普通程序员 ‍\n杭州有赞\n如何看待“有赞”年会公开宣布 996 工作制？ 有赞会得到法律的惩罚吗？ 脉脉匿名区的有赞员工 便利蜂\n年底组织数学考试，考试不及格就开除。 脉脉匿名区的便利蜂 上海碧华信息技术有限公司\nAndroid 开发者的艰难讨薪路程 世纪佳缘\n白帽事件 西山居\n如何看待西山居近期的大规模「劝退」 百度无人车\n如何看待为了挑战百度无人车安全性，李彦宏试乘时让工程师人为拦车？ 触控科技\n如何看待触控与廖大解约？ 华为(啊这)\n华为清理 34 岁以上员工 任正非回应华为清理老员工：华为不养吃白饭的人 音悦台\n你为什么从音悦台离职？ 珠海时代互联\n在珠海时代互联(优品科技)工作是怎样一番体验 第一次听说工资可以打八折 阿里钉钉(啊这)\n如何看待阿里「步数垫底罚站一周」 4399\n你为什么从 4399 离职？ 酷派\n如何看待酷派在毕业入职前夕疑似解约 300 余名校招应届毕业生？ 蛋壳公寓\n我在蛋壳公寓的打工记录 明星衣橱\n如何看待明星衣橱有钱搞 VR 试衣间，却拖欠员工工资达 1 年以上？\n腾讯新闻\n黄晓明投的明星衣橱被爆长期拖欠薪资 员工已求助法律解决 欠款欠薪没融资，明星衣橱老板要携小三跑路了？ 新浪财经\n明星衣橱生死局:拖欠员工工资 认为讨薪的是落井下石|融资|张晨|浙江永强新浪财经新浪网 ‍\n# 技术合伙人 ‍\n青云(狗屎)\n知乎：你如何看青云员工期权合同欺诈事件？ 衣格鹿\n作为一个技术合伙人，如果碰到了这样的公司这样的事情，你该怎么办？ 被「技术合伙人」销毁删除代码数据、关停服务器，撕逼反咬是一种什么样的体验？ 丁香园\n如何看待冯大辉（Fenng）从丁香园离职？ 4399\n曹政（caoz）是不是被 4399 的蔡文胜的虚假承诺欺骗了？ 如何看待蔡文胜把曹政给坑了这件事？ 55 海淘\n在 55 海淘工作是怎么样一种体验？ 异乡好居\n如何看待异乡好居老板娘控告程序员删代码？ 我为什么“明目张胆”地和异乡好居撕逼？因为我是千千万万普通程序员的一名 北京展程科技\n就算老公一毛钱股份都没拿到，在我心里，他依然是最牛逼的创业者 如何评价《就算老公一毛钱股份都没拿到，在我心里，他依然是最牛逼的创业者》里面这位 CEO 的所作所为？ 对那个创业者的妻子提一个问题，一个建议 作为除当事人外最有权力发言的人，谈谈《就算老公一毛钱股份都没拿到，在我心里，他依然是最牛逼的创业者》 乐曼多科技\n如何评价成都乐曼多公司打人事件？ 怎么看待《街篮》手游研发商，成都乐曼多科技近日发生的殴打程序员事件？ 北京聚道科技有限公司\n汉东官场算什么，我被创投圈“暗算”的经历，沙书记都架不住 ‍\n# 选公司 ‍\n知乎合集：有哪些公司给你留下「还好没去这家公司」的印象？ ‍\n# 最后 ‍\n最后说一下心得，竟然还有希望 GitHub 处理这个 repo，原因是想维护 github 这份纯净，还把 GitHub 被墙和我挂钩，我真是醉了，就像一群待宰的羔羊，心想着只要老实一点，宰的就是别人不是我一样 我只是记录一下自己看到过的事件，我自己下次换工作的时候防止踩坑，仅此而已 我也没有那么愤世嫉俗，比如我以后换工作，还是会考虑百度阿里的，但是会避免上面出现的坑，比如百度无人车我就不去啦，阿里的其他很多部门还是很棒的，希望到时候不会因为这个名单把我 pass 吧 求 star，支持我继续把这个名单维护下去,谢谢支持\n结果, 当初我搜集的时候还在的, 24 年还没 2 年就没了\n‍\n‍\n‍\n# 各城市互联网状态大摸底记录 Issues · csguide-dabai/Programmer-look-at-China (github.com)\n包括点评, 访谈, 记录等, 都是 2022 年开始的, 到目前的选择还是很有说服力.\n‍\n目前有重点记录我的水平层次 - 非大厂, 非国企部分, 其余部分有用的留档\n2024-06-16 现在看来, 很多时候是选择权在他们那里, 照这样来根本没有厂子\u0026hellip;微服务没有太伤了, 各种被刷不回复(我认为很大原因)\n仅仅列出的部分\n环境高分: 北京, 广州, 上海, 成都, 杭州, 苏州\n‍\n低分: 大连\n城市 互联网环境评分（10） 北京 9.0 长沙 6.5 广州 8.5 天津 6.5 西安 7.0 郑州 6.0 青岛 5.0 武汉 7.5 上海 9.0 成都 8.0 杭州 8.5 大连 5.5 苏州 8.0 南京 7.0 重庆 6.0 合肥 6.5 ‍\n有些还没毕业的同学问我应该怎么选择幸福感高的城市。其实我的感觉是你在一座城市的幸福感很大程度取决于你工资和房价的比值，其它因素都是次要的。平均下来你每月的工资接近你所在城市还可以的区域的房价，那么你生活的就很舒服。就比如你工资每月到手一万二三，你所在城市房价也一万二三或者稍多点，那你买房压力并不大。但是如果你所在城市房价很高，就比如北京。你每月到手两三万的工资已经很厉害了，然而像昌平差不多的地段房价都四万以上了，那你买房压力肯定很大，换而言之你生活的幸福感肯定不高。天天租房还和人合租，能有啥生活幸福感？当然对于那些想待几年学点东西就撤的同学另当别论哈，我说的是定居的考虑。\n‍\n# 北京篇 我一般是不考虑大北方和西南地区的, 只考虑东南沿海城市, 但是还是记录下, 作为头牌\n大厂集合\n百度\n腾讯\n阿里巴巴\n字节跳动\n美团\n京东\n网易\n虽然北京依然在资源和机会上是领先其它准一线和二线城市一大截的。但是由于现在杭州、苏州、成都、西安等等城市发展的都不错，像长沙、大连、天津、青岛等地也比较安逸。再加上由于现在网络越来越发达，不像前些年一样许多事情只能在北京、上海、广州这些地方才能体验到。所以大家根据自身情况选择合适自己的城市就好了，硬往北京卷也没必要\n‍\n谈到互联网公司，免不了说薪资。很多应届生校招时由于没有工作经验，容易被哄。首先要知道，校招给你开出的薪资是可以 argue 的，也就是说可以和 hr 商量。然后我主要想说的是，要谈你去和 HR 谈 base（每月基础工资）, 可不敢去和 hr argue 每年多少薪哈。一个哥们给我讲了个真事，他们公司一个应届生嫌 25k x 15 少，HR 跟他说那给你 25k X 16 吧，然后那个应届生就开心的答应了。HR 给你承诺的每月 base 是没问题的，但是说每年发多少个月的月薪只是一个期望，最终给你发几个月的年终奖要根据你到年底的评分以及你所在团队年底的评分共同决定。\n‍\n介绍百度时说的百度是以技术为导向的是说给腾讯听的，因为腾讯是以产品为导向的。产品的话语权比程序员大。\n美团的办公环境和福利就太差劲了，首先美团的办公大楼都是租的，工位也都很简陋，也没食堂。别的公司过节发礼品，好家伙，你团发个贺卡，要么发个微信的红包专属封皮\n‍\n来了北京后大概率事要和人合租了，像上面说的在腾讯百度等西二旗这片区域上班的，大多数选择在回龙观这块和人合租，相对便宜且有地铁站上班比较方便。在回龙观这块租一个 10 来平的卧室大约 2500 左右吧。 在五道口那片上班和望京那片上班的在附近租房要更贵点，租一个 10 来平的卧室大概每月要花 3000+。当然在望京上班可以沿着 14 号线租的远点，租金会便宜点，上班直接坐着地铁过来也还挺方便。在亦庄那边上班的租房会相对便宜点，2000 多点基本可以。想要一个住且在上述公司上班方便，租一个 30 平左右的一居室基本最低每月都要 5000 以上了。\n另外大家还可以瞅着点公租房，租金会比较便宜，单租一间 40 平的房子也就不到 3000，只是限制会比较多。部分公司会有公租房名额，我记得度小满就能协助职工申请公租房。申请一居室的会容易点，两居室的难申请。\n‍\n-\u0026gt;太可怕了, 看着我手里 650 的河北某二线末尾市区核心区 40 平蜗居房租感叹. 一个月 1200 的换我这样的单间我觉得才可以接受, 如果是 3000 到 5000 就连我这样的家伙也受不了了. 家里 80 平的屋子出租, 东南某省会下辖县城核心区房价 2 万, 租金 3000 左右. 这些都是难以接受的啊.\n‍\n抛开美食说一个现实的问题，就是吃饭的花销。你在学校时一顿饭也就是十块左右。来到北京后吃饭的花销基本上要比你学校的花销贵一倍左右（因为老板的房租也会摊到饭的价格中）。如果你公司有食堂还好，要是公司没食堂只能吃外卖的话，自己的腰包和胃都受不了。说到这我觉得我以后晚饭还是自己做吧。\n‍\n国企\u0026amp;央企\n这篇文章中说的都是国企和央企的直属软件开发中心，子公司是不包含在里面的。子公司的工作风格差别很大。总体来说，国企和央企在软件技术上都是差互联网公司一大截的，待遇好不好真的看具体公司。是有些好的国企，我一个朋友在某国企虽然工资不太高，但是上了两年没加过班。也有一些国企，加班比拼多多都重，但是工资低且福利差。\n‍\n研究所\n北京有着数量庞大的研究所，比如航天科技系列、航空工业系列、中船舶系列、中科院系列、中电科系列、军事科学院下属系列、工信部下属研究院、中国兵器等等。不得不说计算机相关专业真的是万金油，因为上述研究所，不管他们主营业务是啥，他们全都招计算机相关专业的毕业生，并且招的还不少。\n近几年想成为这些研究所的正式职工都需要是硕士以上了，签的本科生基本都是劳务派遣。户口的事放在生活里统一说。\n可能家里的长辈听到你去了研究所会觉得很有面子。但是单论软件技术来说，目前研究所是落后于互联网公司的，并且差距还不算小。研究所和互联网公司的办事风格不太一样，互联网公司会把岗位划分的很细致甚至有的互联网公司会无限的细分一个岗位（这点是我觉得不太好的地方，因为划分的太细了，以后跳槽会存在问题），但是研究所的岗位又划分的太粗糙了（从订需求、写开发文档、代码开发、测试、到和客户扯皮这些流程全的你来搞）。另外因为研究所的大部分领导软件方面技术没有互联网那么专，所以对工作量的评估不是太准，有时候安排起活来就比较离谱。是否来研究所要想想明白以下几个问题：（1）你家庭的经济情况，至少北京买房首付家里能掏出来。（2）你的兴趣（如果只想安安静静的写代码，研究所不太合适）。（3）面试通过后你要充分的了解你所在的团队情况，同一个研究所，不同的团队的差别那可大了去了。\n总体来说，个人感觉如果你在一个二线城市的研究所工作会比在一线城市研究所工作舒服。在一线城市去互联网公司干几年攒点钱撤一个二线城市压力没那么大。在北京的研究所工作北京户口是拿了，但是干几年根本攒不下多少钱，一线城市研究所分房这事就不用做梦了，充其量会给你提供一个宿舍，这种宿舍也就是毕业三到五年内可以住，以后就不能住了。相比于二线城市的研究所，一线城市研究所的工资每月多个两三千，但是房价是二线城市的三到五倍，生活幸福感会大打折扣。\n‍\n‍\n# 长沙篇 总体来说，长沙的互联网环境还是太差了！不过，相比于几年前也是在慢慢改进中！近几年许多知名互联网企业纷纷落户长沙，比如深信服、华为。不过，这些公司在长沙的研发岗位一般都很少，相当于一个办事处的感觉。\n其他还有像 福米信息、万兴科技 、亚信 等公司，这里就不多介绍了。\n其实程序员在长沙，目光不要只着眼于互联网软件公司，长沙有许多军工芯片类型的公司待遇也很好。另外许多大型制造业公司，比如三一重工、中联重科、山河智能等公司也在招程序员，待遇也很好。\n‍\n房价\n长沙的房价真的就太香太香太香了！！！作为一个省会城市，房价竟然还要比很多普通的地级市都要低。\n以下房价数据来源于安居客，可以作为参考。\n可以看到长沙新房的均价在 9500 附近。即使是互联网公司比较多的岳麓区，新房均在也才在 12000 附近。什么, 比我家名不见经传东南沿海小渔村还低一半?\n教育\n长沙有 3 所 985 高校，分别是国防科大、中南大学、湖南大学。放眼全国，一所城市能够 3 所 985 的少之又少！\n其他的比较好的学校还有 湖南师范大学（211）、湖南农业大学（一本）、长沙理工大学（一本）、湖南科技大学（一本）\u0026hellip;..\n交通\u0026amp;气候\u0026amp;娱乐\u0026amp;美食\n气候讲真不太友好，多雨，炎热，夏天的时候没有空调真活不下去。\n基本没有说错，这是个基本只有夏季和冬季，但是夏季冬季随机播放，没有空调基本没法生活的城市。\n家里不也是一样, 只有冬夏, 反复无常, 天无二日晴, 夏天 40 度体感\n‍\n‍\n# 成都篇 介绍城市前先为成都定一个基调吧，那就是 享受生活​\n我的评价是, 享受生活就不要来互联网啊, 互联网拿个不是脑袋别裤腰带上面的贫民三郎?\n便宜房租, 还不错的环境, 属于是守门员了\n‍\n‍\n# 广州篇 广州的互联网环境相对来说还不错。\n广州的繁华以及它的魅力不用我多说，无论从人文还是从经济来说都是不虚其它城市的。不过我在面试时发现，广州除了几个头部大厂是统一薪资标准外，相较于其它一线城市，广州的互联网行业给我的感觉是整体薪资水平偏低。\n大家注意呀，其实学计算机相关专业的想在广州挣钱，不止可以通过互联网公司，也可以通过当公务员，教师等方式去挣钱呀。应届生考进体制内当公务员，年薪也 20 多万呢，并且各方面福利待遇绝对到位，相当不错了。下面我们还是分互联网公司以及国企央企研究所介绍吧。\n‍\n‍\n# 互联网 广州互联网这边除了几个头部大厂，做开发的应届生薪资差不多就是 16k 呀，感觉有点低。其它的在广州设点的互联网公司我直接列到下面啦，实在写不过来了，大家有兴趣的详细了解呀。\n‍\n# 运营商 感觉待遇一般，就是比较轻松，追求轻松和稳定的可以看下\n‍\n‍\n# 杭州篇 房价高, 机会多, 阿里系多, 卷.\n‍\n‍\n# 南京篇 房价还是比较高的\n‍\n‍\n# 上海篇 类似北京\n‍\n‍\n# 天津篇 因为临时准备去那里实习(虽然是基本找不到好的公司了于是只能另请高明, 但是还是记录一下耶路撒冷的地方)\n天津的互联网环境是真的不怎么好, 天津的互联网公司是真的没几个像样的\n房价太高\n天津因为沿海，夏天比较潮湿，到了冬天风非常的大，我在天津的那年冬天还把我脸吹伤了。春天的气候比较舒服。\n天津的交通最值得称道的地方就是他半个小时到北京的高铁了，车次基本平均每 5 分钟就有一趟，所以好多人在北京上班在天津住 ~ 感觉天津的房价就是这样起来的\u0026hellip; 最近一段时间天津修地铁修的很猛，一直在传来新线路开通的消息。堵车嘛，目前还没哪个二线城市不堵车的，我知道的也就太原堵车相对没那么严重。\n‍\n# 武汉篇 很可能要去实习, 毕竟在中转节点上, 来回一趟算可行(家里到学校全程 10h 的高铁, 在这里去学校 5h, 回家 5h 刚好均匀分配)\n‍\n武汉的房价相对全国来说还是比较有性价比的，泡沫相对也小一些。\n不过，武汉的工资收入相对一线城市来说也要低很多。\n‍\n武汉的教育资源那是相当可以！不然，大学生也不会全球数量第一。\n不过，武汉人也多，路上的车也多，上下班堵车是常有的事。\n武汉算的上是“交通枢纽”的存在，你从武汉出发坐高铁，你去国内大部分地方都非常方便 (九省通衢假的诺)\n‍\n# 福州篇 缺\n‍\n‍\n# 厦门篇 缺\n‍\n# 结语 SK 还是有一些参考价值, 但是 21 年的情况到我毕业的 25 年肯定是大变了, 疫情 结束后的一些情况也是不好考虑, 我建议去即时的论坛和分享网站看看具体老哥的看法, 也许能提升更多方面的认知.\n另外, 不在上面出现的, 也要进行判断.\n‍\n‍\n# 自己专业是不是进坑了? ‍\n打开 boss 直聘\n先定位你要去的城市\n再定位你的专业\n然后依次进行以下的筛选条件\n1.学历（大专，本科，硕博）\n2.工作经验（应届生，1-3 年经验，3-5 年经验）\n然后你就看给的工资吧，记住所有标工资下限—工资上限的，默认该公司只给你开工资下限\n比如 3k—6k，默认 3k\n然后进去看招聘要求\n之后看统一的公司话术多不多，比如:\n‍\n弹性工作时间:下班时间不固定，通常加班，单休或大小周\n‍\n公司年轻有活力:刚成立\n同事都是同龄人，氛围良好:淘汰了 35+的人，每年补充年轻牛马\n‍\n诸如此类\n当你发现你的专业，只能定位一些垃圾公司，给的薪酬低到离谱的时候\n说明路子错了\n补救办法也有\n找你专业的延伸专业，看看能不能蹭到一些高薪行业的圈子\n不耗时间在本专业，本专业学习只求及格，找能找到工作的专业自学\n看看本专业考公有没有专业壁垒，比如图书情报与档案管理，古籍整理，一般人不学这个报不了图书馆的事业编\n最后，你实在不知道怎么办，建议去拉一下各招聘网站薪资高的行业，或当地历年公职人员招聘，点进去，看招聘条件，需要什么能力、需要掌握什么技能工具、限定什么专业，一览无遗，然后对标去学.\n这个办法真实有效\n希望能帮助你\n‍\n‍\n任何事情都是相对的，当越来越多的人都去考研，等你毕业，就业市场卷的就是研究生，中小企业老板宁愿招聘一个便宜本科生，也不愿意招一个相对高价的研究生，届时你将更难找工作，原因有三：1.适合研究生的工作本来就少 2.大量的研究生增加了竞争难度 3.研究生的长衫更长了\n‍\nLink\n一，尽可能别拖.\n“今年太难了”\n‍\n二，盯紧人口流入与投资流入.\n这两个是黄金指标. 人口流入主要看城市，投资流入主要看行业. 现在没有普惠式的增长，一定要看好资源的流动方向.\n人口流入是好理解的：这个城市很多人去，那交易总量一定相对繁荣，机会多.\n例如有些重工业行业，产值非常大，但有新增投资进入么？如果没有的话，这些行业很可能已经进入严重的产能过剩.\n有些行业看似和投资不沾边，但五年规划里有它名字，新闻里报道了政府的专项投资基金和产业基地，这些也是投资.\n第一步看有没有投资流入，第二步看该行业的分配公平性. 这波大基建流入了大量国家投资，但土木人是涨不了几个钱的.\n总体而言，在投资流入的前提下，消费端的业务分配公平性优于企业端，而企业端又优于政府端；单个市场里，民企、外企参与高的一般优于高国企参与.\n投资是衡量行业兴衰的重要指标，如果你发现你的意向行业三资不爱（国民外），那除非你能摇人，否则开溜.\n‍\n","permalink":"https://spadektlsg.github.io/p/sk%E6%89%B9%E8%AF%8402/","tags":[],"title":"SK批评02"},{"categories":[],"contents":"公司实习的做 demo 笔记\n7.23 - 7.25 \\ 7.26 - 7.31 Trantor 练习记录\n‍\n视图配到开发项目的同一位置去执行构建\n‍\n‍\n# 记录 ‍\n‍\n# Mission 7.25\n‍\n一阶段 W3\n任务建模\n模型 + 关系 分析制作\n内置元件生成 提交控制台 视图 CRUD 制作\n前端页面跳转逻辑 前端提交表单操作 后端 \u0026ldquo;Controller\u0026rdquo; 逻辑方法 提交 MT 审阅\n‍\n‍\n二阶段 W4\n返工 Trantor 文档学习 - 前端页面和数据源\n等待控制台恢复(阻塞)\n上传资源后研判目前 Demo 完成情况 前后联调并探索任务目标 和 之前疑问 完成后测试测试用数据库完整联调前后端\n余下事项\n补充余下页面与逻辑 探索数据源 探索分页 探索联表操作 发布并查看 debug 页面\n宣布 Demo 完毕\n‍\n‍\n# QA ‍\nQ\n前端有了, Controller 有了, Mapper(DAO 层)也有了. 但是 Service 层很难让人感知到: 那么一些通用的方法在哪里写呢? 逻辑流?\n我看到有用到 \u0026ldquo;Repo\u0026rdquo; 标记的类(上面有@Repository​ 注解), 并且被其他 Func 调用, 这个应该就是了吧\n前端调用后端发起请求, 后端接收的过程还是有些模糊. 可能是个人 TS 技术栈薄弱导致的\n什么时候使用 qModel, 什么时候使用 Model 感觉有些乱\n由于没有立刻能看到的页面效果, 也不能在本地跑起来调试, 感觉很不直观.\n没有测试数据库, 没法存数据\n‍\nA\n可以写 Spring 那一套的 C/S/M , 已经确认拆分 见数据源选择-文档, 自己没咋看前端的问题 这个确实文档里面建议还是不要用太多, 但是大伙还是用 QModel 比较好, 还是用 QModel, 能够自动封装前端页面数据 DTO 到后端数据源. 唯一的区别就是这, 能否自动封装, 不需要手动封. 等待页面修复 数据库后续拿一个测试的 ‍\n‍\n‍\n# 修复的发布流程 : 六步走 本地写完代码, 打开控制台 cd 到 srm-trade-api 在 api 模块 (*), [生成对应临时文件] cd 到 srm-implement-api 在 implement 模块 (*) 浏览器查看控制台生成内容 ‍\n(*) == 用控制台执行 mvn 脚本片段, 耗时约等于 1 分钟\nmvn clean deploy -U -Ddependency-check.skip=true -DretireJsAnalyzerEnabled=false -Dtrantor.deploy -Dtrantor.flowParser.skip -Dmaven.test.skip -Dtrantor.deploy.url=http://dev-metastore-management.scm-nonprd.jinkosolar.com/terminus/srm ‍\n新\nuat 环境的元数据上报命令\nmvn clean deploy -U -Ddependency-check.skip=true -DretireJsAnalyzerEnabled=false -Dtrantor.deploy -Dtrantor.flowParser.skip -Dmaven.test.skip -Dtrantor.deploy.url=http://staging-metastore-management.scm.jinkosolar.com/terminus/srm ‍\n交付控制台 -UAT\n‍\n如果遇到报错, 可以切换到 Maven 菜单的控制台执行操作(去掉开头的 mvn 后选择上下文执行), 可以看到完整的异常堆栈进行 bug 定位 ‍\n‍\n# 视图 Demo ‍\n‍\n# BO 视图任务 基本采用 trade 模块的标准路线, 去除部分逻辑. TS 代码先打 T\u0026rsquo;O\u0026rsquo;D\u0026rsquo;O\n展示 主页面 新增 增 删除 删 编辑 改 详情 查 ‍\n‍\n# 结构写法 ‍\n针对性.xml 编写方法\n‍\n主界面 List 形式\n一个大`Table`​ { `Fields`​ | `Field`​ + `Search`​ + `RecordActions`​ + `Actions`​ } ‍\n详情 Detail 形式\n一个大`Detail`​ { `Fields`​ | `GroupField`​ | `Field`​ + `Actions`​ } ‍\n新增 Form 形式\n一个大`Form`​ { `Fields`​ | `GroupField`​ | `Field`​ + `Actions`​ } `Action`​ 中编辑逻辑 ‍\n删除 Form 形式\n‍\n编辑 Form 形式\n一个大`Form`​ { `Fields`​ | `GroupField`​ | `Field`​ + `Actions`​ } `Action`​ 中编辑逻辑 ‍\n‍\n‍\n‍\n# 模型 Demo 后续更新\n直接使用图书馆管理系统的关系进行模拟, 逐渐加码\n来自本人(@SpadeKTLSG)利用若依框架制作的的开源项目: LDBMS - Link\n统一定义在 ldbms 子包内\n一对一(后续), 一对多, 多对多关系验证\n‍\n# 图书 Book ‍\n关系\n与书架 多对一 与借阅 一对一 ‍\n基础字段\nid name 名称 type 类型 author 作者 price 价格 publish 出版商 summary 概要 ‍\n动态字段\nstorage_num 存在馆内数量 total_num 总计数量 ‍\n链接字段\nshelf_id 书架 id borrow_id 借阅 id ‍\n‍\n# 读者 Reader ‍\n关系\n与借阅 一对多 ‍\n基础字段\nid name 姓名 sex 性别 ‍\n动态字段\nborrowing_num 借到的书数量 borrowed_num 总计借到的数量 ‍\n链接字段\nborrow_id 借阅 id ‍\n‍\n# 借阅 Borrow [|] 中间表\n‍\n关系\n与读者 多对一 与书本 一对一 ‍\n基础字段\nid name 名称(填充) ‍\n链接字段\nbook_id 书本 id reader_id 读者 id ‍\n‍\n‍\n# 书架 Shelf ‍\n关系\n与书籍 一对多 ‍\n基础字段\nid name 名称 ‍\n动态字段\nstorage 存储书籍数量 ‍ ‍\n链接字段\nbook_id 书本 id # 代码 咳咳咳, 这个大概是不能碰的滑梯\n","permalink":"https://spadektlsg.github.io/p/trantor-demo-ldbms4trantor/","tags":[],"title":"Trantor Demo LDBMS4Trantor"},{"categories":[],"contents":"‍\n观察走廊拐角垃圾桶和花盆引发的思考 - 智能 HashMap 狂想曲\n‍ 上班时候的小脑洞 ‍\n# 灵感 某公司在一个大平层, 走道靠近墙角处一定有摆放垃圾桶或者花盆这样的阻碍物, 经过休息时间的实地模拟发现: 这可以降低相向而行的两人在视线盲区发生转角碰撞的概率\n‍\n\u0026ldquo;也许可以类似这样设计 HashMap 中哈希冲突的预防方案? 设置一个导流的标志位? 根据当前 HashMap 的部分区块的拥挤程度进行灵活的判断?\u0026rdquo;\n‍\n‍\n# 场景 那么, 来假设这样的画面: 将一个初始化的全空的 HashMap 平均划分为 8 个区间(设计划分密度为 23, 可以说设置密度参数为 3) ;当然 HashMap 是会扩容的, 因此这个区间的端点也要每次获得 length 然后计算出来更新\n‍\nhashMap : 0 |________|________|________|________|________|________|________|________| N 在这个情境下, \u0026ldquo;转角碰撞\u0026rdquo; 意味着: 两个实体在致盲效果影响下进入了不好的位置. 也就是可以解释为发生了哈希碰撞 (不知道那里有人, 还是冲过去了, 撞了)\n|________|________|________|________|________|________|________|________| | 玄 | 桃 如图是一般情况(JDK1.8/plus, 前 8(默认)是 Key 蜈蚣链表), 在这时候可以做些小动作了, 在区间摆放\u0026quot;垃圾桶\u0026quot;或者\u0026quot;花盆\u0026quot;?\n[X] [X] |________|________|________|________|________|________|________|________| | 玄 | 桃 这里的意思就是\u0026quot;看到花盆或者垃圾桶, 人会下意识绕开\u0026quot;, 假设这个区间已经被打上了\u0026quot;有冲撞\u0026quot;的标记, 那么下次再进来被放进这个区间的概率就会小了.\n但是怎么做呢?\n我想了几个点子, 抛砖引玉\n‍\n‍\n‍\n# 版本 ‍\n‍\n‍\n# V1 subList + HashCode 歪把映射 简单想到的是维护一个记录垃圾桶和区间 sub-List, 当生成了 hashCode 的时候额外加一些逻辑: \u0026ldquo;当我要去的区间已经被摆放了垃圾桶, 我就取一个更新的(加上参数的)哈希码 (当然, 从底层来说哈希码是固定死的, 意味着需要额外封一层), 再判断几次(这个参数可以调)\u0026rdquo;\n当然如果要更加智能的话就要用其他东西来换了, 性能什么的, 再维护一个 subHashMap 也是一样的道理.\n‍\n可是这个是一个静态的情况, 如何动态的修改这个垃圾桶的摆放呢? 需要加东西了.\n[X] [X] [X] [X] |________|________|________|________|________|________|________|________| | | 玄 小 | | 桃 丑 例如同时在多个地方发生了哈希碰撞, 单一层级的垃圾桶显然就不行了, 只能在那里把垃圾桶和花盆倒的到处都是?\n‍\n‍\n‍\n# V2 subList + HashCode 歪把映射 + 多级垃圾分类 + 自动垃圾桶生成 [X] [X] [X] [X] [X] [X] [X] [X] [X] |________|________|________|________|________|________|________|________| | | | 玄 小 一 | | | 桃 丑 心 | | K 先 每次发生冲突了, 就在这个区间旁边叠加一层垃圾桶, 优先把新的 Key 放到垃圾桶数量少的区间去.\n‍\n可是要是删除了这些产生冲突的对象了之后, 要不要连带把放置的垃圾桶丢出去呢? 如果要, 那怎么做? 扫描一遍? nonono 还是用第二个 subList 存放哈希冲突产生的位置吧, 让其周围的层数减一即可\n(这个可以当成是一个特性, 没有作删除的时候就不需要这个插件)\n‍\n如此看来似乎可行, 但是为什么要这么做呢? 希望尽可能减少哈希冲突的可能性.\n从性能上来看, 加装这么一整套逻辑(自己手写 hashMap)肯定在修改这个 HashMap 的时候带来性能上的压力, 需要维护一个 subList, 还要在插入和删除前后都进行维护. 显然, 客户需要的是\u0026quot;少冲突的高性能查询式 HashMap\u0026quot;, 这个能否满足需求呢?\n应该拿一个空白对照, 1K 条, 10K 条 等情况进行插入 HashMap 操作, 最后看看 HashMap 的冲突概率是多少(不知道怎么方便看这个), 多次测量取平均值. 理论上讲肯定加了智能组件的 HashMap 一定比原生的更加平均一些, 碰撞少些.\n‍\n‍\n‍\n# V3 区间记录 subListA + HashCode 镜面映射 + 无级权重值 subListB + 插件式 + 优先队列 + 重映射 + 多线程优化 + 缓存优化 ‍\n还是不够抽象!还是没有跳出花盆-垃圾桶的实质!\n我觉得这是一种惩罚机制, 循规蹈矩有奖励, 逾规越矩有惩罚. 那既然都上了一个 subList 了, 不如直接把一整个区间记录下来, 同时记录对应的权重, 其他的思路和上面相同\n(当然说是插件, 事实上为了方便写的时候直接自己手写新的好了, 感觉不要去调教已经有的代码比较好罢)\n‍\n初始化 - 启动初始化插件 区间数量-\u0026gt;subList * 2, 还要初始化各个参数等元件\n插入 Map - 启动 Add 插件\n正常按照 JDK Map 计算 HashCode\n提前拿到要插入的位置, 查表找到对应的区间\n查表看看\u0026quot;适合不适合\u0026quot;插入 (需要排序)\n可以使用优先队列维护, 每次修改区间的权重的时候按照升序排列, 找到一定阈值就不找了, 认为该次插入非法]\n适合, 插入\n不适合, 更换 HashCode 再尝试 X 次插入 (X 参数也需要设置), 否则摆烂就地掩埋\n直接随机加上 33% * 区间个数 的区间长度, 到达一个任意区间的\u0026quot;同样\u0026quot;位置 加上 区间长度 L\u0026rsquo; * N 切换到最适合插入的区间(需要上述优先队列)的\u0026quot;同样\u0026quot;位置. (可选) 插入的时候, 还要判断是不是发生冲突了, 如果发生需要大量惩罚! 没冲突只给少量惩罚 (大概的区分应该是 k 级别的). 判断就用对应位置指针移动次数来判断(造轮子)\n如果触发扩容 (size != size_before), 需要更新 subListA 区间范围\n开始查询 Map - 启动 Select 插件\n正常按照 JDK Map 计算 HashCode\n继续查找 \u0026ldquo;对应位置\u0026rdquo;\n找到\n找不到, 按照上面的歪把子方案(重映射方案)发起 多线程查找 同一位置在不同区间 的所有替身位置, 找到返回对象\n缓存优化: 不简单直接返回对象, 而是包装好 真实的 KV 到一个歪把子查询缓存, 其大小和更新周期可以自定义, 初步可委托 Redis 实现 开始修改 Map - 启动 Update 插件\n找到 | 调用 Select 插件 修改 退出 开始删除 Map - 启动 Delete 插件\n找到 | 调用 Select 插件\n修改, 更新记录值\n如果是一个产生 \u0026ldquo;垃圾桶\u0026rdquo; (惩罚值)的对象, 减少大量惩罚 (通过指针移动的次数判断是不是进入冲突区域了) 如果只是基础对象, 减少少量惩罚 退出\n余下使用基础实现\n‍\nJava 没有指针特性, 上面提的指针移动这个概念是 \u0026ldquo;找到对应 K 之后往下搜寻想要的 V 的过程\u0026rdquo;\n‍\n‍\n# V4 吃了饭再想, 累了 ‍\n‍\n‍\n# 设计 详细的设计\n‍\n‍\n‍\n‍\n# 实现 代码实现\nGithub\n‍\n‍\n‍\n‍\n‍\n# 结尾 ‍\n之前没有接触过相关知识点, 可以说靠自己取得的这个尤里卡, 当然肯定是有大佬想过了\n没测试过, 没写, 还在构思阶段. 有无大手子给点建议\n此文档持续更新\n‍\n‍\n‍\n‍\n2024-07-19\n在搬砖的玄桃 K\n‍\n","permalink":"https://spadektlsg.github.io/p/%E6%8B%90%E8%A7%92%E5%9E%83%E5%9C%BE%E6%A1%B6%E8%8A%B1%E7%9B%86-%E6%99%BA%E8%83%BDhashmap%E7%8B%82%E6%83%B3%E6%9B%B2/","tags":[],"title":"拐角垃圾桶花盆 智能HashMap狂想曲"},{"categories":[],"contents":"2024-07-18 by SpadeKTLSG [仅内部使用]\n‍ 公司内部框架 demo 本地搭建失败记录\n‍\n# 1 配置 Java 参考文档\n已经通过应用形式安装了 Java, 但是在终端没有显示, 说明没有配环境变量\n‍\n使用的 Java 位置\n‍\n通过以下命令查看 JDK 安装路径\n$ /usr/libexec/java_home -V /Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/ JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/ PATH=$JAVA_HOME/bin:$PATH: CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JAVA_HOME export PATH export CLASSPATH ‍\n编辑.bash_profile 配置文件。\nvim ~/.bash_profile ‍\n验证\necho $JAVA_HOME ‍\n‍\n# 2 安装 HomeBrew 安装工具 MAC 需要使用下载器 HomeBrew, 类似所谓的 yum / apt-get in Linux(ubantu)\n‍\n报错记录: 去/usr/local/ 清理之前留下来的目录, 有可能因为权限原因导致无法安装, 需要手动赋予权限或者 sudo su root 小连招\n‍\n最后还是用了安装包(也可以镜像), 否则太慢了\nRelease 4.3.9 · Homebrew/brew (github.com)\n‍\n‍\n# 3 安装 docker [坑点] ‍\n使用已经准备好的安装包(当时没有 VPN 连接 Github, 因此使用手机下载), 其带有控制面板\n使用 Github 登录一直失败, 说明系统代理仍然设置有误, 问题归因我本人占 30%, MAC 系统占 15%, 代理软件占 35%, Docker 占 20%\n调整 docker 宿主机的资源大小仅能保障 docker 有 4G 2C 的资源, 因为我滴电脑又耗电又卡, 现在已经是极限了\n‍\n‍\n版本 - 当前版本\nspadek@spadekdeMacBook-Pro ~ % docker --version Docker version 26.1.4, build 5650f9b spadek@spadekdeMacBook-Pro ~ % docker-compose --version Docker Compose version v2.27.1-desktop.1 这里可以看到, 我下的最新的 Docker Version 是 26.1.4, Compose V 2.27.1, 都是高版本的, 和 21 年文档撰写时候已经差了很多个版本了\n‍\n之后在启动 trantor 时候遇到了报错. (见倒数第二个标题)\n‍\n当时为什么不试试 Docker 旧版本呢? 因为根本找不到资源, 电脑新装的我以为不让装 VPN, 好几次了 VPN 也装不上, 没反应, 自己的资源仓库也找不到\u0026hellip; 所以只能暂时这样了\n‍\n# 卸载 Docker 打算重新安装 Docker, 全部采用 21 年的版本, 从阿里云的镜像下了一个古早的 21 年版本, 应该是可以解决这个问题了. 就是反复安装 Docker 不知道会不会有问题, 会导致注册表出问题这样的(这类虚拟资源相关的软件一般都非常和系统强绑定, 很难简单的删除干净, 例如 Win 版的虚拟机, VMware 就是这样的, 很难完全卸载干净) 为了避免出现其他问题影响, 我另外学习了查找参与目录的方法, 已经定位到了\n自带的卸载还算人性化, 至少人家给你下载按钮了对不对\u0026hellip; 但是效果一言难尽, 还剩下了一些中间组件和 tmp 文件没有被清理, 不得不去系统里面按照教程一个一个删了.\n需要从 Applications Scripts 文件夹、Caches 文件夹、Containers 文件夹等中手动删除这些 Docker 剩余文件\n之前的链接大部分都过期了, 现在还有一个方法, 就是手动降低 Docker 的内核, 或许能行, 能够规避对 Trantor 应用的大写屏蔽问题. 但是看他们的介绍说还是太难了, 很多坑点, 再看看安装包吧.\n因为这个 Trantor 看来是和 Docker 绑定了, 感觉找不到替代品, 也不能手动部署, 只能按照这个来, 确实太难办了, 找不到好的安装包是个很大的问题\n就算使用 brew 看起来也是很难顶的方法, 需要走这样的一个流程:\n工具 - brew install 安装指定版本软件（protobuf 为例） - 简书 (jianshu.com)\n因此只能试试到时候手动降级了, 这已经是我第三次下载安装 Docker 了(之前为什么没有卸载的记录? 是因为之前都是重装系统, 所以不用考虑这个问题)\n‍\n‍\n# 非正常安装 Docker 先装一个 wget, 然后曲线下载 yum 进行内核降级\n试一下行不行, 如果不行就反馈一下, 换一种 demo 形式好了\n‍\n这个 homebrew 的下载速度也是太捉急了, 明明开了全局代理还是没代上的感觉. 而且也是一环扣一环, 因为是全新机子, 没什么依赖包, 50kb/s 感觉要下一整天了啊.\n‍\n效益太低了, 我发现很可能最后会在版本仓库里找不到对应的版本号, 因此可以宣布失败了. 网络连通性也不好保障, 很可能下一小时能下, 但是中途没有断点续传(尝试过了, 没有下载缓存和续传)\n因此收效太低了, 看看还有没有替代的 Demo, 反正 Demo 项目等都是一个过程, 最终的目的就是了解项目和架构, 不需要拘泥于形式\n‍\n‍\n# 周边 Docker 停服后镜像使用:\n{ \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://ustc-edu-cn.mirror.aliyuncs.com/\u0026#34;, \u0026#34;https://ccr.ccs.tencentyun.com/\u0026#34;, \u0026#34;https://docker.m.daocloud.io/\u0026#34; ] } 重启 docker sudo service docker restart​\n‍\n‍\n‍\n# 4 安装 Trantor 套件 安装 Trantor CLI （依次执行）\nbrew tap TerminusHQ/trantor brew install trantor ‍\n‍\n# 更新系统命令行工具 报错\nError: Your Command Line Tools are too outdated. Update them from Software Update in System Settings. If that doesn\u0026#39;t show you any updates, run: sudo rm -rf /Library/Developer/CommandLineTools sudo xcode-select --install Alternatively, manually download them from: https://developer.apple.com/download/all/. You should download the Command Line Tools for Xcode 15.4. 参考:\nHomebrew: Your Command Line Tools are too outdated - CoadyTech\n‍\n‍\n# 成果 在 Terminal 中运行 CLI , 看是否正常\ntrantor --version 效果, 2022 的版本\nCli Version: 1.0.2.RELEASE Build Time: 2022-08-04 09:57:59 ‍\n配置 Host, mac 下暂时不会添加 host, 需自行添加\n127.0.0.1 trantor.terminus.io 已配置\n‍\n‍\n# 维护方法 ‍\n# 升级 MacOS 下执行:\nbrew upgrade trantor ‍\n# 卸载 MacOS 下执行:\nbrew untap TerminusHQ/trantor brew uninstall trantor ‍\n# 5 启动 Trantor [报错] 1.0 后，所有命令加上 platform\ntrantor platform run 1.0 ‍\n找一个好版本\n0.11 0.13 0.14 0.17 0.17.112 0.18 0.20 0.21 0.22 0.9 1.0 1.0.24 1.0.7 1.0.8 1.3 standalone ‍\n报错是这样的, 要求工件(对象)的名称必须是合法的(没有大写等奇怪东西)\ninvalid project name \u0026#34;0.18\u0026#34;: must consist only of lowercase alphanumeric characters, hyphens, and underscores as well as start with a letter or number 之后就是 Docker Compose 一直停止响应, 只差一步了, 没想到结果还是全部木大.\n‍\n‍\n# 问题分析 ‍\n整体评价: 下载安装运行环境十分煎熬, 需要解决各种报错, 还要应付各种各样的网络环境问题\n‍\n尝试一下更换版本进行拉取, 文档太不给力了, 我不得不手动进入端点的 DevApp 空间进行翻阅: 主页 · Erda, 这个页面响应能力很拉胯. 应该就是这个仓库吧\n还有这样的报错: 远程仓库不存在了已经, 在 Erda 的 DevOps 平台中么有相关的资源, 因此无法拉取镜像\n找到了合适的版本后又出问题, 因为没有权限访问的原因, 拉不下代码, 开了 VPN 也不太行, 可能要重启试一试吧. 重启后能有权限了, 但是升级版的 docker 有一个毛病, 不接受数字或者大写字母开头的项目命名, 因此公司的文档可以说是过时了, 我开始找办法关闭这个docker-compose​ 的特性, 或者重装一个低版本 Docker 来解决问题\n‍\n已知的阻塞问题就是名称非法, 在这个 issue 中提到了, 是 Docker Compose 的更新导致的\ndocker compose restricts project name, where the spec does not · Issue #9741 · docker/compose (github.com)\n‍\n对应的相关版本页面: Release v2.5.1 · docker/compose (github.com)\n暂时找不到对应早于这个版本的 Docker Desktop, 并且暂时没有能力通过其他手段进行 Docker 降级, 因此卡柱了.\n‍\n(流程在上面安装 docker 那里)\n‍\n# 后续 ‍\n优先看看有没有可以替代 Demo 的思维路径来熟悉项目, 并先反馈了文档存在的问题 (coming)\n‍\n有了一个灵感, 可以从当前的 Erda 页面下载最新的 Docker 配置, 但是我认为这样的可靠性仍然太低了, 毕竟是脱离文档的手动操作, 只能存档备用了\n不到万不得已我不会尝试这种方法\n可能的手册 [转]docker compose 配置文件 .yml 全面指南 - dirgo - 博客园 (cnblogs.com) 资源地址(需要 VPN 权限) 应用 · Erda ‍\n这个事态关闭于以下情况:\n其他方式逐渐熟悉了 Trantor 找到了合适的安装包镜像, 做 demo \u0026hellip; ‍\n2024-09-17 Trantor 入门毕业, 事态关闭\n‍\n真是太坎坷了\n","permalink":"https://spadektlsg.github.io/p/%E6%9C%AC%E5%9C%B0trantor-demo%E6%90%AD%E5%BB%BA%E5%A4%B1%E8%B4%A5%E8%AE%B0%E5%BD%95/","tags":[],"title":"本地Trantor Demo搭建失败记录"},{"categories":[],"contents":" # 苦涩失败者 \u0026raquo; Hello Nowcoder # 打油诗付 初九夜书勃兰登保桑拿房 落榜艺术生SK（作）\n自学找挖小牛马, 鸡鸣抠顶三更罢.\n四飞学历无人赏, 破败简历处处藏.\n（* 赏析见文末）\n# Hello Nowcoder 你好, 我是玄桃K - SpadeKTLSG. 温两碗酒, 要一个秋招前的实习.\n# 旧日 还记得2个月前自己眼高手低了, 敲锣打鼓梭哈暑期实习, 心想0实习0竞赛但不冲大厂中厂后端总能拿下罢? 但当我真正爬出襁褓后才发现, 我的水平实在差大伙的太远了. 并且我的知识体系在快速腐烂, 思维花园一时间呈现草盛豆苗稀的\u0026quot;勃勃生机\u0026quot;. 于是我只得重新集结力量, 以期在下一跳反向进攻到更好的战术位置.\n当我灰头土脸的爬上原先遥不可及的屎山山顶, 抬眼却发现山的那边还是山: 我的水平不够cover我所写可笑简历, 八股也没怎么系统背. 自己虽说有大几十k独立整理好的知识体系, 但对现在通货膨胀的八股来说基本不够看的, 全部木大 \u0026ndash; 每当我打开牛油们的面筋, 问题的飞镖总是插在我\u0026quot;知识圆圈外面的荒地\u0026quot;.\n# 当下 我也许将不得不接受苦涩和平之事实: 一个月, 我只有35天的时间了. 在那之后我就会被kick out, 各种含义上. 若是以前, 每当期末时候我总是怀着雀跃的心情, 但唯独这最后一次期末让我绝对不想这么快面对 \u0026ndash; 不时因梦中返家列车上自己狰狞的笑脸惊厥.\n我真的很害怕 \u0026ndash; 怕所谓 \u0026ldquo;复活赛大败北\u0026rdquo; 后一地鸡毛的惨状: \u0026ldquo;他们\u0026quot;又可以拿\u0026quot;为什么不和我学医\u0026rdquo;,\u0026ldquo;早点考编考公\u0026quot;对我狠狠输出了. 还有天价的梅福券要我不得不用我的肉体偿还\u0026hellip;\n但我是绝对不会低头的. 我非常重视我的承诺: 会赢的, 我会拿到一个实习敲门砖的, 一切交给我\u0026hellip;\u0026hellip;\n# 评价 身边大伙一直在劝我, 赶紧出手罢, 如果是你的话绝对能找到的. 但我就是汤暖暖的下不了 这 个 手 啊! 我是真的缺少时间(把你大二在自习室偷偷推Gal摸鱼的时间拿出来啊魂淡?!!!!!) 哪怕闭关我缺的东西现在看来还是确实多, 例如鸽了八个月的\u0026quot;计算机网络征服作战\u0026rdquo;, 例如\u0026quot;没头脑的并发编程\u0026quot; , 还有就是面经和项目了\u0026hellip; 评价为完美主义的囚徒, 我喜欢微操\u0026quot; 这里要不要加个空格美观点\u0026quot; 或是 \u0026ldquo;天气热了, 代码段中空几行\u0026rdquo; 这样的琐事, 不这样还真不行了是吧玄桃K?! 甚矣, 吾之不慧.\n不行, 再写下去图书馆就要关门了, 还是收个尾罢. 下面是我的简历v 0.0.1SNAPSHOT, 也知道很烂了, 就当给自己悲剧的大学生活画上一个句号罢.\n# 诗歌赏析 找挖：JAVA，通爪哇。意思是写代码要寻找并挖掘\n牛马：牛群与马群。意指当牛作马的slave\n鸡鸣：夜间3-4时，或称5-6时。按context，应该是指作者6时（起床）\n抠顶：coding，通扣腚，指写代码需要抠破头顶（脱发）\u0026amp;暴扣大腚（发胖）\n三更罢：（一直到）晚上11点停止\n四飞学历：原义 需要从家到学校飞行四次程度的学历，这里应该是“四非学历”，指bg拉胯。也可指是是非非\n破败：破烂且失败\n处处藏：处处躲藏，反应作者对自己简历的不自信\n# 关于简历 (当然一些点的语句是可以改的, 例如JVM其实我会更多内容, 去年就完整学完了, 自觉学懂了, 只是暂时没精细处理)\n然而就在我回到家之后, 家里灯突然一闪一闪的, 灭了. 当天晚上是在黑暗中度过的. 第二天师傅来看是灯管烧了. 这就是我的惨淡命运吗? 灯管寄过来还要好几天, 这下好了.\n已经确认的修改建议:\n简历修改建议队列: 加粗太多了, 重点; 四级成绩去掉, 只留六级(38度烤的), 加粗.\n废纸.png\n下面是我的简历 v 0.0.1SNAPSHOT\n# Link (看我干吗? 去我的牛客啊)\n","permalink":"https://spadektlsg.github.io/p/%E8%8B%A6%E6%B6%A9%E5%A4%B1%E8%B4%A5%E8%80%85hellonowcoder/","tags":[],"title":"苦涩失败者HelloNowcoder"},{"categories":[],"contents":"‍\n本人第二代博客 零号机 搭建纪实 此文档已完结^（使用思域笔记完成）^\n可作为搭建个人博客参考, 但不保证完全符合需求\n搭建于 Apr. 2024 Hugo-ex版本 v0.125.3\n‍\n# Header 第一代博客: CSDN (旧日文章已废弃)\n第二代博客: Github 托管自动化双仓库部署, 无域名完全省心白嫖 GithubPage + Hugo + Stack\n‍\n‍\n# 配置要求 ‍\n个人配置\n个人PC全套开发环境IDEA(图形化Git工具) + Github(完整关联) + Google等平台账号 + 流畅代理机场 + 50M宽带网络 + 潮湿度高的脑子 + Github/Microsoft学生认证 + 0 Money\n‍\n最低配置\n代理机场, 大概只有这个是刚需, 或者你有流畅访问Github的方法\n(没有这个的, 在具体资源下不了的地方找对应镜像手动下载, 这里不提供)\n‍\n‍\n# 适合对象 ‍\n你受够了XXDN的无限制广告战吗? 你讨厌Qzonx的糟糕审核吗? 你疲倦于自建服务器的繁琐吗? 你想要白嫖一个可以用来当哔哔空间的博客吗?\u0026hellip;\n很好, 你被选中了! 请继续往下看\u0026hellip;\n‍\n‍\n# 基础篇 ‍\n# 前期工作 ‍\n# 目标 ‍\n# 双库解耦 一个用来管理整个Hugo生产仓库 - 私有工厂仓库(存放API信息等敏感内容), 一个用来管理Hugo生成内容(Page) - 公有GithubPage仓库\n‍\n‍\n# 简化流程 Hugo的一次将推送触发开关, 让Github对生成仓库进行自动构建, 更新Page内容 (基础目标)\n使用笔记软件的内嵌代码段进一步简化流程(进阶目标)\n‍\n‍\n# 基本架构 Hugo + Stack theme (Win10)\n‍\n‍\n# 未来目标 除需要具有基础功能(写文章)外, 可能需要配置阿里云OSS等图床应用, 目前暂时嵌入资源文件(我基本是纯文字, 没有图片的), 可能采用一些简单图床应用\n(敬请期待)\n‍\n‍\n# 要点 自动化Hugo编译\n指准备好md文件后, 需要将其移入对应位置后执行命令进行生产(命令行操作)\n自动化Page仓库操作\n要手动将生成的网页上传到对应仓库\n简单静态资源管理\n暂时不碍事(个人), 但是未来一定需要, 可以暂时塞到资源文件夹里, 因为我的笔记一般没有插入图片, 有也是引用形式的\n低维护成本\n经济成本基本为0, 但是要注意心智成本以及本地结构成本, \u0026ldquo;心智能量币维护费\u0026rdquo;\n便携\n存档Github仓库, 换电脑只需要下载仓库, 安装前置工具后即可使用\n‍\n‍\n# 本地结构 本人首先在专门划定的代码文件夹的Backup文件目录创建Blog子文件夹, 之后在对应子目录Factory​进行Hugo主体的创建\n目录不能有中文\n‍\n‍\n# 工具安装 路径: Chocolatey -\u0026gt; Hugo -\u0026gt; Blog\n‍\n# Chocolatey ‍\nWin10平台安装\npowershell -NoProfile -ExecutionPolicy unrestricted -Command \u0026#34;iex ((new-object net.webclient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;))\u0026#34; 安装完毕后开新实例\nSET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin ‍\n# Hugo 需要Hugo-extended\nchoco install hugo-extended 验证\nhugo version ‍\n‍\n# Git ‍\n# 安装初始化 ==这里不赘述==\n‍\n# 公钥绑定 ==这里不赘述==\nIDEA这种IDE会帮助设置你的Git的user.name等属性, 平常用着用着就给你配好了, 很省事\n‍\n‍\n# 验证配置 ‍\nssh一下github, 给你鉴权\nssh -T git@github.com 期望返回结果\nsuccessfully authenticated\n‍\n‍\n查看git 配置\ngit config --list 期望返回结果\nuser.name=SpadeKTLSG\nuser.email=spadekxcwxtlsg@gmail.com\n‍\n‍\n# 项目搭建 ‍\n# BlogFactory初始化 ‍\n进入Bolg目录cmd, 创建BlogFactory私有仓库\nhugo new site BlogFactory ‍\n这里控制台也有给一些参考路径\nJust a few more steps... 1. Change the current directory to D:\\CODE\\Backup\\Blog\\BlogFactory. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. ‍\n进入BlogFactory就能看到目录结构\n‍\n‍\n# 基础结构 ​content​ 是博客读取的各类页面所在的目录，包括主页面（主页、关于、存档等这种大类）和博文 ​layouts​ 博客网站的布局文件 ​static​ 静态内容 ​themes​ 用于存放博客主题 ​config.toml​ 配置文件 ‍\n初始化当前目录中的空 Git 存储库\ngit init ‍\n安装我选择的Stack主题, 代理我要开TUN模式(Clash)\ngit submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 格式, 需要存到目录中的themes文件夹\ngit submodule add \u0026lt;https\u0026gt; themes/\u0026lt;themename\u0026gt; ‍\n启动 Hugo 服务器, 访问 http://localhost:1313/\nhugo server 这里显示是空的页面, 因为没有引入theme\n快速渲染模式，你在代码中进行的改动，只要一保存，就会直接刷新在站点上\n‍\n之后, 在BolgFactory的hugo.toml中加入\ntheme = \u0026#39;hugo-theme-stack\u0026#39; 就能看到示例页面了, 但是这个配置文件东西还是太少了, 于是直接把themes\\hugo-theme-stack\\exampleSite​ 文件夹里面的配置文件hugo.yaml拿过来放到根目录, 同时删掉根目录的hugo.toml\n‍\n现在的\u0026lt;blog\u0026gt;​文件夹里的默认配置文件是hugo.toml​，而一般的exampleSite​里的配置文件一般是config.toml​和config.yaml​，而一个网站只能有一个配置文件，且这三种文件名都是可以的\n‍\n‍\n# 配置项 基础配置选项, 可以先鼓捣一下\n‍\n​baseurl​ 域名 ​paginate​ 主页一页显示几篇博文 ​title​ 博客的主名 ​languages​ 多语言设置，没错，Hugo 是原生支持多语言的。一般来说，保留中英双语已经很够。本文以中英双语为例讲解。 ​DefaultContentLanguage​ 博客的默认语言。若设置为中文（zh-cn​），则所有被读取的 index.md​ 都会被认为是中文环境下的内容，英文就会空缺。此时你需要额外创建同名的英文文件，比如 index.en.md​，如此填补位置。 ​hasCJKLanguage​ 如果默认语言设置为中文，这里应改为 true​ ​mainSections​ 原本是 post​，对应着 F:\\Blog\\content\\post​ 目录。若这里改，文件夹名也要改，两者是连锁的，否则读不到其中的内容物。 ​since​ 开始写博客的年份 ​customText​ 底部的一句个性化说明 ​published​ 文章发布日期的格式，默认的格式并不方便, 设置成 2006-01-02​ ​lastUpdated​ 同理可调整为 2006-01-02 15:04 CST​。 ​emoji​ 头像右下角的状态表情，留空就不显示 ​subtitle​ 博客副标题 ​avatar​ 下属的几条，分别是，是否启用、是否在本地、存储路径 ‍\n‍\n# 前期配置 ‍\nhugo.yml配置一些基础名字\n‍\n‍\n# 写作生成页面流程 ‍\n写文, 别忘了末尾加上md, 不然就会报不知道什么类型​的错\n‍\nfolder = post\nhugo new [folder]/FILEname.md 默认是post中才会生效(见配置), 在[folder]对应目录下找到对应文件\n设置文件有设置项可设置文章识别位置, 当然不建议改, 后面还有tag这类目录要存放\n‍\n启动server观察情况, -D表示显示 draft 为 true 的草稿\nhugo server -D ‍\n观察到结果, 基础写作生成页面流程结束\n‍\n‍\n# BlogProduct初始化 新建仓库对应GithubPage, 为了符合规范采用账号命名 + 公开\n仓库名\nSpadeKTLSG.github.io ‍\n# 生成页面填充仓库 将hugo生成的public/目录下所有文件，剪切到本地仓库进行提交\n剪切而不是复制, 原因下面有\n‍\n‍\n# 部署GithubPage 这个产品仓库(公有)和前面的工厂仓库(私有)都同步Github\n命名注意同步可先选分支部署模式(不是Action, 而是手动部署)\n‍\n选择完提交完, 就能自动部署, 通过站点地址栏能访问, 那么一个基础实例就OK了\n‍\n链接大概长 -\u0026gt; 演示站点 (spadektlsg.github.io) 这样\n‍\n‍\n‍\n# 自动化赋能 这里主要参考双仓库模式Link, 个人需求提升更多解耦和隐私\n也可以选择单仓库双分支模式Link, 那样只有单仓库更方便管理\n‍\n# Github Token Token用来鉴权管理仓库\n到Github开发者设置配置里设置个人令牌 Personal access tokens, 选择 Generate new token\nNote中输入名称，在 Select scopes 选择 workflow\n‍\n我的名称 - 永久 (秘钥名称随意)\nBlogFactoryProductAutoKey\n选择作用域\n更新 GitHub 操作工作流程\n‍\n生成的token复制保存\nXXXXXaXXsssXuXDnXXXX \u0026lt;-假的 ‍\n回BlogFactory里面设置 -\u0026gt; Secrets -\u0026gt; Action -\u0026gt; repository secret New repository secret​\n‍\nname部分输入秘钥名称==(将在yml中设置)==, Secret部分输入刚才的个人令牌\n我直接用这个命名\nPERSONAL_TOKEN\n‍\n‍\n引述博主内容:\n​name​​的值不能以GITHUB_​​开头，否则创建会出错\n‍\n‍\n# BlogFactory Github Action 用来指定自动配置\n‍\n在hugo博客根目录下，创建放置Github Action配置文件的目录, 其中创建一个yml文件, 名称随意. 即为Github Action需要的工作流配置文件\n.github/workflows/main.yml ‍\n引述博主\n需要根据自己的情况修改配置参数(原参数不赘述)\nAction包含 4 个步骤\n拉取代码 准备 hugo 环境 使用 hugo 编译生成静态文件 把生成的静态文件发布到 Github Pages ‍\n‍\n‍\n# 个人配置参考 ‍\n‍\n重点对象\nname \u0026ndash;\u0026gt; BlogFactoryBuild 配置名随意\nhugo v0.125.3 \u0026ndash;\u0026gt; 查看自己版本 hugo version​ 获得\nPERSONAL_TOKEN \u0026ndash;\u0026gt; ==上面的名称==, 格式还是这里的 secrets. XXX​\n几个master分支名称看仔细了, 很可能和仓库的的main / master / XXX 分支名称不一样. 第一处是Factory仓库的监听分支, 第二处是目标Product发布分支\n‍\n具体内容可参考Github Action系列文档(附录)\nname: BlogFactoryBuild on: push: branches: - master jobs: build-deploy: runs-on: ubuntu-20.04 steps: - name: Check out source uses: actions/checkout@v2 - name: Setup hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.125.3\u0026#34; extended: true - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN}} external_repository: SpadeKTLSG.github.io publish_dir: ./public publish_branch: master ‍\n简单注释版\nname: BlogFactoryBuild # 配置名称 on: # 触发条件 push: # 推送事件触发 branches: # 需要在XXX分支 - master # Factory仓库的master分支 jobs: # 工作流 build-deploy: # 工作流名称 runs-on: ubuntu-20.04 # 运行环境(虚拟机) steps: # 步骤 # 拉取代码 - name: Check out source # 检出源码 uses: actions/checkout@v2 # 使用\u0026#34;工具\u0026#34; # 安装hugo - name: Setup hugo uses: peaceiris/actions-hugo@v2 with: # 配置参数 hugo-version: \u0026#34;0.125.3\u0026#34; # hugo版本 extended: true # 是否安装扩展版本, yes # 构建 - name: Build run: hugo # 执行hugo命令 # 部署 - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: # 配置参数 personal_token: ${{ secrets.PERSONAL_TOKEN }} # GitHub Token external_repository: SpadeKTLSG/SpadeKTLSG.github.io # 部署到的仓库, 用户名/仓库名 publish_dir: ./public # 部署目录 publish_branch: master # 部署分支 ‍\n‍\n# Action Settings 去GithubPage里面设置更新的方式, 需要改为Github Action\n‍\n在Factory新写一篇文章, 提交更改push\n等待奇迹发生\u0026hellip;\n‍\n‍\n‍\n‍\n# 实操 一些命令与操作记录\n‍\n‍\n# CRUD 由于有了附仓库操作, 完全不需要手动进行编译了, 好好好.\n我为了本地预览, 没有忽略本地的public\n‍\n# 写博客 hugo new post/NaMe 按照模板生成一个博客md文件\n‍\n# 脚本(+) 参考\n‍\n我简化了实现, 只要求输入文章, 其他不动\n@echo off echo [create one blog in post/XXX/Name] set /p input= 请输入标题, 如果存放到对应文件夹下, 可输入\u0026#34;media/Name\u0026#34; hugo new post/%input%.md pause ‍\n‍\n# 脚本写类别(+) 参考\n‍\n‍\n# 脚本写标签(+) 参考\n‍\n‍\n‍\n‍\n# 删博客 直接删, 不用管\n一般是要去清理下public防止垃圾片段影响, 但是见下文脚本清理\n‍\n‍\n# 改博客 VSCODE 或 笔记软件导入后修改导出覆盖, 见下文移花接木\n一般是new post/完后复制黏贴到里面, 但是有时候文章很长就很麻烦, 于是移花接木操作\n‍\n‍\n# 手动编译预览(×) hugo 但是这并不会 删除之前生成的文件, 因此如果进行了删除请清空一次目录再完整编译^（官网建议）^\n预览(带草稿)\nhugo server -D ‍\n# 脚本编译预览(√) 见下文脚本预览, 双击脚本即可查看\n这里是完整版\n@echo off echo [清理/public, 完整构建, 预览启动] del /s /q \u0026#34;.\\public\\*\u0026#34; for /d %%x in (.\\public\\*) do rd /s /q \u0026#34;%%x\u0026#34; echo [清理残余/public完毕] start http://localhost:1313/ hugo echo [hugo 完整构建完毕] hugo server -D echo [hugo 预览启动] pause ‍\n‍\n# 手动发布(×) public内文件复制到对应GithubPage仓库进行Commit + Push, 触发一次自动构建Page(可以查看进度)\n‍\n# 自动发布(√) Action联动双库\n使用上述自动化流程后, 直接IDEA无脑全选提交并推送, 坐等发布即可\n‍\n‍\n# 图片操作 ‍\n图片放入 static​ 目录下\nMarkdown 文件中以 /XXX.jpg​ 的路径引用\nHugo 会自动在图片路径前追加 static​ 的路径\n为了区分开不同文章的用图，还可以在 static​ 下新建子目录\n![XXX](/AAA/XXX.jpg) 我也不经常插入图片, 如果有也是用图床比较好, 方便后续引用, 不然就和这个地方强绑定了\n‍\n示例\n图片在static/sys/Good.png, 引用方法是\n![testPic](/sys/Good.png) ‍\n‍\n# Markdown操作 .md操作不赘述, 见个人其他文档\n‍\n‍\n# 注意 ‍\n‍\n生成md文章后不要动它们的基本层级(md文件的命名和位置), 不然会出乱子 ‍ ‍\n‍\n# 提高篇 ‍\n‍\n# 页面美化 官方手册指路\n配置主题 | Hugo 主题 Stack (stack-docs.netlify.app)\n‍\n# 标签 暂时没需要\n‍\n‍\n# 代码高亮 配置文件直接加, 高亮主题可去 Chroma Playground 找\n# 代码高亮 highlight: style: github ‍\n# 字数统计 暂时不需要, 简单黏贴了一点代码凑合着用\n‍\n‍\n# 稳定运行字段 见博主Link\n‍\n‍\n# 返回顶部 未来\n‍\n# 系统原理 ‍\n# 模板 引用\n用 hugo 来new而不能手动创建一个 .md​ 文件, 这是因为使用 hugo 创建会自动使用已填入 Front Matter​的模板\n​Front Matter​ 用于标识文章的标题、时间等信息，hugo 就是据此来生成静态页面。关于属性的含义和用法可以参考 Hugo 中文文档。\n模板可以在 \\archetypes\\default.md​ 下找到\n‍\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; # 标题，创建时自动填充 description: # 文章简介 date: {{ .Date }} # 日期，创建时自动填充，格式同2023-01-15T12:00:00+08:00 image: # 文章的封面，留空就是没有，填文章所在位置的相对地址，通常放在同目录下， math: # 是否启用KaTex，填true启用 license: # 文章尾部显示的协议，false为隐藏，其他作为内容，留空就是使用config.yaml里默认的 hidden: false # 是否隐藏，一般用不到 comments: true # 因为bug所以这个属性只要存在，不管是true还是false都会导致回复无法显示，需要删掉 draft: true # 是否为草稿，建议改为false或者删掉这个属性以防止忘记修改 --- ‍\ndefault\n我将draft改为false, 加一个image就可以了\n+++ title = \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; date = {{ .Date }} image = \u0026#39;/sys/defaultPage.png\u0026#39; draft = false +++ 如上, 这样也能使文章能带有图片头(放在static内分好目录, 按目录层级引用)\n‍\ncategories + tags\n有问题, 暂时不需要, 不做了\n‍\n‍\n‍\n‍\n# 域名装配 我暂时不想用其他域名, 虽然访问速度在身边人里基本是0, 但是这样也隔离掉一些别有用心的家伙. 就用Github也不用上防护措施了\n但是我确实在之前的日子里想要使用一下不需要付费的白嫖域名试试, 因为大多数是1年期限, 所有当时不想用. 现在正是用兵之时. 于是就开始鼓捣了\n‍\n‍\n# 失败Github认证踩坑记录 题外话\u0026hellip;\n‍\nGithub认证 - 域名资源类列表\nName.com:一年任意域名免费,SSL证书和隐私保护.\nNamecheap:一年.me域名免费,SSL证书.\n.TECH:一年.tech域名免费.\n‍\n# freenom 免费域名一直没有我的, 因此放弃. 其他两家注册太麻烦了, 于是直接用namecheap\n‍\n# Name.com 我试试填中国的地址行不行. 前面都好, 要付款时候自己银行卡遇到问题了, 因为自己只有一个可怜的农行储蓄卡, Google说不支持, 于是网站认证, 结果卡住了. 于是找找GooglePay能不能给我走点后门\u0026hellip;也不行只让美丽国人和汉斯用, 那我只能试试找其他人借一张没用的银行卡了, 尝试把谷歌支付搞定\n借了父亲的银联银行卡也不行, 原来绑卡需要的条件太苛刻了, 散了散了\n‍\n# Namecheap 又是烦人的这个东西: 大学不得到认可\n‍\n==我即使是死了，钉在棺材里了，也要在墓里，用这腐朽的声带喊出\u0026ndash;==\nXX带砖怎么了你? ‍\n我记得去年11月也是这样: 就算连接了github, 它也是无法连接到我的主账号邮箱, 明明都是一样的! 太凎了\nIt looks like your email is not associated with an eligible university\n‍\n‍\n# .TECH ‍\n全程不到3分钟, 直接到手, 不需要支付, 认证非常快\n拿到手了, 控制台很简陋, 可以配置DNS什么的. 按下不表\nspadektlsg.tech ‍\n那么关于域名的探索就暂时存档到这里, 没有白嫖的不要了\n被前面的域名拷打了之后, 立刻就到手的这玩意让我大为惊喜, 但后来发现要到了还不如不要, 浪费时间在那个就是一个草台玩意的控制面板\u0026hellip;各种连接CloudFlare失败\n‍\n# 域名配置 未来, 并且是遥远的未来\n主要是图省事罢\n‍\n‍\n# 功能模块 ‍\n# 评论 选择Giscus, 这个在Stack支持列表里面有\n官方文档 - 即时生成对应配置\n‍\n引用\n由 GitHub Discussions​ 驱动的评论系统，与GitHub Pages​有非常好的天然联结\n开源 无跟踪，无广告，永久免费 无需数据库。全部数据均储存在 GitHub Discussions​ 中 支持自定义主题 支持多种语言 高度可配置 自动从 GitHub​ 拉取新评论与编辑 可自建服务 ‍\n配置项目里可以看到基础的结构\ncomments: enabled: true # Enable comments globally provider: giscus giscus: repo: repoID: category: categoryID: mapping: lightTheme: darkTheme: reactionsEnabled: 1 emitMetadata: 0 ‍\n# 官方文档 运作\ngiscus 加载时，会使用 GitHub Discussions 搜索 API 根据选定的映射方式（如 URL、pathname​、\u0026lt;title\u0026gt;​ 等）来查找与当前页面关联的 discussion。如果找不到匹配的 discussion，giscus bot 就会在第一次有人留下评论或回应时自动创建一个 discussion。\n访客如果想要评论，必须按照 GitHub OAuth 流程授权 giscus app 代表他发布，或者可以直接在 GitHub Discussion 里评论。你可以在 GitHub 上管理评论。\n‍\n‍\n注意\n选择 giscus 连接到的仓库。请确保：\n该仓库是​**公开的**，否则访客将无法查看 discussion。 giscus app 已安装，否则访客将无法评论和回应。 Discussions 功能已在你的仓库中启用。 ‍\n# 流程 按照官方配置, 先开启discuss(设置面板往下拉), 再安装giscus(直接链接跳转), 显示成功！该仓库满足所有条件 ​则说明完成\n复制下方的片段, 稍加修改复制入配置文件\ndata-repo=\u0026#34;SpadeKTLSG/SpadeKTLSG.github.io\u0026#34; data-repo-id=\u0026#34;XXX\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;XXX\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;top\u0026#34; data-theme=\u0026#34;light\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; ‍\n我的测试完成的结果\ncomments: enabled: true # Enable comments globally provider: giscus giscus: repo: SpadeKTLSG/SpadeKTLSG.github.io repoID: R_kgDOLz5uXQ category: Announcements categoryID: DIC_kwDOLz5uXc4Ce_BV mapping: pathname lightTheme: 1 darkTheme: 1 reactionsEnabled: 1 emitMetadata: 0 ‍\n# 搜索 文章很少, 不搞了\n选用Github Gist for Fuse.js integration\n只需要增加一些文件和修改config.toml中的output格式\n具体参考引用: 博主Link, 这里只记录我的操作流程\n‍\n# 添加文件 在hugo项目根目录添加4个文件：content/search.md​,layouts/_default/search.html​, static/js/search.js​,layouts/_default/index.json​\n这种带有目录层级的文件搭建, 可以选用命令行, 不用的话可以用IDE实现, 例如IDEA/VSCODE这类都可\n‍\n# 修改配置文件 我的是从主题配置文件里抓下来的hugo.yaml, 因此格式不太一样, 需要自行转换 - YAML to TOML (transform.tools)\n‍\n添加以下内容\n已经存在 [outputs]​这项，就在home​中增加\u0026quot;JSON\u0026quot;​格式\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] outputs: home: - HTML - RSS - JSON 余下见博主文章\n‍\n‍\n‍\n# 访问统计 没什么人看, 不搞\n‍\n‍\n# 链接 社交链接, 友链等\n在配置文件里找到\nmenu: social: mailto链接\n‍\n‍\n‍\n‍\n# 资源管理 ‍\n‍\n# 图标 参考Link\n‍\n‍\n网上下载中意的图标后放到图标文件夹, 例如素材库\n然后放到assets/icon就可以用了\n‍\n‍\n# 上游下游 ‍\n# 笔记软件 ‍\n# 笔记软件自动化 具体参考其他博主的实例, 笔记软件可进一步简化从笔记软件写完文章之后到将md文档放入到hugo -\u0026gt; post/里面的效率, 实现自动化\n(内嵌js等内容)\n‍\n我暂时不需要, 因为我都是统一导出md操作, 并且希望留下中间产物发布其他地方的, 大部分文章也暂时不打算在博客发. 于是这个操作就有点不实用了\n‍\n‍\n# 博客管理客户端 指类似Github Desktop这种简化封装的博客应用, 适合摆烂\u0026hellip; 我暂时不用\nGridea | 一个静态博客写作客户端\n‍\n就好像面试官问你: 你平常操作Git, 是图形化界面多一点还是命令行多一点? 你肯定得回答: 我用命令行, 并且很熟练 (然后被拷打致死, 乐)\n‍\n‍\n# 流量 写博客是拿来干什么的? 拿来给人看! 嗨, 还真就这么一回事, 写完的文章确实就放那太不好了. 可是确实没人看啊 ;(\n‍\n我选择暂时无线电静默, 先把复活赛打赢了再说\n关于我的\u0026quot;复活赛\u0026quot;是什么, 如果你好奇, 请继续寻找线索\n‍\n‍\n‍\n‍\n# 附录 ‍\n‍\n# 二回熟 我拿到了一台新电脑\u0026hellip;工作环境和旧电脑完完全全相同(本人见另一篇博客 - PC主力机选择)\n‍\n# Chocolatey重来! powershell -NoProfile -ExecutionPolicy unrestricted -Command \u0026#34;iex ((new-object net.webclient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;))\u0026#34; 安装完毕后开新实例\nSET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin ‍\n# Hugo重来! 需要Hugo-extended\nchoco install hugo-extended hugo version ‍\n# Factory pull local IDEA图形化界面, 直接拉到二仙桥\n‍\n‍\n之后就是和上面一样操作了. 爽!\n‍\n‍\n# 踩坑 本人悲惨踩坑记录, 包括初号机内容(未公开 但是零号机文档已经包含其全部内容)\n‍\n‍\n# 注意自动化脚本分支名称 由于前一天的失败经历, 前面基础搭建流程还算顺利, 但是在自动化编辑文档时候看花了眼, 忘记自己的主分支都是master, 博主所用的是main, 花了1个小时调试才找到这个问题(平时都把main和master混用的后果, 被拷打了)\n‍\n# 注意gitignore 不要自作聪明把本地编译出来的public文件添加到忽略列表里, 否则自动生成的GithubPage啥都没有, 只有搞笑的XML页面\n‍\n# 收手吧阿伟 博客美化什么是次要的, 内容才是第一的, 搭建到提高篇前面我花了8h(从0开始, 算上之前的失败经历), 也许是太慢了. (因为找域名花了很久)\n‍\n# 设置文件配置 几个关键点小心再小心, 需要改的地方都指出来了\n‍\n# 删除文件后需要刷新一次 额外执行一次\nhugo 再上传\n‍\n# Toml \u0026lt;-\u0026gt; Yml 转化 本人后端牛马, 这个用的挺少, 不懂手撕, 于是常备转换器\u0026hellip; 不然报错多的头皮发麻\n‍\n# 系统CMD控制台需要开全局代理 + TUN模式才能稳定下载 反正我开全局还不够, 系统代理这里好像没有用, 要开TUN\n当时8KB/s 一边哭一边下, 一边哭一边下, 就是不肯退\n‍\n# 记得修改(魔改)配置之前提交 照着博主的内容魔改html前端的东西, 后端牛马可谓是对牛弹琴了, 改完了也不知道哪里错了, 这个时候才想起来忘记commit了, 或者是删除中间文件了, 就很难受\n‍\n# 暂时实现不了的别硬实现(摆), 下次再来 Tag和Categories实现失败, 不搞了, 反而在搞的时候触发了其他地方代码, 导致错误混杂无法定位了\n真丢人哇, 下次一定 : (\n‍\n‍\n# 成果 引述博主:\nGitHub Action，按工作流的配置自动生成静态页面文件，并推送到GitHub Pages仓库。而 GitHub Pages 仓库更新后，又会自动触发官方页面部署 CI，实现网站的自动发布\n就是自动化操作\n‍\n# 流程综合 哪怕用Github完成Action部署, 但还真是, 体力活. 于是想法子把流程简化下\n这部分基础篇提高篇通用, 于是移到附录\n‍\n‍\n# 移花接木式导入文章 个人情况, 默认文章很大不方便在笔记软件或IDEA中展示\n通过思源(我的笔记软件)写了一篇文章, 准备好了选择导出为md. 导出成功后鼠标移动到通知上在文件夹打开\n复制其名称\n之后打开IDEA, 在IDEA内置cmd中\nhugo new post/名称 留在IDEA中找到对应文件, 复制其预生成内容\n双击导出的md文件(默认用VSCODE打开), 预生成内容黏贴到导出的md的头部\n完成嵌入的自己文档直接拖拽到IDEA里面覆盖\nIDEA commit \u0026amp; push, 提交并推送\n‍\n(差不多20s)\n喝口水, 打开页面, 砰!好了\n‍\n‍\n‍\n# 脚本打包预览实现 如果要预览一下, 控制台还是很繁琐的, 于是借鉴了博主的批处理脚本程序\n根目录创建preview.bat\n@echo off echo 【preview ur blog】 start http://localhost:1313/ hugo server pause ‍\n同样我进行了优化, 创建了previewBest.bat, 用来一并查看草稿, 还创建了一键清理public + hugo + hugo server预览的流程\n‍\n但他们可能在IDEA等IDE中无法正常运行, 例如其没有提供bat支持, Intellij IDEA我装了插件Batch Scripts Support, 再加上Idea我配置的启动快捷键, Alt + V直接运行脚本, 自动清理public, 重新打包预览避免残留文件问题. 同时将浏览器类型留空, 即替换为默认浏览器\n于是我的最终配置 cleanBuildViewAll.bat 诞生!\n@echo off echo 【del all temp res in /public then preview ur blog with drafts show】 del /s /q \u0026#34;.\\public\\*\u0026#34; for /d %%x in (.\\public\\*) do rd /s /q \u0026#34;%%x\u0026#34; start http://localhost:1313/ hugo server -D pause ‍\n美化后\n@echo off echo [清理/public, 完整构建, 预览启动] del /s /q \u0026#34;.\\public\\*\u0026#34; for /d %%x in (.\\public\\*) do rd /s /q \u0026#34;%%x\u0026#34; echo [清理残余/public完毕] start http://localhost:1313/ hugo echo [hugo 完整构建完毕] hugo server -D echo [hugo 预览启动] pause ‍\n‍\n# 普通加强式导入文章 由上面所有基础篇高级篇内容整合, 现在写文到发布经历过程:\n(假设需要的文章已经导出为md躺着了)\n打开IDEA, 定位项目 (单击Win, 单击IDEA, 单击最近项目) * 3 脚本右键(双击运行) 写文, 输入标题目录 (平均敲键盘10下) * 12 复制写完文章的md内容到生成的文章, * 4 检查丢失的本地资源文件手动嵌入 ==(!)== (体力活, 还好我从不在笔记里插入本地图片, 都是超链接) * N 觉得差不多了, 脚本右键(双击运行) 运行, 查看 (自动打开页面, 浏览点击几次鼠标即可) * 2 关闭浏览器, IDEA图形化提交点几下提交并推送 (单击 \u0026ldquo;提交\u0026rdquo;, 单击 \u0026ldquo;全选\u0026rdquo;, 单击\u0026quot;提交并推送\u0026quot;, 单击\u0026quot;确定\u0026quot;) * 4 20s - 30s后打开页面, 看一眼跑路 *1 ‍\n共计单击键盘鼠标 25 + N 次\n‍\n# 所以\u0026hellip;? 太不直观了\u0026hellip;得想想办法变换一下这个概念\n‍\n等价交换^（偷换概念）^:\n让手机开始计时, 连续单击某经常坏的蓝牙静音鼠标左键达到28次停止, 平均时间约为5.3s\n打开赛博朋克2077, 植入螳螂刀 + Hunter式飞扑击杀一只杂兵需要\nW + shift冲刺 + ctrl突进 + space * 2 + 空中俯冲突进 + 左键蓄力放松螳螂刀坠击 + F斩杀 = 8次点击 也就是等于4个杂兵的生命\n‍\n于是经过优化的发送博客的时间成本就 == 5.3s的连续单击 == 4个杂兵, hmmm可以接受, 可以接受\n‍\n以上纯为扯淡, 总之我都是存着一段时间后再一起发, 那个时间段价值不高, 因此我不怎么在乎10s - 60s的差别, 能发就好, 能发就好(摆)\n‍\n‍\n# 工作环境 本地只需要下载一个BlogFactory仓库, 无需使用BlogProduct仓库(自动配置)\n说走就走, 仓库根目录留下这篇文档, 啥时候忘了就拿出来查查\u0026hellip;\n‍\n‍\n# 学到了什么 个人感受\n激动之情溢于言表, 让我冷静几天再来\u0026hellip;\n‍\n‍\n‍\n# 引用 所有借鉴内容, 部分在正文有明确提及, 统一表示感谢!\n‍\n基础篇\n快速入门 | Hugo官方文档 (opendocs.io) 如何在 Windows 系统从零开始构建一个和我一样的 Hugo 博客 (zexwoo.blog) 无需付费 GitHub Pages，轻松搭建个人博客 - 掘金 (juejin.cn) 用Github和Cloudflare自建博客 - 掘金 (juejin.cn) 怎么利用 GitHub 绑定域名来做一个网站？ « 复网问答 (fuyeor.com) GitHub学生包白嫖Jetbrains全家桶等权益(福利) - 糖果梦博客 (xiaoma.cool) GitHub Student Developer Pack - GitHub Education Hugo 博客写作最佳实践 - 知乎 (zhihu.com) 建站第九篇 Hugo+Github Pages+Github Action博客方案之一——使用Hugo搭建个人博客 | DD299的博客 | DD299 Blog (goodfun.me) (三部曲) + 合集 Hugo | DD299的博客 | DD299 Blog (goodfun.me) 使用 Hugo + Github 搭建个人博客 - 知乎 (zhihu.com) 从零开始的 Hugo 博客搭建 - 知乎 (zhihu.com) 在github.io用hugo部署个人博客，2023新教程 - 知乎 (zhihu.com) GitHub Actions入门教程-自动部署静态博客 - 知乎 (zhihu.com) 可以看看Github Action ‍\n提高篇\n建站第十二篇 Hugo博客使用giscus作为评论系统 | DD299的博客 | DD299 Blog (goodfun.me) 用 Hugo 重新搭建博客 - 炸鸡人博客 (zhajiman.github.io) CaiJimmy/hugo-theme-stack: Card-style Hugo theme designed for bloggers (github.com) 介绍 | Hugo 主题 Stack (stack-docs.netlify.app) hugo 主题 stack 手册 建站技术 | 使用 Hugo+Stack 简单搭建一个博客 (reincarnatey.net) Hugo Stack主题装修笔记 (thirdshire.com) 使用 Hugo 对博客的重建与 Stack 主题优化记录 (oxidane-uni.github.io) Blog养成记(4) Hugo中增加tags等分类 | ZHENG Zi'ou (orianna-zzo.github.io) ‍\n‍\n‍\n# 日志 ‍\n2024-04-25\n从2023.4月宣布要有一个个人博客彻底抛弃Qzone后的一年余, 正式对宿敌发起的总攻! ==我这一年沉淀的功力, 挡得住吗?==\n两个小时后, 被GIthub学生认证给的几个免费域名拷打, 不是这个问题就是那个问题; 又一小时后, 文档借鉴错了, 脑子红温了不懂怎么写文章, 还配置错了, 把随便一个自动化配置加进来, 真就一团乱麻, 感到羞愧万分迅速删库跑路了\n‍\n2024-04-26\n竟然被挡住了, 乐\n但是我可是不屈不挠的呢, 喝!\n‍\n2024-04-27\n第二天早上醒来后深刻的反省了, 一日干完\u0026hellip;?\n‍\n2024-04-28\n怎么今天还在干这个啊, 自己的屎山清理了吗? 作业写了吗? 有没有认真工作?\n不干了, 导出然后发博客收摊\u0026hellip;\n‍\n战役总览\n2023.Apr 宣布, 我想要一个博客 2024-3-18 开始博客支配事态 2024-04-27 15:54:24 制作完基础篇草稿 2024-04-27 18:00:00 制作完提高篇草稿 2024-04-27 21:57:10 完结 2024-04-28 润色, 发布, 存档 2024-04-28 20:18:55 导入其他文章 2024-04-29 删库跑路予定 ","permalink":"https://spadektlsg.github.io/p/%E5%8D%9A%E5%AE%A2%E6%94%AF%E9%85%8D%E4%BD%9C%E6%88%98-%E9%9B%B6%E5%8F%B7%E6%9C%BAgithubpage-hugo-stack/","tags":[],"title":"博客支配作战 零号机(GithubPage+Hugo+Stack)"},{"categories":[],"contents":"大一时候学校要求报 3 个社团(虽然后来报了没奖励, 不报没惩罚), 个人报了个零点再来个 ACM 就差不多了, 剩下的不知道报什么算了, 来个兴趣社团为好, 就选了动漫社\n动漫社入社条件基本没有, 就写一个问卷就行. 我个人认为自己在 ACG 领域确实有一些爱好可以说, 其实也挺希望能够结识到一些同好\n但是果然和网上说的一样, 大学动漫社就那样, 不是 O (对不起, 我其实也是, 但是已经退坑了) , 就是 LOL (我小学打的多, 初中不玩了) 之类的.\n再加上疫情, 基本没有活动 (大一大二上), 每天就是在群里看大伙吹水发表情包, 其实也不坏, 填充了些时间之余还能掌握一些学校内的新闻.\n我发现和我一样的家伙从来都在潜水, 从来说话的只有群主和几个管理, 大伙要不是忙的一批, 要么就是纯纯社恐牛马 (so, watashidesu)\n后来, 群友中的几个拉了一个 术群, 我也拉了进去. 可是等了半年了, 群里还是只有 12 个人 (7 个潜水人). 再加上群友基本是日术 (就是 C 社, 初音未来镜音 luka 大姐大哥茄子他们), 我博爱党(当然主要是中 V, 五色 + 筷子);\n‍ 经常看到只推日术的在群里表示对中 V 的不理解, 总是有一些不和谐的声音出来, 我看着也心烦, 于是最后退了. 动漫社也是如此, 只感觉对面和自己完全不像是同一个圈子的人, 反而身边的好兄弟更加和蔼可亲一些 (说真的, 他们也不太鸟这个动漫社, 只是当初被拉进来不好退罢了)\n我嘛, 最后还是退了, 因为不希望有太多念想. 个人在博客和社区大多数时候也不会发言, 只是在当旁观者, 让我进群不潜水还真是挺难的.\n算啦, 出来打工了就别想太多了, Bye.\n(可惜了, 最后还是没赶在大学结束前入坑 Touhou, GalGame 才推了 100 多部, 番剧才看了 60 部)\n2‍‍0‍2‍4-0‍4-2‍3‍ 作 2024-10-01 补\n","permalink":"https://spadektlsg.github.io/p/%E5%8A%A8%E6%BC%AB%E7%A4%BE%E5%9B%9E%E5%BF%86%E5%BD%95/","tags":[],"title":"动漫社回忆录"},{"categories":[],"contents":"‍\n‍\n# 旧Servlet + JSP用户管理项目 沐颜科技\n在线用户剔除操作\nWEB应用是一个多用户的使用环境，每一个用户都通过自己的session进行个人数据的记录，用户也可以手工进行注销操作，以实现session资源的释放，但是在一些系统中为了便于用户的管理，往往需要进行用户手工强制注销操作\n‍\n# 管理程序清单 No. 程序文件名称 类型 描述 1 /login.jsp JSP 提供登录表单，以及错误显示 2 /pages/admin/online_user_list.jsp JSP 管理员查看在线用户列表信息 3 /pages/front/welcome.jsp JSP 用户登录成功后的欢迎页面 4 com.yootk.servlet.LoginServlet Servlet 用户登录处理程序，密码为yootk表示登录成功 5 com.yootk.servlet.KickoutServlet Servlet 在线用户剔除处理Servlet 6 com.yootk.listener.OnlineListener Listener 监听器，在用户登录成功或注销后更新用户列表 7 com.yootk.filter.InvalidateFilter Filter 登录失效检查，如果发现登录失效则跳转到登录页 8 com.yootk.filter.EncodingFilter Filter 编码过滤器 ‍\n‍\n# 登录 @WebServlet(\u0026#34;/LoginServlet\u0026#34;) public class LoginServlet extends HttpServlet { @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String id = req.getParameter(\u0026#34;userid\u0026#34;); // 接收请求参数 String password = req.getParameter(\u0026#34;password\u0026#34;); // 接收请求参数 if (!\u0026#34;yootk\u0026#34;.equals(password)) { // 密码输入错误 req.setAttribute(\u0026#34;error\u0026#34;, \u0026#34;错误的用户名及密码！\u0026#34;); req.getRequestDispatcher(\u0026#34;/errors.jsp\u0026#34;).forward(req, resp); } // WEB组件中提供有监听操作，而通过监听操作可以实现HttpSession属性的处理 req.getSession().setAttribute(\u0026#34;userid\u0026#34;, id); // 设置Session属性内容 resp.sendRedirect(\u0026#34;/pages/front/welcome.jsp\u0026#34;); // 客户端跳转 } } 需要注意的是，此时并不是要完成一个简单的用户登录，而是需要对用户登录的状态进行\n监听，因为最终要将登录的结果保\n存在session属性之中，而session的内容又需要保存在application属性之中. .\n‍\n# 保存登录信息 @WebListener public class OnlineListener implements ServletContextListener, HttpSessionListener, HttpSessionAttributeListener { private ServletContext servletContext; // 获取application实例 @Override public void contextInitialized(ServletContextEvent sce) { // 进行初始化集合存储 this.servletContext = sce.getServletContext(); // 存在有公共的application属性 // Map集合之中的key表示用户名，而Value是保存当前的用户状态 this.servletContext.setAttribute(\u0026#34;online\u0026#34;, new HashMap\u0026lt;String, Boolean\u0026gt;()); } @Override public void attributeAdded(HttpSessionBindingEvent se) { // 用户登录成功会设置session的属性内容，这样就会触发本方法的执行 if (\u0026#34;userid\u0026#34;.equals(se.getName())) { // 判断是否为指定的属性操作 Map\u0026lt;String, Boolean\u0026gt; map = (Map\u0026lt;String, Boolean\u0026gt;) this.servletContext.getAttribute(\u0026#34;online\u0026#34;); map.put((String)se.getValue(), false); // 保存用户信息 this.servletContext.setAttribute(\u0026#34;online\u0026#34;, map); } } @Override public void sessionDestroyed(HttpSessionEvent se) { // 用户离开了 Map\u0026lt;String, Boolean\u0026gt; map = (Map\u0026lt;String, Boolean\u0026gt;) this.servletContext.getAttribute(\u0026#34;online\u0026#34;); map.remove(se.getSession().getAttribute(\u0026#34;userid\u0026#34;)); // 删除数据 this.servletContext.setAttribute(\u0026#34;online\u0026#34;, map); } } ‍\n‍\n‍\n# 在线用户列表 %@ page pageEncoding=\u0026#34;UTF-8\u0026#34; import=\u0026#34;java.util.*\u0026#34; %\u0026gt; \u0026lt;% // 通过request获取相关资源信息，拼凑成完整的访问路径 String basePath = request.getScheme() + \u0026#34;://\u0026#34; + request.getServerName() + \u0026#34;:\u0026#34; + request.getServerPort() + request.getContextPath() + \u0026#34;/\u0026#34; ; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;沐言科技：www.yootk.com\u0026lt;/title\u0026gt; \u0026lt;base href=\u0026#34;\u0026lt;%=basePath%\u0026gt;\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,initial-scale=1\u0026#34;\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;bootstrap/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;bootstrap/css/bootstrap.min.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;%! public static final String KICKOUT_URL = \u0026#34;/pages/admin/KickoutServlet\u0026#34;; %\u0026gt; \u0026lt;body class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;panel panel-success\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;panel-heading\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;i class=\u0026#34;fa fa-archive\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026amp;nbsp;在线用户列表\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;panel-body\u0026#34;\u0026gt; \u0026lt;% // 获取当前全部的用户信息 Map\u0026lt;String, Boolean\u0026gt; onlineMap = (Map\u0026lt;String, Boolean\u0026gt;) application.getAttribute(\u0026#34;online\u0026#34;); // 获取Map集合 %\u0026gt; \u0026lt;table class=\u0026#34;table table-hover\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th width=\u0026#34;40%\u0026#34; class=\u0026#34;text-center\u0026#34;\u0026gt;用户名\u0026lt;/th\u0026gt; \u0026lt;th width=\u0026#34;20%\u0026#34; class=\u0026#34;text-center\u0026#34;\u0026gt;状态\u0026lt;/th\u0026gt; \u0026lt;th width=\u0026#34;10%\u0026#34; class=\u0026#34;text-center\u0026#34;\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% for (Map.Entry\u0026lt;String, Boolean\u0026gt; entry : onlineMap.entrySet()) { %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;text-center\u0026#34;\u0026gt;\u0026lt;%=entry.getKey()%\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;text-center\u0026#34;\u0026gt; \u0026lt;% if (entry.getValue()) { %\u0026gt; \u0026lt;span class=\u0026#34;label label-default\u0026#34;\u0026gt;剔除\u0026lt;/span\u0026gt; \u0026lt;% } else { %\u0026gt; \u0026lt;span class=\u0026#34;label label-success\u0026#34;\u0026gt;在线\u0026lt;/span\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;text-center\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;btn btn-xs btn-danger\u0026#34; href=\u0026#34;\u0026lt;%=KICKOUT_URL%\u0026gt;?userid=\u0026lt;%=entry.getKey()%\u0026gt;\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;glyphicon glyphicon-remove\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026amp;nbsp;强制下线\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;panel-footer\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;text-align:right;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;images/logo.png\u0026#34; style=\u0026#34;height: 30px;\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;沐言科技（www.yootk.com） —— 新时代软件教育领导品牌\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ‍\n# 注销 ‍\n@WebServlet(\u0026#34;/pages/admin/KickoutServlet\u0026#34;) public class KickoutServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String userid = req.getParameter(\u0026#34;userid\u0026#34;); Map\u0026lt;String, Boolean\u0026gt; onlineMap = (Map\u0026lt;String, Boolean\u0026gt;) req.getServletContext().getAttribute(\u0026#34;online\u0026#34;); // Map集合 if (onlineMap.containsKey(userid)) { // 用户还没走呢 onlineMap.put(userid, true); // 设置为True就表示要剔除了 } req.getServletContext().setAttribute(\u0026#34;online\u0026#34;, onlineMap); resp.sendRedirect(\u0026#34;/pages/admin/online_user_list.jsp\u0026#34;); } } ‍\n‍\n能够让用户注销的操作只能够是用户本身完成的事情，所以可以考虑做一个过滤器，过滤\n器在用户每次访问的时候都判断一\n下用户的状态，如果发现用户已经被删除了，则强制性的注销.\n@WebFilter(\u0026#34;/pages/front/*\u0026#34;) public class InvalidateFilter extends HttpFilter { @Override protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { String userid = (String) request.getSession().getAttribute(\u0026#34;userid\u0026#34;); if (userid != null) { // 用户登录过 Map\u0026lt;String, Boolean\u0026gt; onlineMap = (Map\u0026lt;String, Boolean\u0026gt;) request.getServletContext().getAttribute(\u0026#34;online\u0026#34;); // Map集合 if (onlineMap.containsKey(userid)) { // 用户还存在 if (onlineMap.get(userid) == true) { // 本身保存的就是布尔类型 request.getSession().invalidate(); // 强制注销 request.setAttribute(\u0026#34;error\u0026#34;, \u0026#34;您的账户已被系统强制下线，为了您的安全，请重新登录！\u0026#34;); request.getRequestDispatcher(\u0026#34;/login.jsp\u0026#34;).forward(request, response); } else { // 正常的状态 chain.doFilter(request, response); } } } else { request.setAttribute(\u0026#34;error\u0026#34;, \u0026#34;您还未登录，请先登录！\u0026#34;); request.getRequestDispatcher(\u0026#34;/login.jsp\u0026#34;).forward(request, response); } } } ‍\n# 旧Servlet SSM项目 ‍\n# 用户登录和注销接口开发 ‍\n//controller层代码 public void login(HttpServletRequest request,HttpServletResponse response){ String phone = request.getParameter(\u0026#34;phone\u0026#34;); String pwd = request.getParameter(\u0026#34;pwd\u0026#34;); User user = userService.login(phone,pwd); if(user != null){ request.getSession().setAttribute(\u0026#34;loginUser\u0026#34;,user); //跳转页面 }else { request.setAttribute(\u0026#34;msg\u0026#34;,\u0026#34;用户名或者密码不正确\u0026#34;); } } //service层代码 @Override public User login(String phone, String pwd) { String md5pwd = CommonUtil.MD5(pwd); User user = userDao.findByPhoneAndPwd(phone,md5pwd); return user; } //dao层代码 public User findByPhoneAndPwd(String phone, String md5pwd) { String sql = \u0026#34;select * from user where phone=? and pwd=?\u0026#34;; User user = null; try{ user = queryRunner.query(sql,new BeanHandler\u0026lt;\u0026gt;(User.class,processor),phone,md5pwd); }catch (Exception e){ e.printStackTrace(); } return user; } ‍\n‍\n# 发布主题接口 //controller层代码 /** * http://localhost:8080/topic?method=addTopic * 发布主题 * @param request * @param response */ public void addTopic(HttpServletRequest request,HttpServletResponse response){ User loginUser = (User)request.getSession().getAttribute(\u0026#34;loginUser\u0026#34;); if(loginUser == null){ request.setAttribute(\u0026#34;msg\u0026#34;,\u0026#34;请登录\u0026#34;); return; //页面跳转 TODO } String title = request.getParameter(\u0026#34;title\u0026#34;); String content = request.getParameter(\u0026#34;content\u0026#34;); int cId = Integer.parseInt(request.getParameter(\u0026#34;c_id\u0026#34;)); int rows = topicService.addTopic(loginUser,title,content,cId); if(rows ==1){ //发布主题成功 }else { //发布主题失败 } } //service层代码 @Override public int addTopic(User loginUser, String title, String content, int cId) { Category category = categoryDao.findById(cId); if(category == null){ return 0;} Topic topic = new Topic(); topic.setTitle(title); topic.setContent(content); topic.setCreateTime(new Date()); topic.setUpdateTime(new Date()); topic.setPv(1); topic.setDelete(0); topic.setUserId(loginUser.getId()); topic.setUsername(loginUser.getUsername()); topic.setUserImg(loginUser.getImg()); topic.setcId(cId); topic.setHot(0); int rows = 0; try { rows = topicDao.save(topic); } catch (Exception e) { e.printStackTrace(); } return rows; } //dao层代码 public int save(Topic topic) throws Exception { String sql = \u0026#34;insert into topic(c_id,title,content,pv,user_id,username,user_img,create_time,update_time,hot,`delete`) \u0026#34; +\u0026#34;values(?,?,?,?,?,?,?,?,?,?,?)\u0026#34;; Object [] params = { topic.getcId(), topic.getTitle(), topic.getContent(), topic.getPv(), topic.getUserId(), topic.getUsername(), topic.getUserImg(), topic.getCreateTime(), topic.getUpdateTime(), topic.getHot(), topic.getDelete() }; int i =0; try{ i= queryRunner.update(sql,params); }catch (Exception e){ e.printStackTrace(); throw new Exception(); } return i; } ‍\n‍\n# 回复盖楼功能开发 ‍\nServlet-Service-Dao层开发 //controller层代码 /** * http://localhost:8080/topic?method=replyByTopicId\u0026amp;topic_id=9 * 盖楼回复 * @param request * @param response */ public void replyByTopicId(HttpServletRequest request,HttpServletResponse response){ User loginUser = (User)request.getSession().getAttribute(\u0026#34;loginUser\u0026#34;); if(loginUser == null){ request.setAttribute(\u0026#34;msg\u0026#34;,\u0026#34;请登录\u0026#34;); return; //页面跳转 TODO } int topicId = Integer.parseInt(request.getParameter(\u0026#34;topic_id\u0026#34;)); String content = request.getParameter(\u0026#34;content\u0026#34;); int rows = topicService.replyByTopicId(loginUser,topicId,content); if(rows ==1){ //回复成功 }else { //回复失败 } } //service层代码 @Override public int replyByTopicId(User loginUser, int topicId, String content) { int floor = topicDao.findLatestFloorByTopicId(topicId); Reply reply = new Reply(); reply.setContent(content); reply.setCreateTime(new Date()); reply.setUpdateTime(new Date()); reply.setFloor(floor+1); reply.setTopicId(topicId); reply.setUserId(loginUser.getId()); reply.setUsername(loginUser.getUsername()); reply.setUserImg(loginUser.getImg()); reply.setDelete(0); int rows = replyDao.save(reply); return rows; } //dao层代码 public int save(Reply reply) { String sql = \u0026#34;insert into reply (topic_id,floor,content,user_id,username,user_img,create_time,update_time,`delete`)\u0026#34; + \u0026#34;values (?,?,?,?,?,?,?,?,?)\u0026#34;; Object [] params = { reply.getTopicId(), reply.getFloor(), reply.getContent(), reply.getUserId(), reply.getUsername(), reply.getUserImg(), reply.getCreateTime(), reply.getUpdateTime(), reply.getDelete() }; int rows = 0; try{ rows = queryRunner.update(sql,params); }catch (Exception e){ e.printStackTrace(); } return rows; } ‍\n‍\n# topic阅读量递增 ‍\n通过session和topic进行绑定，一个session访问同个topic只算一次阅读 //controller层代码 //处理浏览量，如果同个session内只算一次 String sessionReadKey = \u0026#34;is_read_\u0026#34;+topicId; Boolean isRead = (Boolean) request.getSession().getAttribute(sessionReadKey); if(isRead == null){ request.getSession().setAttribute(sessionReadKey,true); //新增一个pv topicService.addOnePV(topicId); } //service层代码 @Override public void addOnePV(int topicId) { Topic topic = topicDao.findById(topicId); int newPV = topic.getPv()+1; topicDao.updatePV(topicId,newPV,topic.getPv()); } //dao层代码 /** * 更新浏览量 */ public int updatePV(int topicId, int newPV, int oldPV) { String sql = \u0026#34;update topic set pv=? where pv=? and id=?\u0026#34;; int rows = 0; try { rows = queryRunner.update(sql,newPV,oldPV,topicId); }catch (Exception e){ e.printStackTrace(); } return rows; } ‍\n‍\n# 页自动跳转 简介：小滴课堂首页自动跳转配置\nhome.jsp \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;小滴课堂开发者论坛\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;jsp:forward page=\u0026#34;/topic?method=list\u0026amp;c_id=1\u0026#34;\u0026gt;\u0026lt;/jsp:forward\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ‍\nweb.xml \u0026lt;welcome-file-list\u0026gt; \u0026lt;welcome-file\u0026gt;home.jsp\u0026lt;/welcome-file\u0026gt; \u0026lt;/welcome-file-list\u0026gt; ‍\n‍\n# 用户登录校验拦截器开发 开发对应的登录拦截器\n‍\n开发loginInterceptor\n登录校验成功放行\n/** * 进入到controller之前的方法 * @param request * @param response * @param handler * @return * @throws Exception */ @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { try { String accesToken = request.getHeader(\u0026#34;token\u0026#34;); if (accesToken == null) { accesToken = request.getParameter(\u0026#34;token\u0026#34;); } if (StringUtils.isNotBlank(accesToken)) { Claims claims = JWTUtils.checkJWT(accesToken); if (claims == null) { //告诉登录过期，重新登录 sendJsonMessage(response, JsonData.buildError(\u0026#34;登录过期，重新登录\u0026#34;)); return false; } Integer id = (Integer) claims.get(\u0026#34;id\u0026#34;); String name = (String) claims.get(\u0026#34;name\u0026#34;); request.setAttribute(\u0026#34;user_id\u0026#34;, id); request.setAttribute(\u0026#34;name\u0026#34;, name); return true; } }catch (Exception e){} sendJsonMessage(response, JsonData.buildError(\u0026#34;登录过期，重新登录\u0026#34;)); return false; } ‍\n登录不成功返回json数据\n/** * 响应json数据给前端 * @param response * @param obj */ public static void sendJsonMessage(HttpServletResponse response, Object obj){ try{ ObjectMapper objectMapper = new ObjectMapper(); response.setContentType(\u0026#34;application/json; charset=utf-8\u0026#34;); PrintWriter writer = response.getWriter(); writer.print(objectMapper.writeValueAsString(obj)); writer.close(); response.flushBuffer(); }catch (Exception e){ e.printStackTrace(); } } ‍\n‍\n# loginInterceptor注册和放行路径 loginInterceptor 拦截器注册和路径校验配置\n继承 WebMvcConfigurer 配置拦截路径和放行路径 /** * 拦截器配置 * * 不用权限可以访问url /api/v1/pub/ * 要登录可以访问url /api/v1/pri/ */ @Configuration public class InterceptorConfig implements WebMvcConfigurer { @Bean LoginInterceptor loginInterceptor(){ return new LoginInterceptor(); } @Override public void addInterceptors(InterceptorRegistry registry) { //拦截全部 registry.addInterceptor(loginInterceptor()).addPathPatterns(\u0026#34;/api/v1/pri/*/*/**\u0026#34;) //不拦截哪些路径 斜杠一定要加 .excludePathPatterns(\u0026#34;/api/v1/pri/user/login\u0026#34;,\u0026#34;/api/v1/pri/user/register\u0026#34;); WebMvcConfigurer.super.addInterceptors(registry); } } ‍\n# Guava Cache缓存 ‍\n# 谷歌开源缓存框架Guava Cache讲解和封装缓存组件 ‍\n添加依赖\n\u0026lt;!--guava依赖包--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.guava\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;19.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 封装api\nprivate Cache\u0026lt;String,Object\u0026gt; tenMinuteCache = CacheBuilder.newBuilder() //设置缓存初始大小，应该合理设置，后续会扩容 .initialCapacity(10) //最大值 .maximumSize(100) //并发数设置 .concurrencyLevel(5) //缓存过期时间，写入后10分钟过期 .expireAfterWrite(600,TimeUnit.SECONDS) //统计缓存命中率 .recordStats() .build(); public Cache\u0026lt;String, Object\u0026gt; getTenMinuteCache() { return tenMinuteCache; } public void setTenMinuteCache(Cache\u0026lt;String, Object\u0026gt; tenMinuteCache) { this.tenMinuteCache = tenMinuteCache; } ‍\n‍\n# 轮播图接口引入本地缓存 轮播图接口加入缓存 try{ Object cacheObj = baseCache.getTenMinuteCache().get(CacheKeyManager.INDEX_BANNER_KEY, ()-\u0026gt;{ List\u0026lt;VideoBanner\u0026gt; bannerList = videoMapper.listVideoBanner(); System.out.println(\u0026#34;从数据库里面找轮播图列表\u0026#34;); return bannerList; }); if(cacheObj instanceof List){ List\u0026lt;VideoBanner\u0026gt; bannerList = (List\u0026lt;VideoBanner\u0026gt;)cacheObj; return bannerList; } }catch (Exception e){ e.printStackTrace(); } return null; ‍\n# 视频列表引入本地缓存 ‍\n播放列表加入本地缓存\n@Override public List\u0026lt;Video\u0026gt; listVideo() { try{ Object cacheObj = baseCache.getTenMinuteCache().get(CacheKeyManager.INDEX_VIDEL_LIST,()-\u0026gt;{ List\u0026lt;Video\u0026gt; videoList = videoMapper.listVideo(); return videoList; }); if(cacheObj instanceof List){ List\u0026lt;Video\u0026gt; videoList = (List\u0026lt;Video\u0026gt;)cacheObj; return videoList; } }catch (Exception e){ e.printStackTrace(); } //可以返回兜底数据，业务系统降级-》SpringCloud专题课程 return null; } ‍\n‍\n# 视频详情引入本地缓存 ‍\n视频详情加入本地缓存\n@Override public Video findDetailById(int videoId) { String videoCacheKey = String.format(CacheKeyManager.VIDEO_DETAIL,videoId); try{ Object cacheObject = baseCache.getOneHourCache().get( videoCacheKey, ()-\u0026gt;{ // 需要使用mybaits关联复杂查询 Video video = videoMapper.findDetailById(videoId); return video; }); if(cacheObject instanceof Video){ Video video = (Video)cacheObject; return video; } }catch (Exception e){ e.printStackTrace(); } return null; } ‍\n‍\n# 实战接口压力测试, 明白优化前后的QPS并发差距和跨域配置 # 开启Guava缓存压测热点数据接口 简介: 启用缓存 压测热点数据接接口\n视频轮播图接口 Throughput: 14000\n注意：接口的性能影响因素很多：机器的配置如CPU、内存、当前负载情况等，还有网络带宽因素影响，只能尽量减少影响因素\n‍\n单线程访问结果\n​{\u0026quot;code\u0026quot;:0,\u0026quot;data\u0026quot;:null,\u0026quot;msg\u0026quot;:null}​\n‍\n‍\n# 取消Guava缓存压测热点数据接口和前后对比 简介: 不启用缓存 压测热点数据接口\n视频轮播图接口 Throughput : 2700 ‍\n‍\n‍\n","permalink":"https://spadektlsg.github.io/p/%E6%97%A7%E5%BC%8Fservlet%E7%BC%96%E7%A8%8B%E6%9C%AD%E8%AE%B0-%E4%BD%8E%E8%B4%A8%E9%87%8F/","tags":[],"title":"旧式Servlet编程札记 低质量"},{"categories":[],"contents":"本文记录了本人选择PC主力机的过程, 以及一些购买建议\n到2024的4月份到618之前大概保质期还有, 之后就不敢说了.\n以下是原文导出:\n‍\n2024-04-07 选择事态结束, 下转鼓捣事态, 此笔记提取信息后封档\n‍\n04-05 晚间\n需要一台比较全能的主力后端-\u0026gt;全栈开发机器, 至少服务3-5年以上\n本来打算618之前之后广撒网, 但是能自由支配的时间只剩下一个月左右了, 之后完全没有机会训练新兵, 因此需要立刻行动起来观察\n‍\n# 前 ‍\n# 问题背景 当前Redmibook 2021 Pro\n‍\n内存方面，容量为主流的 16GB，规格为 DDR4 3200MHz\n支持拓展的大多数集中在商用本系列中，家用本系列大多数是为了降低成本，所以没办法做, 要做还要我拿去电脑店这里, 停工一周? 不存在的.\n‍\n因此只能选择618看看了??\u0026hellip;\n在这时, 本人还对电脑选购知识一知半解\n‍\n# 问题推进 是否可升级内存?\n确认了, 板载内存不可扩展只可全部拆了更换新的\n‍\nLink\nXiaomi/小米和Redmin红米还是有一定升级价值的\n‍\n小米和红米都是性价比很高的笔记本电脑，新机发售时与同等配置的Mac和Surface电脑售价低不少，但抄袭和模仿就像他自己的影子一样从未消失和离开过，甚至它就是有品牌的山寨产品，就连板载内存设计也抄得有模有样的，全线产品80%机型都是板载内存设计，并且配置和支持厂商的兼容性还不全面，维修和升级难度不小，兼容性很差，大数多数机型进行板载内存升级后就不能再更新BIOS，否则出会现不识别内存容量和导致不开机的情况。售价便宜就是真香，拥有不少用户。做工和用料在一众国产品牌算是佼佼者，电气性能基本不会有太大的衰减，就算7年前的第一代小米Book进行内存和硬盘升级后也能再战3～5年，胜任办公娱乐完全不在话下。按二手行情进行对比分析，同配同年代的小米和Mac销售价差达到一倍，其实小米的笔记本电脑产品的残于价值是被严重低估的，是非常值得升级的机器之一。\n‍\n逛了一圈, 弥补了自己技术的缺陷, 确认了, 扩展方案不行, 只能选择购买强而有力的笔记本(这两年都是到处跑, 台式不行) , 同时与当前轻薄本错位开\n‍\n# 攻略 如何挑选适合自己的笔记本?\n‍\n多维思考\n定位\n性能\n便携\n易用\n成本\n‍\n‍\n# 定位 与个人轻薄本错位的生态, 丑陋, 可扩展, 皮实\n‍\n事后评价\n丑陋还好, 天选就是吃颜值的, 性能不算好, 皮实更不算上\n可扩展倒是真的符合\n‍\n‍\n# 性能 ‍\n# CPU 相比于轻薄本, 单核性能强较好 (个人游戏)\n‍\n‍\n# 内存 后端开发核心, ==至少32GB== + (工作) 为应付未来扩展需要尽可能有扩展余地 ‍\n# 显存 玩游戏需要至少类似3060性能 (个人), 更高的不需要 视频渲染需要不多 ‍\n# 键盘 完全不需要, 外接(轻薄本倒是要看看)\n‍\n# 声音 完全不需要, 外接耳机\n‍\n# 屏幕 基础能看就行, 后面配一个显示器使用 (1080 + 60), 措位于当前视频高性能(3.2K + 90)\n‍\n# 颜值 完全不考虑, 主要充当所谓机箱使用\n‍\n# 生态 完全不需要, 自己有自己的一套开发工具\n‍\n# 便携 重量完全不需要, 有轻薄本充当, 这个当机箱即可 只要是笔记本即可, 能放行李箱 当然也可以看看便携机箱 ‍\n‍\n‍\n# 预算 个人期望预算 \u0026gt; 第一台电脑 (5000) , 低于最高预算 \u0026ndash;\u0026gt; 1W\n‍\n# 成本减少 见上方\n屏幕 颜值 手感 生态 便携 ‍\n# 聪明选择 当预算超过一定水平后, 随着资金的投入, 购买轻薄本就越来越不如购买游戏币乃至机箱的竞争力.\n对于我而言, 短期内Java开发不会变, 并且3年内还会挪坑, 尤其是1年后的毕业时候, 因此便携性决定了是选择笔记本. 轻薄本 - 轻薄游戏本 - 游戏本 之间差的很远, 要独立分析.\n‍\n‍\n# 性能天梯-介绍 # CPU ‍\n# 零散 ‍\n生产力用户更偏重多核性能，可以参考综合性能天梯图\n游戏用户更偏重单核性能，综合性能天梯图参考意义不大\n‍\n如果不考虑价格的问题，确实U7和U9在功耗给足的情况下，性能也着实要比8845/7840好一些。\n可是，如果综合性能和价格的对比，我个人会更推荐AMD 8845或7840的机型，尽管性能比U7略弱一点点，但是通常搭载8845/7840的机型，同等配置下，要比U7版本便宜1000元左右，这也是AMD处理器的价格优势。 AMD yes!\n因为我们在现实世界中，买到的笔记本电脑就是一台完整的、上手即用的普通消费级电子产品。目前同配置的机型下，比如小新Pro16，它的AMD锐龙机型就是要比酷睿Ultra便宜好几百，性能也是互有胜负的水平，因此目前7840以及后续的8845显然性价比都更高。\n而且，8845/7840锐龙版现阶段还有个优点就是“可选择的产品非常多”。原因是7840上市到现在有半年时间了，8845也开始有不同厂家推出轻薄本可选，结合前文关于酷睿Ultra和8845/7840的性能对比，这些机型即使放到2024年甚至2025年都不过时。\n‍\n轻薄本Intel处理器优先推荐i5-13500H，4大核+8小核架构，采用12核16线程，最高睿频可达4.7GHz，大部分需要高性能处理器的需求都可以满足，没必要加钱去选择i7-13700H处理器。\n‍\n游戏本买来主要是创作设计、三维建模、深度学习等，选择Intel酷睿处理器，对Adobe全家桶软件优化比较好。处理器推荐选择i5-13500HX，游戏党高性价比处理器，采用6大核+8小核架构，三级缓存24MB，睿频可达4.6GHz。\nAMD锐龙处理器价格一般比Intel酷睿版便宜，但是实际处理器性能差距不大，差价在300左右，选择Intel酷睿处理器，差价过大就选择AMD锐龙处理器，比如R7-7745HX、R9-7845HX，性价比更高。\n如果游戏本买来只是玩大型3A游戏，而游戏性能表现瓶颈主要在于显卡，同样的显卡，AMD和Intel处理器的游戏本实际帧数表现几乎没有差别，按预算选择。(吕布骑狗)\n‍\n‍\n# Intel处理器型号辨别 ‍\nIntel最新的处理器是13代酷睿，分为HX、H、P、U四个系列，代表着不同的性能，HX系列处理器支持超频，适合游戏发烧友，搭载在游戏本上。\nH系列则是高性能高功耗，搭载在轻薄本或者游戏本上。P系列主要是追求性能和续航之间的平衡，搭载在轻薄本上，U系列处理器则是低性能，发热量低，用在二合一笔记本上。\nIntel酷睿13代处理器定位有i3、i5、i7、i9，今年主流的处理器型号定位是i5和i9，i7夹在中间比较尴尬，处理器性能基本是溢出状态，大部分需求选择i5就够了，追求极致的处理器性能释放，就选择i9。\n比如轻薄本上选择i5-1340P、i5-13500H处理器就够用了，游戏本上就选择i5-13500HX、i9-13900HX，对于i7-13700H、i7-1360P处理器，一般是价格偏高，相比顶配i9没有什么价格优势\n​​\n‍\n# AMD处理器型号辨别 关键点就是看处理器型号的第三个数字，代表着处理器型号所使用的架构，AMD锐龙最新的处理器架构是Zen4，那么处理器型号第三个数字是4的，就是最新架构处理器，比如R9-7940H、R9-7845HX。\n如果数字是3，那就是旧架构，Zen3+、Zen3，这都是去年发布过的处理器，今年是重新炒冷饭，CPU规格几乎没有变化，改了个名字，比如R7-7735H，其实就是去年的R7-6800H。\n‍\n​​\n‍\n看完架构，看AMD锐龙系列，分为7045、7040、7035、7030、7020五个系列，加粗的数字都是代表它们的架构，重点看7045、7040系列处理器就可以，其它都是炒冷饭。\n7045系列处理器后缀都是HX，专门搭载在游戏本上，最高16核32线程，适合游戏性能发烧友，可以超频。推荐R7-7745HX、R9-7945HX处理器型号。\n7040系列处理器后缀则是H，搭载在轻薄本或者游戏本上，这个系列处理器最适合搭载在轻薄本上，因为拥有笔记本电脑上最强的核显，满血Radeon 780M相比上代强10%左右，比如R9-7940H、R7-7840H处理器，而R5-7640H核显是残血，就不推荐选择了。\n‍\n‍\n‍\n‍\n# 显卡 见哔站收藏夹\n选择中端卡即可, 不需要玩太多游戏, 3A能摸到就好, 4050(3060)的标准及以下一点\n‍\n中端卡：6650XT/7600/4060/6750GRE\n‍\n6650XT \u0026ndash; 大于3060, 在没TI和有TI之间, 目前游戏卡性价比最高的选择，再往下都比较拉跨，再往上相对性价比又不及6650XT，1080P 3A游戏都能高画质畅玩，如果不考虑高分辨率那这张卡就挺合适的。\n6750GRE \u0026ndash; 对标3060TI 4060的价格，4060Ti的性能，2000左右游戏性价比最高的卡，有10GB和12GB两个版本，买12GB的。\n4060 \u0026ndash; 大于3060, 在没TI和有TI之间N卡特有的优势，功耗低，游戏性能在2K基本都能中高画质玩，1080P基本通杀。\n‍\n显卡功耗不明确的\n详情页没有明确标识显卡功耗或者语焉不详的，不用想就知道是残血版。如果是游戏玩家推荐满血版显卡，主要当做生产力的话残血版可以考虑。\n‍\n入门卡：3050和6500XT(\u0026lt;3050)\n这两个也基本确保无矿，但是3050价格太高，性价比太低，6500XT虽然性价比也低，但是相对高一些，都不是特别推荐。\n‍\n‍\nRTX4060相比RTX3060性能提升15%左右，能耗提升较大，功耗只需要达到110W左右，就可以跑满频率，对游戏本散热能力要求更低。\n如果RTX4060和RTX4050显卡版本价格差距只有500左右，就可以获得21%左右的性能提升，直接选择RTX4060版本，性价比更高。\nRTX4070是RTX40系中性价比最低的一款显卡型号，不推荐选择，相比RTX4060性能提升不大，差价却基本在3000左右，性价比很低。\n‍\n那么我会选用4050/60\n‍\n‍\n2023年笔记本电脑显卡更新到了RTX40系，MX系列独显已经推出了历史舞台，只剩下RTX系列。\n2023年RTX40系新显卡是RTX4050、RTX4060、RTX4070、RTX4080、RTX4090，性能由低到高排列。\n同时部分轻薄本还会继续用去年发布的RTX3050、RTX2050显卡，比如2023年新增的6GB显存版本的RTX3050，还有小封装版64bit的RTX3050，以下图表标注为黄色名称。\n其中64bit版本的RTX3050 4GB其实和RTX2050性能基本一样，所以搭载这款独显的价格比核显版贵1000左右比较合理，差价过多就不推荐入手。\nRTX40系显卡能效提升，所以这一代的显卡用起来更省电，也不再需要满血功能就可以发挥全部性能，比如95W的RTX4050显卡性能和140W的差不多，110W的RTX4060和140W的差不多。\n能效的提升，对于全能本来说意义很大，即使搭载残血RTX40系显卡，也可以拥有不错的显卡性能释放，这简直就是全能本的春天。\n​​\n综合来说，如果RTX4050和RTX4060游戏本价格差距只有500，直接上RTX4060，显卡性能直接获得22%左右的提升。如果差价在1000左右，那就看预算和需求了。\nRTX4070是RTX40系显卡中性价比最低的一款，不推荐大家选择RTX4070游戏本，因为RTX4070性能相比RTX4060只提升14%左右，但是价格却相差两三千，智商检测卡。\n‍\n# 内存 笔记本电脑内存容量都是16G起步，16G内存容量对于大多数人来说已经够用了，如果有开虚拟机、运行大量代码、跑仿真等使用需求，选择32G或者支持内存拓展的笔记本电脑。注意大多数轻薄本内存是板载设计，无法升级。\n笔记本电脑内存看内存类型和内存频率，最新内存类型是DDR5，相比DDR4内存性能更强，但是前期内存延迟比较高，后期优化好之后，DDR5内存对游戏性能也可以带来一点提升。\n‍\n‍\n# 硬盘 需要注意的就是硬盘拓展性，看硬盘有几个M.2插槽，单M.2硬盘插槽，硬盘容量升级只能将原来的硬盘替换掉，升级成本高。双M.2硬盘插槽，就是还有一个硬盘位可以自己加装硬盘。\n对于硬盘支持拓展的笔记本电脑，需要注意可拓展的尺寸，有2242和2280规格，2280的固态硬盘比较多，选择很多。2242的固态硬盘比较少，不好买。\n‍\n‍\n# 接口 USB-A：主流是USB3.0和USB2.0。USB3.0传输速率更快，经常用于连接鼠标、U盘等。 RJ-45：以太网卡接口，就是用来插网线的。 HDMI：用来连接投影仪、显示器，办公族、老师等通常会用到这个。 Type-C：正反都可以插，可以用来传输数据、快速充电等，未来接口发展方向。 耳麦接口：用来插耳机、麦克风。 ‍\n有无雷电接口\n雷电是intel的专利，所以只有搭载酷睿处理器的机型有，AMD的机器没有，且同系列的机型采用酷睿处理器一般要更贵些。\n最新的雷电四接口传输速率最高可达40Gbps(5GB/s)，可以外接4K或8K的显示器。 接口这种东西很神奇，如果你不是常用的，大概率到笔记本退休你都用不了几次；\n如果是要经常外接显示器玩游戏、视频剪辑之类的，最好选择有雷电接口的酷睿处理器；如果雷电接口不是刚需，考虑性价比推荐锐龙处理器。\n‍\n‍\n# 屏幕 ABCD面术语对应面\nA 顶盖\nB 屏幕\nC 键盘\nD 屁股\n‍\n低色域屏幕一律不推荐\n商品详情页或标题有72%ntsc、100%sRGB、100%Adobe、100%DCI-P3等任意一种高色域即可，其它没有标注或者明说的一律是低色域，专业平面设计或者对色彩要求较高的更加推荐加粗标黑的那3种。（如果是P3广色域机型，支持色域切换更好）\n‍\n‍\n# 购物须知 下手时间 : 618或是找到附近实习后, 不能着急\u0026hellip;当前没有急需, 但是未来一定有\n‍\n这里的没有急需是非常严重的误判, 第二天早上还没有发现, 事实上已经火烧屁股了. 当前的16GB内存, 系统吃掉15%, 思源Edge吃掉10%, 音乐等小插件吃掉5%, 日常开机待命状态就有30%了, 内存报警在80 - 90%产生, 会影响性能\n下面用实例证明, 以上学期的LDBMS前后端联动项目示例, 为保证电量续航, 先用节电模式启动观察内存情况(见其他地方)\n‍\n# 便宜 品类日： 包括各种品牌周年庆，一般会有促销活动，优惠力度也还不错，也可以留意一下每月的8号、18号和28号。\n整点秒杀： 不管是大促还是平时，优惠券或直降都集中在0点、10点、14点和20点。\n懒得蹲优惠也简单，只要现在的价格你能接受就直接入手，7天内如果降价了，你可以按如下步骤申请价格保护，差价会退给你——\n短时间内不可能比首发价低的，等比首发低的时候一般就是出新的一代了，如果首发价不满意不建议继续等那台机器\n如果那个机器首发价都不满意，就自己降一下标准买更低价格的吧，电脑跟手机相似但又不同，手机一般来说都是最开始就是最高的价格，电脑一般最开始是最低的价格，然后慢慢变高，等出新品了再慢慢变低\n产品溢价过高。\n有些机型软硬件本身没有硬伤，在同等配置中还特别有优势甚至很畅销，问题是官网或京东自营缺货严重，在第三方店铺中溢价非常严重，日常售价根本买不到，往往溢价1000+甚至更多，抵消了产品本身的优势。\n能抢到首发机型更好，抢不到首发机型，以高于首发价、低于日常价的活动价入手也是比较划算的\n‍\n‍\n‍\n# 厂商建议 ‍\n一线品牌\n联想/ThinkPad 苹果 戴尔/外星人 惠普 宏碁 华硕/ROG ‍\n‍\n二线品牌\n华为/荣耀 微星 雷蛇 机械革命 雷神 小米 神舟 Realme 像华为、小米、realme等等，一开始不是主做电脑的，但是他们有自己的品质和生态系统，独特技术，而且背靠厂商品牌的影响力，售后直追一线品牌，跟同品牌手机互联体验更好，也值得选择。\n微星、雷蛇，主打游戏本，虽然售后服务和品牌知名度不如一线品牌，但也可以买。\n神舟、机械革命、雷神等，售后一般，建议选择热门机型。\n‍\n‍\n# 中 ‍\n# 对象 检索Link\n可以只记录大款式, 内部型号容易选\n‍\n‍\n# 轻薄偏全能本 和手头机子差不多, 但是贵些加一些东西, 等于亏爆\n大多数内存采用板载设计, 太蛋疼, 32GB可能还是不能叫做主力\n‍\n‍\n# 惠普战66 淘汰!\n‍\n‍\n‍\n# 全能本 适合主办公，且工作任务较复杂，对笔记本性能要求较高，希望工作之余可以玩玩游戏（对游戏体验要求不高）的人群\n和上面差不多\n‍\n‍\n# 联想小新 Pro 14 超能本 2023(i5 13500H/32GB/1TB/RTX3050 6G) ==7500==\nPro14只有一个32GB , RTX 3050, i5\n1.5KG\n屏幕小\n‍\n两个显卡评价 RTX3050 6G 新出的 1400, 坑逼不如1080\n‍\n# 联想小新 Pro 16 超能本 2023(i5 13500H/32GB/1TB/RTX3050 6G) ==7800==\nPro 16只有一个32GB , RTX 3050, i5\n2KG\n‍\ni5, CPU等提升的不多, 可能过几年就不行了\n‍\n因此基本PASS\n‍\n‍\n# 游戏本 附加可选\n①高色域+②高刷新+③支持独显直连+④显卡满功耗+⑤2.5K屏+⑥支持PD充电+⑦全尺寸方向键/数字小键盘/RGBB背光等。\n追求更强的性能，性能比轻薄本强很多，外形较浮夸，代价是体积和重量相对较大，机身偏厚重，插电才能保证性能完全释放。\n游戏本适合中重度游戏玩家，以及内容创作者，例如较为复杂的视频剪辑、3D建模等\n根据互补原则, 还是游戏本好, 有些标注16GB事实上有插槽可扩展就是只要折腾一下了\nCPU刚好, 内存刚好, 游戏本, 容量焦虑, 独显3060附近.\n至少32GB即用 + 游戏本互补配置 + 独显 配置 只有机械师\n机械革命、雷神、机械师，这难兄难弟的，没一个靠谱的。或者说靠不靠谱看脸\n品控不行, 想用的久更不行, 这里还是等等罢\n‍\n# 联想拯救者 R7000 2023 ‍\n# 联想拯救者 R7000 2024 处理器：R7-7840H\n显卡：RTX4060\n屏幕：100%sRGB高色域+144hz高刷屏\n内存：16G（双内存插槽）\n硬盘：512G（双硬盘位）\n历史低价：6499RMB 总结：主打低价、高性能的一线品牌主流游戏本。优点是一线品牌、相对低的价格、高性能、A面金属整体做工还可以。缺点是屏幕亮度一般（300尼特）、16：9下巴略大、1080P分辨率较平庸。（有预算的话还是建议Y7000P）\n‍\n‍\n# 联想拯救者Y7000P 2024 首发 7300\nRTX4050 + i7 最新 +32G + 1TB\n2.43KG\n==采用== ==单条16GB DDR5== ==5600内存，更方便需要大容量内存的生产力用户升级，如果是双8G，还需要考虑换下来的旧内存该如何处理；标配==​**==1TB大容量固态==**​==，预留M.2接口支持扩展；==\n‍\n# 联想拯救者 Y7000P 2023(i5 13500H/32GB/2TB/RTX 4050 == RTX 3060) 目前最适合**==7700==**\n2023年04月24日 上线\n‍\nDDR5 5200MHz\n‍\n# 联想拯救者 R9000P 2023(R7 7745HX/32GB/2TB/RTX 4060) 8700 超了\n都是16GB, 支持拓展\n‍\n‍\n‍\n# 惠普暗影精灵9 处理器：i5-13500HX\n显卡：RTX4060\n总结：主打低价、性价比的一线品牌游戏本。13代酷睿+RTX4060+2.5K屏，产品力很强，缺点是屏幕亮度相对一般（300尼特），以及大下巴（16：9的屏）。\n‍\n‍\n# 宏碁掠夺者·擎Neo(i5 13500HX/16GB/512GB/RTX4060) 14核i5-13500HX 16G 512G RTX4060 2.5K\n都是16GB, 支持拓展\n有双雷电四、MicroSD读卡器等接口等配置，是目前万元以内少有的支持双雷电的2023款游戏本\n‍\n宏碁擎Neo 4060 2.5K屏版活动价在7600左右，属于这个价位段的性价比型号\n‍\n‍\n‍\n# 华硕天选5 Pro i7-9 13650HX/16GB/1TB/RTX4060 ==最大内存容量\t64GB!!==\ni7-13650HX版和i9-13980HX版只差200元，那还是选i9-13980HX版本\n‍\n屏幕从15.6英寸、16:9比例升级成16英寸、16:10比例，2.5K 165Hz高色域屏，400nit亮度， 90%屏占比，下边框比上代变窄了，好评；\n16:10 需要, 因为自己的小米笔记本是16: 10的, 考虑兼容性需要\n双8G DDR5变成单条16G DDR5, 可以直接扩展\n1TB固态，双硬盘位；\n2.27kg可以接受\n照例是90Wh电池，支持100W PD快充，能够减轻旅行重量\n‍\n缺点：祖传半高方向键等(无所谓)；续航相比上代下降（毕竟处理器等级变高）\n天选5 Pro i9-13980HX 4060灰色版首发价​**==8499==​元**，想买天选的用户建议优先选这款（魔幻青配色要更贵三百元）。\n‍\n‍\n# ==华硕天选5 Pro AMD== 晋级\n‍\n# 中 - Watch 保持观察, 如果价格低赶紧买入\n经过反复比对认为合适的游戏本(其他都死了)\n‍\n‍\n# 联想拯救者 综合产品力最好。综合素质很强，没有明显短板\n‍\n# 联想拯救者 Y7000P 2024 拯救者Y7000P，性价比主推的还是i7-14650HX+4060版本，首发价7999元\nRTX4050 + i7 最新 +32G + 1TB\n单条16GB DDR5 5600内存\n​标配1TB大容量固态，预留M.2接口支持扩展；\n整机性能释放直接从160W提升到190W\n‍\n最重，在携带方便最不友好\n‍\n‍\n# 联想拯救者 Y7000P 2023(i5 13500H/32GB/2TB/RTX 4050 == RTX 3060) 目前最适合**==7700==**\n==双内存条pass==\n2023年04月24日 上线\nDDR5 5200MHz\n‍\n‍\n# 惠普暗影精灵 # 惠普暗影精灵9 处理器：i5-13500HX\n显卡：RTX4060\n总结：主打低价、性价比的一线品牌游戏本。13代酷睿+RTX4060+2.5K屏，产品力很强，缺点是屏幕亮度相对一般（300尼特），以及大下巴（16：9的屏）。\n主打一个游戏体验\n==主打游戏的pass==\n‍\n# 宏碁 # 宏碁掠夺者·擎Neo(i5 13500HX/16GB/512GB/RTX4060) 14核i5-13500HX 16G 512G RTX4060 2.5K\n都是16GB, 支持拓展\n有双雷电四、MicroSD读卡器等接口等配置，是目前万元以内少有的支持双雷电的2023款游戏本\n宏碁擎Neo 4060 2.5K屏版活动价在7600左右，属于这个价位段的性价比型号\n‍\n‍\n# 华硕天选 ‍\n问题\n小毛病还是有, 要自己鼓捣\n网卡硬盘堆叠设计，积热容易掉网卡。\n华硕天选祖传的小问题不少，什么掉网卡连不上蓝牙之类的，配置方面倒是没什么问题\n‍\n点评\n可以算是轻薄游戏本, 但只是轻，其实机身厚度并不比其它游戏本薄; 好看而且携带方便不明显\n隔壁的同版本的Y7000P都已经干到了==至高的190W性能释放==，直逼高端游戏本，天选5 Pro整机性能释放160W的性能释放基本处在同级别垫底的存在了!!!\n天选5 Pro酷睿版唯一的优势版本就是13代i9+4060可以打Y7000P（14代i7+4060），虽然整机性能释放弱点，但终究i9的基本实力更强，况且价差不大，甚至活动期同价\n天选5 Pro锐龙版也没有优势，隔壁还有高端且卡位的R9000P存在\n‍\n‍\n# 华硕天选5 Intel Pro i7-9 13650HX/16GB/1TB/RTX4060(50) 天选5 Pro i9-13980HX 4060灰色版首发价**==8499==**元推荐(当前贵500)\n‍\n可选型号 - 价格 (8000-9000)\n13代 i9 4060 9000 +400 (值)\n13代 i7 4060 8600 +500 (值)\n13代 i7 4050 8100 +0 (乞丐版)\n‍\n4060没货, 8600的, 也没有AMD于是暂时作罢看天选姬\n‍\n‍\n# 华硕天选5 AMD R9-7940HX 16G 1T RTX4060 2.5K 165Hz 高色域)灰 8000\n‍\n‍\n‍\n# 优势 屏幕从15.6英寸、16:9比例升级成16英寸、16:10比例，2.5K 165Hz高色域屏，400nit亮度， 90%屏占比，下边框比上代变窄了，好评；显卡热切换\n16:10 需要, 因为自己的小米笔记本是16;10的, 考虑兼容性需要\n单条16G DDR5可以直接扩展 ==最大内存容量\t64GB!!==\n不送微软办公软件, 挺好, 不用去卸载了\n‍\n天选5Pro这一代有性价比的, 相较之前屏换了，内存成单条16g了，升级最大的其实就是这俩\n‍\n# CPU R9-7940HX 积热严重 主要是AMD cpu的原因 无可厚非, 续航比Intel差, 风扇吵然后非常的热; 还是WiFi6，都可以传宗接代了\n还有旧款\nR9-7940HX，单核5.25G\nR9-7945HX，单核5.45G\n多核的性能差不多，单核略有一丁点儿区别，单核人类根本无感，当做这俩CPU没差别就是了。\n相较于intel的i9-13980HX、i9-14900HX（多核26286分），这个R9-7940HX（多核32695分）强太多\n‍\n‍\n# 后 - Check 两位选手进入决赛圈\n华硕天选5 AMD VS 联想拯救者 Y7000P\n后面都要立刻+300换内存, 所谓的换网卡这个折腾就看起来不麻烦了\n‍\n‍\n# 华硕天选5 锐龙 R9-7940HX 8000 元 当前回归首发优惠\n7999元起售价, 换皮+300 -\u0026gt;换内存\n目前最优选, 下面根据往期价格变动选择何时入手\n最大支持32GB x2的扩展\n‍\n新点评\n2024年度的真香机\n天选的优势在于锐龙9 7940HX带来了趋近极致的CPU算力\n天选锐龙版现在全部是螃蟹网卡，到手还得换一下，麻烦\n除非今年的笔记本有非常显著的外围配置提升，比如天选5 Pro的屏幕，那你确实可以考虑今年的笔记本。\n锐龙9 7940HX，这颗处理器其实就是锐龙9 7945HX的降频版，拥有完整的16大核32线程，内置80MB高速缓存（L2+L3），只是最高加速频率从5.4GHz降至5.2GHz。该产品同样标配16GB内存，1TB PCIe 4.0 SSD，可选RTX 4060和4070独显，如今首发优惠已经结束，京东自营旗舰店报价已经涨到了8499元和9499元\n升级内存，可以直接购买一根16GB DDR5 5600MHz同规格的高速笔记本电脑内存，装到预留的一个内存插槽，便可为华硕天选5 Pro组成了16GB+16GB双通道内存（共32GB），比较贴心。\n‍\n补充下面的总充电功率不够拿电池来凑问题\n酷睿版标配充电器就230w，只有4070配了280w，所以5p官方就是主推锐龙版的，从标配就280了。记得可以在电池策略改，具体找B站麦香佬测r7kp那两期，那机器一样毛病，但我印象里5p默认应该是关掉的啊\n‍\n不考虑预算，这两者都靠边站了。即将上市的ThinkBook 16p 2024或者拯救者Y9000P才是最佳选择，轻薄游戏本的机身和设计释放出了堪比专业电竞游戏本的性能，并且拓展能力、机身接口、屏幕都一等一的优秀，这样的产品才值得推荐。\n‍\n选择华硕天选5 Pro看重它的轻?便携？那就错了，传统游戏本的便携只是噱头，华硕天选5Pro确实轻，只有2.2Kg，比专业的电竞游戏本要轻0.3Kg左右，但它不薄呀。而且只支持100W的PD充电，外出使用如果带是原装电源适配器，也是相当重的，PD充电功率又不够。\n最主要是性能残废，仅160W的整机性能释放，在2024年的游戏本里面，基本是最差的。屏幕还算是中规中矩，16英寸16：10的2.5K分辨率，165Hz刷新率，400尼特亮度。\n华硕天选比较大的不足是，散热不够，性能不够，机身接口少，键盘设计也比较难用。优点就是轻，只是轻，但并不便携。\n联想拯救者Y7000P 2024主要是价格卡位精准，同时性能也提升了。搭载14代英特尔酷睿处理器，RTX4060显卡版本仅八千左右，RTX4070显卡版本仅九千左右。不过采用了内吹散热，性能提升得比较多，整机性能释放达到190W。屏幕也不算差，16英寸16：10的2.5K分辨率，165Hz刷新率，350尼特亮度。机身确实比华硕天选要重，约2.4Kg，但支持140W的PD充电，有这么高功率的PD充电，便携时可得到更好的性能。\n就华硕天选5Pro和拯救者Y7000P中选择，同样的RTX4070显卡版本，Y7000P要便宜一千多块，可以优先考虑。而天选的RTX4070版本采用的是13代英特尔处理器，加上散热不够和价格贵，是真心不建议选择。\n‍\n# 联想拯救者 Y7000P 无锐龙 8800 元 + 内存 9000 Pass\n‍\ni7-14700HX\nRTX4060\nDDR5内存频率 5600MHz\n2560*1600 165Hz 电竞屏 350尼特\n‍\n4070以下的版本阉割电源和硬盘，联想你真是个天才啊，4050阉割我就认了，4060也能阉割我是没想到的，4060所需的功耗与4070几乎一致，给300W电源是非常合理的，可就是阉割了。\n阉割充电能力, 最大场景会消耗电源???lose\nLOSE!\n‍\n其实这里我不知道天选最大场景会不会消耗电池电源, 比较偏颇, 其实算是战场一边倒后对于弱者的介错罢\n2024-04-07 20:00:57为了科学严谨的精神, 检索了贴吧, 确认了天选也掉电池电源(最高功率), 但是锐龙板不会, 因为其电源升级了(锐龙较首发intel后出, 后面给的)\n‍\n‍\n‍\n# 后 - stay ‍\n两者都需要折腾(预计总计需要10天产能组装), 并且或多或少存在抽签问题\n最近没时间了真的, 到时候618也是; 但是错过首发价 可能要等比较大的折扣了\n‍\n‍\n历史最低当前是查询商品历史价格走势（支持京东，天猫，淘宝等）APP - 慢慢买 (manmanbuy.com)\n7960, 便宜40块?, 当前百亿补贴, 差不多完全是首发价, 那么后面降价也是这样\n2024年笔记本电脑选购推荐全攻略（4月） (zhihu.com)\n一年在什么时候买笔记本电脑最便宜？ - 知乎 (zhihu.com)\n‍\n这里我就开始对价格腿软了\n‍\n# 末 - round ASUS华硕天选5 Pro价格_配置_跑分_值得买吗-华硕商城\n因为是首发价, 并且等不到618, 综合考虑只有现在能给我训练新兵组成战力的时间, 因此只能现在购买了 (晚上图书馆做出的心理决定)\n在小红书得到建议, 去校园商城看看, 在华硕商城价格是一样的首发价, 推荐说是官方正品直销, 需要上传学生证来验证身份享受三年延保, 那么今晚做一下罢\n(其实没有也无所谓)\n‍\n# 新的子类 R9 7845HX R9 7940HX\n‍\n7845是没有核显的, 但是性能更好, 便宜 7700 - 京东 - 赠送背包和鼠标 - 百亿补贴\n是属于14代i7 - 14650HX水平, 7940两个小版本\n主频3.0 GHz, 最高睿频5.2 GHz\n64M高速缓存\n线程\t12核24线程\n去年3月份的芯片，去库存的吧来源很奇怪, 众说纷纭, 但是毕竟CPU不打紧, 真是百亿补贴真可以冲\n核显直接用独显解决, 反正不考虑续航\n7940核显强 8000\n是属于14代i9 - 14900HX水平\n都是吕布\n64M高速缓存\n线程\t16核32线程\n# 纠结 这里就很纠结了, 一边是更好性能, 一边是更高性价比\u0026hellip;?\n两个选一个, 吕布和张辽那肯定选张辽啊 \u0026ndash;\u0026gt; 错错错, 这颗U的性能很强, 真的值! 买新不买旧, 还是新的\n那就确认了8000原机带走.\n早上10点才做好选择, 花了半小时\n‍\n今天天选决定了锐龙版7999拿下, 学生优惠能加进去100京东, 华硕学生商城不给过就算了, 只有指定机型才有. 先保护好会员, 然后准备官网吧\n啊? 不行, 没有赠品, 7845HX确实是去年的U, 百亿补贴什么的还是算了, 太小众没有老哥维护\n‍\n# 结 - money ‍\n裸机+保修3年有8300元, 加上内存(350)和网卡(50)和售后100拆机换硬盘位置(100) = 500, 总共需要8800, 加跑腿维护50, 总成本低于最高预算9000.\n因此盯紧这个预售价7999, 京东和官方两个看看.\n‍\n京东 三年-440 +清洁+40\n后封机 -50 -450\n‍\n官网 ==鼠标 +50 三年全面(1+1 -\u0026gt; 3+3) -500== 三年-430\n原装机 - 450\n需要一个鼠标, 那么就官网买了\n‍\n但是最后换性价比合适的8278 - 8280\n后面需要加400配件 + 100人工费, 总计8800\n‍\n2024-04-07 1点整 购买支付!\n支付宝爆出存在被骗风险!!! 把我给锁了, 最后还是微信\n‍\n‍\n# 复盘 - 选电脑 ‍\n‍\n# 第零步 一念神佛 ‍\n下面要复盘一下整个流程\n首先是缘起, 主要是日常积累下来的不习惯在内存问题上爆发了, 于是我突然对这台电脑的失望大幅上升. 同时通过下午的简单搜索, 发现这台笔记本轻薄本是板载内存, 完全无法自己换内存. 于是准备更进一步\n同时考虑到未来的学业以及工作需要, 自己的机器确实需要升级了, 要赶在7月之前. 入手时间原本定在6月中的, 但是6月非常忙, 我又要实习面试又要期末课设, 还要期末复习加上搬家准备, 可以说是完全没有转圜的余地, 在这种情况下我很难让我的机子获得战斗力(需要训练和熟悉的时间)\n于是4月5号星期五, 我饭吃完了去操场整理了思路, 觉得可以开始看了. 于是那天晚上就开始检索.\n‍\n‍\n‍\n‍\n# 第一步 方法论 ‍\n确定该如何选择\n多维思考\n首先我列举了我需要的和不需要的配置, 各种角度都罗列了出来, 确定了定位基本是自己轻薄本的反面\n事实上这个时候就可以跳过所谓轻薄本类型的家伙直接跳到游戏本这里了\n这里还有个问题, 没有提前确定预算, 导致刚开始没有检索的条理性\n最大的问题是, 刚开始时自己没有意识到: 自己是真的火烧眉毛了, 真的非买不可的家伙, 很急. (见内存爆炸事件), 导致刚开始还在做所谓持久战打算, 但是第二天主观的改变了思路, 认为是首发价就买, 当时主要还是考虑能不能在6月前形成战力的事情, 并没有觉得当下自己已经快要完蛋了 \u0026ndash; 过于关注选电脑这件事但是没有理清楚自己的轻重缓急是什么\n然后了解了电脑的价格变化, 当时还是打算冲618\n‍\n# 第二步 广撒网 不光是比对网站上, 还有博主推荐的我都看看, 主要考虑的是内存情况\n不断的检索中, 最后还是回到了32GB + 内存拓展性好的机子上, 分的三个层级基本划归为两派\n根据主观需求以及事实, 将区间缩小到游戏本, 内存可拓展好 + 显卡3060级别(入门) + 较强CPU能撑几年, 开始有了看的多的地方, 也了解了牌子的口碑\n‍\n# 第三步 优选 根据牌子划分类别 - Watch环节, 然后记录可选参数对比, 到了这一步思路就清晰了, 简单排除几个就剩下华硕和联想两家游戏本 天选和Y7000p的争夺, 内部还有细分\n根据几个法则淘汰了其对应的去年产品, 专注新版的两个型号, 详细搜集信息\n但是此时我就意识到, 有华硕滤镜的自己很难不想去尝试一下二次元风味浓厚的\u0026quot;天选系列\u0026quot;, 自己的重心也逐渐转移到天选这了(12年粉丝滤镜)\n结束性能测试, 基本没差别, 那么进入3者残酷的性价比考验环节, 两个intel的都很贵, 没有货居多, 涨价很多, 但是AMD的天选有货, 抱着所谓AMD YES心态和所谓定位问题, 我进去看看价格, AMD的和首发价一样8000, 在还有3天不到的活动中, 而intel的没货, 我立刻意识到了这是个机会 \u0026ndash; 我倒狗屎运了?\n这时候已经是第二天中午了, 我还在看电脑, 我开始意识到事情变得失去控制了, 我本来不打算进行下去的, 但是有一股冲量在挤压着我. 于是针对这这一款我开始疯狂刷哔站, 知乎, 贴吧, 甚至从来没打开的小红书\u0026hellip;! 一直到晚上图书馆7点, 我还在看, 甚至到9点了图书馆都要关门了我还在选电脑, 因为我彻底被这个该死的烧鸡迷住了! Oh gosh\n甚至因为之前我全盘接手了金山软件后对于没有装Office是好似, 开香槟的态度\u0026hellip;乐\n于是,\n4.6中午-下午判断最优选, 下午15点天选姬锐龙版打赢了! 但是又出现了对手\u0026hellip;\n‍\n# 第四步 购买攻略 这里我进行了一个挂起操作, 4.6, 清明节最后一天4点到5点选择将两者都放入观察队列, 就先不做决定\n‍\n在5点半到6点半的短短一小时内, 出现了几个转折点事件, 我意识到我应该下手了\n(隐藏)\n‍\n晚上开始京东和华硕商城两个地方对2个子类4个对象进行观察(锐龙和次一点的芯片)\n到第二天早上了还在纠结选哪个, 这个是没有必要的, 性价比一目了然了, 事实上只是因为预算有点不够了的原因抠抠搜搜的(\u0026lt;9000, 太大了不好)\n‍\n# 第五步 确认键 最终确定了是正常的新U AMD, 那么就只剩下两个维度了, 官网和JD, 官网学生认证不行, 上传不了, 自己大三了也不能保到25年, 等于没有(我也不想什么活动, 于是作罢认证)\n但是官网有送鼠标一个, 做春日活动还便宜100多, 服务也好, 保证新机; 于是午饭饭后发现JD不行, 遂准备官网付款了.\n上车过程到此结束, 下车见另外的鼓捣记录(长篇)\n‍\nEND\n‍\n二次修订于2024-04-28\n部分攻略介绍摘自网络, 仅供参考\n","permalink":"https://spadektlsg.github.io/p/2024.4pc%E4%B8%BB%E5%8A%9B%E6%9C%BA%E9%80%89%E6%8B%A9/","tags":[],"title":"2024.4PC主力机选择"},{"categories":[],"contents":"‍\n# Readme fix SK 批评, 是我记录一些计算机学习-个人生活外东西的地方: 知识也好, 舆情也好. 这些对象必定让我投入一定量的时间去阅读, 去体会, 于是我会写下一些感想(当然大多时候是很短的, 也有多的, 当然可能我不会展示出来)\n我也知道, 这样的东西一定会是充满\u0026quot;火药味\u0026quot;的 \u0026ndash; 我不能保证我的观点没有偏颇, 也无法保证资料的真实性, 但我只能保证我去看了, 去做了, 去思考了. 你可以指出不足, 发表自己的见解. (我完全不会进行限制, 除非你越过了\u0026quot;边界\u0026quot;)\n‍ 以上为第一期 SK 批评, 因大多数材料来自旧日的搜集整理, 其中文档链接已无处可寻, 因此首先感谢引用的各处材料的作者\n之后等手头搜集量够了, 第二期 SK 批评也将奉上(预计 2024 Aug.)\n部分内容包含个人隐私或是敏感内容, 被隐藏. 本地存储完整版\nSK修订于4.29, 2024\n是为SK批评01改\n# Readme 这里是第一篇的 SK 批评, 主要记录了 2023.7-2024.3 的各种杂物集合, 排除出笔记体系的家伙.\n主要的产出内容就是拾遗, 整合过去留下的内容, 加上自己的整合和评论, 然后输出.\n在这一环节中我等于锻炼了口才, 同时联系了知识整合能力.\n是为批评 01.\n部分内容篇幅缺少, 因此不记录\n2024-03-24 - 并在一段时间内维护添加新内容\n‍\n# 赛博篇 # 交换 WIP 代码：使用 patch 而不要直接传递文件 有时候我们团队开发需要相互交流代码。最为正式的方式是发起 PR / MR，在标题中注明 RFC 或 WIP。这里 RFC 是 req for comments 的意思。\n内部松散一点的代码是可以通过 push 到个人的 repo 或者 branch 上进行交流的。这也是我推荐的方式：在 repo 中的代码是活的，脱离了 repo 的代码是死掉的尸体。\n在老派的社区中，以及偶尔的外部开发者之间，我们使用邮件或者微信、QQ 等形式来发送的时候，可能推荐的方法不好使用。那么这时候就需要用 patch。\npatch 可以用 git diff 或者 git format-patch 来生成。\npatch set 是对应着一个 branch 上一系列的 commits。用 patch set 组织代码更加清晰，patch 更小，容易 review。同时， 要注意，每一个 patch 都要求不破坏项目的构建和回归测试，不然的话，后续的 git bisect 会造成干扰。\npatch 还有一个我们非常看重的要素，就是注明了作者是谁。而直接传递文件，对于调试和确认两遍的代码是不是一致，带来了巨大的隐患。同时，也无法将贡献者的荣耀落于作者之上。\n对于员工是严格禁止直接文件来回拷贝的。对于实习生，我们的要求要宽松一些，尽量使用 patch。LV2 以下员工如果 git 操作不熟练，或者传递的是 docx 等二进制文档等，那么则通过文件名添加版本号和文件内的修订记录来进行区分和跟踪。\n# 已经提交了 PR/MR 的 branch 和 repo，避免删除或撤销 已经提交 MR 或者 PR 给 mentor/reviewer 审核的代码，默认是禁止撤销的。尤其是已经被 review、留下了评论意见之后。 撤销了。我花时间写的 review 意见就悬空了。这样对于我在内的任何 reviewer 都是不礼貌的。 在 upstream 社区做事尤其要注意。 删除自己的仓库也是同样的，会导致评论针对的 branch/commits 丢失，是不礼貌的。\n# 为新的项目建立 CI/CD 机制 凡是由于项目交付压力在深夜掉头发的人，都会知道一个自动化的、有效运行的 CI/CD 机制是多么能够抚慰心灵。\n以 Clang/LLVM 项目为例，介绍如何自己搭建一个 CI/CD。\n0x00 准备工作\n首先，代码需要有版本管理。而版本管理现在基本上都是 git。其他管理工具都是类似，只要有命令行工具就 OK。\n0x01 完成敲回车就一条龙完成的脚本\n第二，现在的代码仓库是需要能够被手工构建成功的。如果本身自己手工都还没有构建成功，就先停下来手头的工作， 把这件事情做好。可能有同学会问，有很多组件和函数都还没有实现，怎么办？答案是写一系列的空的函数， 能够保证其他部分可以正常被编译，最低要求是可以被编译构建成功，稍微进一点的要求是可以有一个固定的正确但是没用的返回结果， 让其他部分的构建和测试用例可以完成。\n手工可以构建完成之后，接下来就是写到一个脚本里。以 Clang/LLVM 为例，一般的流程是：\n# clone # 下载 # checkout # 到正确的分之 # status # 检查是否 clean # git submodule update -r -f --init # 如果有子仓库 mkdir build cd build cmake -DXXX_XX=YYY .. make -j $(nproc) make check # or make test 就是帮助运行回归测试 在一个新开的 terminal 中，完成以上一系列行为。然后用\n::history 命令，复制下来，到一个 build.sh 中，编辑。\n简单但是非常重要的一个验证是，切换到另一个目录下，运行 build.sh 看看是否可以成功构建。如果可以，那么进入下一步。\n到目前为止，已经有了一个比较好用的脚本，可以方便的进行构建了。\n0x02 只有一个 git remote\n假设没有 gitlab 也没有 github， 所有人的代码都是（或许有人工 review 后） push 到一个分支，假设是 develop。\n那么至少可以做自动化的是推送后的构建测试。写个 for 循环：\n# Clone # clone # 下载 # checkout # 到正确的分之 # status # 检查是否 clean while sleep 600 # 每隔10分钟 do git pull ./build.sh || notify-or-send-mail done 就完成了最为简单的推送后 CI 测试。\n没错的，就是这么简单的。没有什么花哨的概念。\n核心是： （1）挂了有人看有人及时修复，主线分支不修复好，禁止推送新代码； （2）build.sh 跟这个循环的内容都需要跟项目的开发变更一起更新。\n0x03 使用 gitlab CI/CD：写配置文件\n有了上一步的脚本之后。剩下来的工作就简单了。\n注意，这里的做法跟官方和网上常见的做法都是不同的：这里教授的是 个人或十人以下小团队 从没有 CI 到有 CI 痛苦和麻烦程度最小的途径。 等 CI 建立起来之后，可以再琢磨如何使用更为正统和 docker 的方式来进行。\n如果项目有一个 gitlab，那么在项目根目录放一个 .gitlab-ci.yml 这是例子\n$ cat .gitlab-ci.yml before_script: build: stage: build tags: - rvv-llvm # 用来指定构建runner的 script: - ./build.sh $ cat build.sh set -e mkdir build cd build cmake -DLLVM_TARGETS_TO_BUILD=\u0026#34;X86;RISCV\u0026#34; -DLLVM_ENABLE_PROJECTS=\u0026#34;clang;compiler-rt;lld\u0026#34; -G Ninja ../llvm ninja ninja check 0x04 使用 gitlab CI/CD：配置 runner\n然后就是设置 gitlab-runner。\n首先假设是 linux。别的系统请自己折腾。\n按照 https://docs.gitlab.com/runner/install/linux-manually.html 国内请务必直接（可能要海外）下载一个二进制然后就开始干，不要用 apt 来安装，很慢。\n之后进入项目的配置主页（需要是 gitlab 这个项目 maintainer 以上的人） 项目页面左下角 Settings - CI/CD 展开 Runners 看到\nSet up a specific Runner manually Install GitLab Runner Specify the following URL during the Runner setup: 【你要复制粘贴的网址】 Use the following registration token during setup: 【一会儿要用到的token】 然后按照 https://docs.gitlab.com/runner/install/linux-manually.html 和 https://docs.gitlab.com/runner/register/ 进行注册。注册时候就要用到刚才显示的网址和 token。\n注意会要求输入 tag 这个 tag 是跟上文中 gitlab-ci 文件中的 tag 对应的。是 runner 的筛选机制。\n同时运行环境的时候选择 shell 。注意这里的前提是简单，而且所有有推送权限的人都是可以信任的。 否则有 git 推送权限的人有可能控制 shell 模式 gitlab runner 所在的机器。 当然，这里我们只是个人使用或者微型团队，此类 RCE 问题不考虑。\n之后并不会立即启动，而是需要使用\nsudo gitlab-runner start 类似的命令（我记不清了）来启动。启动之后就会看到一些输出了。同时请务必在 tmux 中进行，避免掉线。\n接下来就可以从 repo 页面的左边的 CI/CD - jobs 看到运行结果了。\n一开始可能会有一些问题，常见的有：\n没有 runner，卡住。（1）查看 runner 跟 gitlab 站点的通信时间，是否成功链接上了；（2）查看是否 tag 是匹配的。\n脚本执行过程错误。恭喜，这里环境就已经构建好了。根据错误提示，判断是代码提交的 bug（那就开 issue）或者解决脚本自己的 bug（分析、修改）\n0x05 搞定了，然后持续维护起来\n坏了就赶紧修。这是 CI/CD 的第一原则。可能也是唯一普遍使用的原则。\n# 赠言 - CS 自救手册 # Header \u0026ndash;我，将力图根据我三年的体验，为你挑选生存的道路\n‍\n主要内容来自 CS生存/自救指南手册\n‍\nps: 整理完这些的时候, 连最后的 3 个月也过了 10 天了\u0026hellip; 2023-10-10\n长久以来，我作为这个学校里最普通的一员，一直在思考这样一个问题：究竟是什么，让中国绝大部分本科院校的计算机本科培养体系已经濒临崩溃。四川大学，作为一所典型的中/末流 985 院校，计算机科学的本科培养的质量，很遗憾，和他的几十个，上百个兄弟姐妹院校一样摇摇欲坠。\n你也许与你的室友们一样，现在是计算机相关专业的学生，听完课程觉得什么都学不到，又或者只能通过背诵专业术语和考题来祈求在无聊又低质量的应试测评中多拿一点可怜的分数，亦或者你早就厌倦了这样\u0026quot;学习\u0026lt;-\u0026gt;考试\u0026quot;的循环，早就想找到另一条出路。\n你也许跟曾经的我一样，学着不感兴趣/没有前途的“天坑专业”，各种创新班、拔尖班、荣誉学院对于你也只是远在天边。当你发现有的同学中学时代已经积累了深厚的计算机基础，而自己却一窍不通，但你心中向往真正的计算机科学，然而苦于没有门路，处处碰壁，遭受冷眼，所有你所希望的——只是一个正当的，不用被老师赶走的，坐在计算机课程教室里的理由与资格。\n又或者幸运/努力的你已经有了不错的基础，考虑到个人性格和家庭因素，就业成为了你的第一选择，当你寻找实习岗位的时候，看着各个大厂高大上的 Job Description，你时常怀疑自己是否真的有能力成为那些正在创造与改变世界的工程师中的一员。\n也有可能，你决心深造，继续在对应的领域进行深入的探索。出国、保研、考研究竟应该怎么选择。绩点/成绩究竟重不重要？论文应该如何发表？发表什么样的论文？什么是套瓷，不同的国家，不同的项目又有什么区别，保研夏令营又能做些什么，考研如何安排合理的时间线。这也许是你心底的疑问。\n\u0026hellip;\u0026hellip;\n在这份手册中，我们不想单纯的灌输对于现状的戾气，更不仅仅是没有意义的情绪发泄。在驱散迷雾的同时，我们希望能为你注入一些 “黄金精神”，希望能为你在未来的每一次抉择提供指引与勇气，正如歌词里所唱到的：\n“西郊有密林，助君出重围。”\n‍\n最后，笔者永远相信语言作为一种表达的力量，也永远明白任何一种表达的片面。但如果这里的这些文字，能够带给你更多的思考，那便笔者将不胜欣喜感激。同时，笔者也祝每一位看到这里的朋友，成功找到属于自己的人生叙事。\n‍\n# 可能焦虑的你大体上有三种选择 ‍\n须知参差多态，乃幸福本源。 ——罗素\n首先，最最重要的，尊重每一种被主动选择的生活方式（涉及违法犯罪的生活方式不在讨论范围内）。无客观好坏，无客观高下，只要更加适合你的，你满意的，那就够了。\n然后，其实笔者觉得大多数不满足于现状的同学们都难逃焦虑带来的影响吧，只是说程度可能不同。\n‍\n在这种情况，可能焦虑的你大体上有三种选择：\n‍\n第一种就是遵守并摸透现有游戏规则，从游戏本身种获得快乐，这个我们可以把它称之为硬卷。\n‍\n就是在你有能力，有精力，有意愿这样做的情况下，不管现有评价体系是否变态，尽可能的完全去拟合游戏规则，以谋得游戏胜出。当然个人不推荐这种方法，更浪费时间，以及片面的追求局部最优解会导致后续的各种问题。同时，其实缺乏对评价体系本身的思考，也是一种懒惰吧，就是用战术上的勤奋掩盖战略上的懒惰。 当然，如果你的兴趣就在于在人生子游戏中卷赢别人，那你开心最重要。\n‍\n第二种就是找你觉得合适的游戏。\n‍\n什么是合适的游戏呢，就是对于你个人更长远的人生目标来说，有更加正常评价体系的游戏。比方说，有同学可能不喜欢 A 游戏的评价方式，更喜欢 B 游戏的那一套，那你就去玩 B 游戏。不论说是因为你觉得 B 游戏本身对于你来说是更好的选择，还是说你觉得这个体系更符合你未来的人生规划，可以成为促进你人生发展的一环。打个比方比如保研会看综测排名，这块有部分要求你的竞赛成果（诸如大创这些）。但是这类指标跟个人能力和后期发展潜力并不完全正相关的。比方说有些比赛就是 PPT 和文案比赛，但是在保研里面加分权重又大，这种情况下，你去卷这些比赛，纯纯为了拟合保研的游戏规则，而忽视规则应该映射的你的个人能力和发展潜力，就有些本末倒置了。所以这类竞赛对一些希望得到技术能力提升的同学来说不能算得上合适的游戏。\n‍\n第三种就是自己制定一套属于自己的游戏规则玩自己的人生游戏。就是你不管它任何评价体系摆在那儿的，就使劲钻自己感兴趣的工作或者研究领域，努力促成能力和兴趣的循环。\n‍\n这种情况下，只要你有足够的热情还有相应的规划以及执行力，你肯定能收获巨大的快乐和巨大的满足感。当然，从现实一点的角度讲的话，这个过程中不要忽略职业发展的道路和前景。 三者兼备就能有又有钱又有快乐满足的理想生活了。但是要知道三全很难，非常依赖个人的独立思考和判断以及钻研精神以及承担可能风险的底气。同时，对有着与众不同追求的这类人，笔者这里抱有尊重的态度，并且觉得只要是经过成熟思考和判断之后的这种选择，都是值得被鼓励的，笔者也相信世界上总有那么一些人，有着跟普罗大众不一样的追求，可能给世界带来更多不一样的东西。\n写到这里，想起《明朝那些事儿》关于为什么要把压轴大戏给游山玩水的徐霞客这个问题，当年明月这样说：“我之所以写徐霞客，是想告诉你：所谓百年功名、千秋霸业、万古流芳，与一件事情相比，其实算不了什么。这件事情就是——用你喜欢的方式度过一生。” 千篇一律的主流叙事之外，人生有无限的可能。\n‍\n‍\n‍\n‍\n‍\n‍\n‍\n‍\n# 计算机方向 参考 CSRankings 对于计算机研究方向的分类，并不全面\n‍\nAI：AI 领域大家都比较熟了，就不介绍了\nArtificial intelligence Computer vision Machine learning \u0026amp; data mining Natural language processing The Web \u0026amp; information retrieval：跟 Deep Learning 三大应用之一的搜广推密切相关，目前的细分方向主要有认知搜索（与脑机接口技术结合）、神经搜索（以跨模态检索为主，把不同种类的数据按照同样的结构做向量化存储，同时对已有不同数据库支持 vector search 和 filter）以及搜索引擎中的公平性与隐私性（在 Trustworthy ML 研究范围之内），THUIR 的 work 基本代表了国内最前沿的研究 System：着重介绍下 System 系统领域\nComputer Architecture：顾名思义，计算机体系结构主要研究计算机本身的架构等，包括 CPU 和 GPU 等的架构，本身这个研究方向会比较偏向硬件；这一部分研究和 Operating system 的研究会有部分重合； Computer Networks：计算机网络主要研究为当前的网络环境提出更合适的协议，优化网络协议，软件定义网络，以及对网络架构进行优化和加速等；网络领域的科研往往需要比较大规模的实验，现在的这个方向 Computer security：计算机安全主要研究系统安全、软件安全、网络安全等，现在的安全研究也扩展到了对一些新兴技术的安全研究，比如 AI 模型本身的安全性等 Databases：数据库当前前沿研究主要聚焦于如何优化数据库的存储速度等 Design automation：不了解（逃 Embedded \u0026amp; real time system：不了解（逃 High-performance computing：高性能计算主要是超算相关的技术等，包括一些分布式系统加速，主要就是优化当前的大型大规模计算系统的速度和效率 Mobile computing：移动计算相关研究主要关注边缘计算等，比如说边缘计算中的小型 AI 模型的加速、模型压缩等 Measurement \u0026amp; performance analysis：测量等主要关注对当前网络环境的一些测量，比如说测量不同的协议对于用户体验的影响等 Operating system：操作系统这个领域主要研究包括操作系统内核优化、内核安全，以及分布式系统优化，包括区块链等研究，特别硬核 Programming Languages：编程语言这方面研究属于真·计算机方向的研究，包括程序分析、程序安全和程序合成等，研究的东西很多会涉及到编译原理等，极端硬核 Software engineering：软件工程的研究主要包含软件架构、软件分析、软件安全等 Theory：理论领域主要研究计算机理论，这一部分很多都比较偏数学了\nAlgorithms \u0026amp; complexity：你可以理解为你在算法导论里面看到的那些算法等 Cryptography：密码学，主要研究加密解密算法那一块东西，现在主要研究同态、零知识证明等算法，基本都是数学，其实这部分有的时候也被归类为计算机安全的相关研究 Logic \u0026amp; verification：不了解。告辞（逃 Interdisciplinary Areas：主要研究计算机与其他领域之间的交叉，一般来说是计算机技术如何应用于其他领域\nComp. bio \u0026amp; bioinformatics：生物信息学，主要研究如何将计算机技术应用于生物学方面的研究，有人称之为 AI for science Computer graphics：计算机图形学，主要研究如何通过计算机模拟现实世界的图像，比如大家知道的 Nvidia 的一系列技术等，也属于这个范畴 Economics \u0026amp; computation：主要研究计算机如何应用于经济学和运筹学等的技术 Human-computer interaction：人机交互，这一部分主要是研究如何优化计算机与用户之间的交互，可以分成技术端和人文端，这一个研究领域除了计算机研究人员，还有很多学美术、心理、文学等领域的研究者进行研究 Robotics：研究机器人相关技术 Visualization：研究 AR 和 VR 等相关技术 ‍\n‍\n# 相信过程 如何成为一个更优秀的人？我们谈论了太多自我增值的思维和方法论，他们都非常正确且将会对我们今后的人生造成深远的影响。但我总能隐约地感到我们距离遇见更好的自己仍有一步之遥，那就是坚持努力让改变真的到来。坚持这种事情总是最难的，因为这个过程太过枯燥和痛苦。不妨换一种生活态度来解决问题，这种生活态度就是把日子过成「段子」。\n用对过程的享受为自己赋能\n如果你问我有没有让自己坚持做一件事的诀窍？我想说我总是会尝试用这样或那样的方法给自己心理暗示，让自己坚持。就说写这本书的过程吧，对我来说就是一次漫长的旅程，每当我想放弃的时候，我就会对自己说：「王达你看看，你都写了好几万字了！要知道小时候让你写个几千字的总结你都会觉得如坠地狱，如果你今天放弃的话，那之前这么多努力就都白费了，你亏大了！」我们总是容易受困于「沉没成本」，这是一个普遍的人性弱点，但在坚持写作这件事上我却可以把这个弱点转变为优势，它成了我说服自己继续坚持写作的最佳理由。果不其然，不想前功尽弃、徒劳无功的我，每次都为自己加油打气，继续前行。\n人们都在追求结果，没有人去在乎过程，但是我不禁想问，没有全情投入的过程，哪来令人满意的结果呢？ 学会用种种心理暗示逗自己玩，这是一种学会享受过程的智慧，也是一种为自己赋能的思维。\n因为成功所以优秀\n其实坚持努力恰恰是被无数人时常提起却又鲜有人真正具备的才能，太多人的一生都无法破除三分钟热度的死循环，还有太多的人会在黎明到来前的黑暗之时选择放弃。一直以来，我都信奉一句话：「因为成功所以优秀。」能帮助我们走到最后的最好方法就是取得成功。当然这句话中我对成功的定义更加宽泛，它不同于我们普遍认为的「身价过亿」「公司上市」「迎娶白富美」。成功对我们大多数普通人来说其实就是完满地完成一件事情，给出一个可以称之为结果的结果。\n努力然后成功是戏剧，努力然后挫败是生活\n经营过程是自己的事，结果请交给上天 ‍\n# 一些 ENG 语料碎片 Chip in your ideas if I am wrong 如果我错了，你可以补充你的想法\nIt\u0026rsquo;s freaking dope 酷毙了\nboot 是 bootstrap（鞋带）的缩写，它来自一句谚语： \u0026ldquo;pull oneself up by one\u0026rsquo;s bootstraps\u0026rdquo;\n字面意思是\u0026quot;拽着鞋带把自己拉起来\u0026quot;，这当然是不可能的事情。最早的时候，工程师们用它来比喻，计算机启动是一 个很矛盾的过程：必须先运行程序，然后计算机才能启动，但是计算机不启动就无法运行程序！ 早期真的是这样，必须想尽各种办法，把一小段程序装进内存，然后计算机才能正常运行。所以，工程师们把这个过 程叫做\u0026quot;拉鞋带\u0026quot;，久而久之就简称为 boot 了。\n# 博客部署+笔记部署软件 大佬博客\ntrilium笔记软件自己搭建的\n‍\n我的评价是, 不如就用思源的自己部署一下\n‍\n‍\n# 监督 Github 提交来防止摸鱼 那么我想实现最后一条建议, 请尝试编写一个脚本，使用 GitHub API 来获取用户的仓库活动，并通过电子邮件或其他方式通知我\n‍\n好的，我会尝试编写一个脚本，使用 GitHub API 来获取用户的仓库活动，并通过电子邮件或其他方式通知你。\n这里是一个可能的脚本，使用 Python 语言编写。你可以根据你的需求和喜好修改它。请注意，这个脚本需要一些额外的库和设置，例如 requests, smtplib, email, json, datetime 等。你也需要获取你的好朋友的 GitHub 用户名，以及你的电子邮件账户和密码。\n# 导入所需的库 import requests import smtplib import email import json import datetime # 定义一些常量 GITHUB_API_URL = \u0026#34;https://api.github.com/users/\u0026#34; # GitHub API 的基本 URL EMAIL_SENDER = \u0026#34;your_email@example.com\u0026#34; # 你的电子邮件地址 EMAIL_PASSWORD = \u0026#34;your_password\u0026#34; # 你的电子邮件密码 EMAIL_RECEIVER = \u0026#34;your_email@example.com\u0026#34; # 你想要接收通知的电子邮件地址 EMAIL_SUBJECT = \u0026#34;GitHub Activity Alert\u0026#34; # 通知的主题 EMAIL_BODY = \u0026#34;Your friend has not committed to any repository for 2 days.\u0026#34; # 通知的内容 MAX_INACTIVE_DAYS = 2 # 最大允许的不活跃天数 # 定义一个函数，用于获取用户的最近一次提交的日期 def get_last_commit_date(username): # 构造请求的 URL url = GITHUB_API_URL + username + \u0026#34;/events\u0026#34; # 发送 GET 请求，获取用户的事件列表 response = requests.get(url) # 检查响应的状态码 if response.status_code == 200: # 解析响应的 JSON 数据 data = json.loads(response.text) # 遍历事件列表，找到最近一次的 PushEvent for event in data: if event[\u0026#34;type\u0026#34;] == \u0026#34;PushEvent\u0026#34;: # 返回该事件的创建日期 return event[\u0026#34;created_at\u0026#34;] # 如果没有找到 PushEvent，或者响应的状态码不是 200，返回 None return None # 定义一个函数，用于发送电子邮件通知 def send_email_notification(): # 创建一个 SMTP 对象，连接到电子邮件服务器 smtp = smtplib.SMTP(\u0026#34;smtp.example.com\u0026#34;) # 登录电子邮件账户 smtp.login(EMAIL_SENDER, EMAIL_PASSWORD) # 创建一个电子邮件消息对象 message = email.message.EmailMessage() # 设置消息的头部信息 message[\u0026#34;From\u0026#34;] = EMAIL_SENDER message[\u0026#34;To\u0026#34;] = EMAIL_RECEIVER message[\u0026#34;Subject\u0026#34;] = EMAIL_SUBJECT # 设置消息的正文内容 message.set_content(EMAIL_BODY) # 发送消息 smtp.send_message(message) # 关闭 SMTP 连接 smtp.quit() # 定义一个函数，用于检查用户是否超过最大不活跃天数 def check_user_inactivity(username): # 获取用户的最近一次提交的日期 last_commit_date = get_last_commit_date(username) # 如果获取成功 if last_commit_date is not None: # 将日期字符串转换为 datetime 对象 last_commit_date = datetime.datetime.strptime(last_commit_date, \u0026#34;%Y-%m-%dT%H:%M:%SZ\u0026#34;) # 获取当前的日期和时间 current_date = datetime.datetime.now() # 计算两者之间的差值，得到不活跃的天数 inactive_days = (current_date - last_commit_date).days # 如果不活跃的天数超过最大允许的天数 if inactive_days \u0026gt; MAX_INACTIVE_DAYS: # 发送电子邮件通知 send_email_notification() # 打印提示信息 print(f\u0026#34;User {username} has not committed to any repository for {inactive_days} days. An email notification has been sent to {EMAIL_RECEIVER}.\u0026#34;) else: # 打印提示信息 print(f\u0026#34;User {username} has committed to a repository {inactive_days} days ago. No email notification is needed.\u0026#34;) else: # 打印错误信息 print(f\u0026#34;Could not get the last commit date of user {username}. Please check the GitHub API URL or the username.\u0026#34;) # 定义你的好朋友的 GitHub 用户名 FRIEND_USERNAME = \u0026#34;your_friend\u0026#34; # 调用检查用户不活跃的函数 check_user_inactivity(FRIEND_USERNAME) ‍\n‍\n我搜索了一下，发现有一些教程或示例可以教你如何用 Java 实现监听 GitHub 的活动并发送邮件通知。这里是一些可能对你有用的链接：\n使用 Java 和 GitHub API 获取用户的活动：这是一个博客文章，介绍了如何使用 Java 和 GitHub API 获取用户的活动，包括提交、分支、仓库等​^1^。 使用 JavaMail API 发送电子邮件：这是一个教程，介绍了如何使用 JavaMail API 发送电子邮件，包括设置 SMTP 服务器、创建消息、添加附件等​^2^。 [使用 Java 和 GitHub API 监控仓库的活动并发送电子邮件通知]：这是一个 GitHub 仓库，提供了一个使用 Java 和 GitHub API 监控仓库的活动并发送电子邮件通知的示例代码。 ‍\nSk\n当时是 2023.12 月, 每天的工作量是可以根据我自己的提交数目来展示的, 差不多写 200 行就需要一个提交. 因此有些日子的提交会暴露自己的工作量(摸鱼了?) 因此可以根据展示的提交数量来判断这家伙有没有在摸鱼\u0026hellip;\n当时其实是想更加监督一下自己, 因为自习室有时候完全没人(到最后也没有人来, 房东要被我气死了罢, 狠狠吹嘘了一通还带人来, 让其继续加大投入, 结果最后变成这样的结局\u0026hellip;)因此想要监督一下自己避免打游戏这样的事情出现.\n结果呢. 关键就是解决自己的几个 Debuff, 现在我完全是自己一个人在工作生活, 但是没有感觉到太多这样的摸鱼的情况出现. 自己的自控力什么的真的提升了啊.\n‍\n‍\n# 编程社区生态 ‍\n‍\n注意一下你当前使用的编程语言的生态。\n如果你在 JVM 平台上工作就每年去看看 Java Ecosystem Report\n了解你当前所使用的语言的生态情况真的很重要，而且这方面绝对不要依赖于国内信息，很多时候你在国内网站上看到有人推荐某个框架或技术时这东西早就在 Github 上十几 k Star 了…… (信息差)\n‍\n‍\n# 博客建议 论坛以外的博客网站\n除了论坛外，我个人感觉质量更高的网站会是一些博客（或是类似性质）的网站（CSDN 除外）。\n比如国内的博客园算是我认为在国内总体质量最高的博客网站了。国外这样的网站似乎不多见，我看到大多是自建博客的，感觉这应该和国外网站上线不用审查有关\n‍\n国外的博客网站\n首先是各种 weekly，什么 JavaScript Weekly、Java Weekly、Go Weekly……基本上所有主流语言都有类似的周报，拿 RSS 订阅一下看着还是很舒服的。\n如果你写 Java 的话 Baeldung 也是个不错的网站\n剩下的还有很多优秀程序员的自建博客，谷歌看到后发现博客内容不错就顺便 RSS 订阅一下好了\n当然我不建议对着一个长长的“优秀程序员博客清单”全都订阅或收藏一遍，老实说这样订阅的博客你会看吗……不如自己看到喜欢的适合自己的再去收藏或订阅。\n‍\n‍\n# BUGFix 建议 ‍\n除了这个你还能遇到很多在 Google（或者更准确地说，是 Google 代表的英文社区）内能够轻而易举找到解决方案的问题，但在国内网站你却不得不需要忍受连复制粘贴都没整利索的各种垃圾信息来源。尤其是遇到编码相关问题，把报错信息直接复制到 Google 去查 StackOverflow 要比你在百度上搜找解决方案的效率高至少十倍（也许我还保守了），就算你英文读不利索，还是那句话，拿翻译软件看一下又不丢人，就算是翻译的方案也比你在国内网站能找到的那些方案靠谱多了……\n‍\n我认为 StackOverflow 很大的一个优点就是当一个人给出解决方案时会告诉你 WHY，而国内网站大多不会，这样即使回答中提到的解决方案已经不能用了，但你还是能从回答的“WHY”中获得一些启发。\n另外即使是那些十年前提出的问题，也会有人积极在上面更新，比如有人十年前问了个 JS 的 var 为啥这么傻逼的问题（StackOverflow 上这样奇奇怪怪的问题真不少，而这些问题你在国内很多是找不到的），到 2015 年就会有人很高兴地在问题下面补充“现在 JS 有 const/let 了！”，在国内这样的情况不多见（至少是我看到的）。\n‍\n当然，“优先在 Google 上搜英文”也有例外——比如当你需要查一些 MyBatis 相关的问题，一些 Vue 相关的问题，那百度里查到的信息质量大多数时候还挺在线……至少这些在国内属于大热门的技术，各种资料还是足够多的。\n‍\n‍\n‍\n# 我们计算机入门了, 可是之后呢 ‍\n要提醒大家的是，这个阶段还要避免的心态是，能熟练地增删改查了，就自认为写程序不过如此，然后往简历上填个精通，这也是新手面试被批得体无完肤的原因之一。\n浅尝即止，是新手的大忌，为啥这么写，这么写有啥好处，有啥坏处，多问几个为什么，你多年后会感谢敖丙的。\n‍\n以外的世界\n如果你学得好，这会应该能熟练地写个博客啊，小论坛啊之类的 WEB 项目了，也就是达到了就业的基本要求。\n慢慢的你会发现数据库性能实在不行，出于不甘现状，或者赶时髦，你该去了解NoSQL了，Memcached、Redis、Mongodb等非关系型数据库眼花缭乱，没关系，试着用用，能很好地缓解MySQL、Oracle之类关系数据库的压力。\n出于公司某些业务需要，你可能会钻研一个特定技术领域，比如全文搜索技术ElasticSearch（以下简称 Es），那你了解了Es，你又要想到数据库的数据怎么同步进Es呢？\n你可能会接触到Logstash，Canal等中间件，然后发现可视化也是个问题，那Kibana就应运而生，用的时候发现欧洲人的分词习惯跟我们不一样，那Ik中文分词器又得了解啦。\n使用之后你还会发现他底层的Lucene有很多坑要怎避免，时间多你还可以了解Solr等等。\n你甚至会开始对系统中一些比较特殊的存在感兴趣，比如权限系统，单点登陆之类的，又或者某些特定业务领域的算法研究，这些是你的加分项。\n你还发现服务拆分后Http通信有诸多弊端，就开始接触优秀的Rpc 框架还有消息队列中间件了，如Dubbo、RocketMQ等。\n再再后来你发现呀，数据量大得一批，表顶不住了，几亿数据查出来要好几秒，那分库分表就出来，什么水平拆分，垂直拆分，还学习了TDDL、Sharding-JDBC、DRDS等这样的分库分表中间件。\n但是你用了发现全局的唯一 id 生成又是一个问题，或许中间件有自带的，但是你还是要了解原理，什么雪花算法，uuid等等也得学。\n再再再后来呀，你发现分库分表也顶不住了，业务体量爆炸式增长了，你可能就需要了解动态分库分表的解决思路和解决方案了，特别是FaceBook开源的一些方案。\n再再再再后来呀，你发现动态分库分表也不行啊，很多离线的数据也很多啊，每天几个 T，公司都要被败光了，那你就要了解大数据场景的离线分析啊，数据缓存啊，数据清洗，数据可视化等等啊什么的。\n那就需要学什么ODPS啊，Hadoop、Hive、Hbase等等中间件或者工具了。\n再再再再再后来你开始发现你的代码很乱，久了以后自己都看不懂，重复的，难以重用的代码堆积如山，不想维护，BUG 百出。\n于是你要开始重视设计模式，合理地改造下自己的代码习惯，不再被僵化的 SSH、MVC 三层架构束缚住。\n\u0026hellip;\n‍\n‍\n总之知识就是一个体系，我经常跟群里的仔说，形成知识体系，你面试说了Es那相关的技术栈你一样要了解的，我题目取了叫《吊打面试官》就是噱头，你去面试如果面试官技术深度真的很深，我想被吊打的 100%是你。\n你知道的越多，你不知道的越多\n‍\n其实大学里设置大四，本意是为了让大家走入社会之前有个缓冲期，相当于国外的 Gap Year。如果现在才开始考虑自己未来的发展方向，着实有些晚了，正所谓平时不努力，大四徒伤悲。\n一般秋招在大三暑假或者大四上学期基本就可以结束。当确定好了工作，或者考上了继续深造的研究院校。你就可以休息一阵，趁着还有大把时间，来一场说走就走的远途旅行，或是干自己想干的事情。\n一毕业就打算工作的同学更是应该趁这个机会多出去走走，因为毕业之后你将再也没有这么宽松的大把时间来挥霍了。尤其是毕业后从事互联网 996 工作积攒福报的同学。\n按照这个规划，整个大学里应该是越来越轻松的。\n‍\n我的评价是自己的时间真的不多了\n‍\n‍\n‍\n# 互联网长期投入建议整合 ‍\n日复一日的坚持。始终保持作为编程新人时的那种对新知识、新技术的渴望，不断地在实践中成长。\n任何一个看似不起眼的地方都至关重要。例如，变量命名、调用函数、命名 CSS 属性，哈希表及数组的选择，这些恭喜虽然看不起眼，但是他们都将对结果产生很大的影响。\n看似重大的决定其实并没有想象的那么重要。经验丰富的开发人员总是明白怎么去大事化小，怎么去避开一些开发人员经常陷入的大麻烦。这些事情在某些程度上来说，颇具有些禅意。\n使用正确的工具。现在市面上存在这么多不同的库、工具和框架。经验丰富的程序员们总能知道在面对不同的问题时应该选择什么工具。\n‍\n代码本身不值钱。如果需要，你可以删除几百行的代码，用另一种方法对问题进行解决。\n综合考虑所有特性对技术进行评估。例如，我一直看好 Elixir。它有精彩的语法，很棒的社区和光明的未来。但是它太新了，以至于如果你想要实现这么多复杂的功能，你很难找到相应的技术。而所有这些因素，你都是需要考虑的。\n‍\n学会说“不知道”。作为一个开发人员，没有什么比不承认你的不知道更节约时间的了。\n‍\n学会分析错误提示中的线索。传统教育告诉我们失败是耻辱的，而错误提示总与失败相关。好的程序员知道那些错误提示中总是包含获得正确解决方案的线索。不要轻视这些错误提示。\n了解早期优化和必要时候停止优化之间的区别。好的程序员知道什么时候去优化、如何去优化，才能写出一些看似奇怪但是实际上能让结果运算更快的代码。\n‍\n对错误负责。错误总会发生，特别是以一个团队的方式进行工作的时候。这时候，互相责怪就是一件十分浪费时间的事情，因为错误背后总是有多方的因素。\n不要在意工作的时间。对于那些停不下来的程序员来说，他们经常花费很多时间在更深层次的工作上（与那些浅尝则止的工作相对），而且他们明白，计较花了多少时间工作其实是没有意义的\n淡定地接受责难。当你的代码被毁了，你要学会给出理性、具有逻辑的反应。\n‍\n多与有经验的人相处。没有什么能比这种方式更快的提高你的编程水平了，你不仅需要从他们身上学习硬技能，还需要从他们那里学会如何提升自己的软技能。\n重视代码检查。在 Github 上发出请求之前，你应该先检查下代码，并将其分开，就如同这个代码是别人写的一样。\n认识到一个优秀程序员不是只需要精于编写代码，还需要一些别的素质，比如销售，营销，客户支持，质量保证和产品管理等，这些都将花费大量时间去学习。\n了解并解决更大的问题。最好的程序员总是不会局限于眼前的问题。他们乐于寻找一种解决的方式，不但能实现对眼前问题的解决，还能实现长期问题的解决。\n深入研究一些大型的开放源码，并应用于实际工作中。\n在合适的时候进行回馈。当你达到一定的水准时，你就应该花一些时间去帮助新人，就像你导师曾经带你的那样。\n能够写那些看起来不怎么样的代码。很多时候，成为一个查漏补缺型的程序员也是不错的。随着时间的推移，你更需要知道什么时候可以走捷径，什么时候必须好好做。这是最难学会的一项技能。\n‍\n让别人知道即使你工作到了很迟，但是你并没有浪费时间。如果你是最后一个离开办公室的，那么就给别人发送一份包含你最新进展的邮件。人们一般会注意到邮件的时间戳的\n‍\n多去参加团队活动。从长期来看，和其他开发人员建立良好的关系（或其他职位的人）将会比长期处在自我局限中更有价值。\n在压力下学习。当整体情况开始恶化的时候，即使你不知道具体应该怎么做，你也要试着学会如何去掌控情况并有责任将其恢复。\n“快速前进，打破常规”。不要让“完美”成为“不错”的敌人。错误是在所难免的，但也能给你提供一个不错的学习机会。所以不要将你犯的错看做是一次失败，而要将其视为一个可以学习的机会。你要知道，解决错误可以让你更快的成长。\n‍\n‍\n‍\n‍\n# 码农打咩 ‍\n著名计算机科学家 Dijkstra 说过：\n计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样。\nComputer science is no more about computers than astronomy is about telescopes.\n深以为然，计算机编程 就像 天文学家之于望远镜、生物学家之于实验台、画家之于画笔、作家之于钢笔那样，是一种工具或技能，能够娴熟地使用工具固然很重要，而关键在于如何利用它来创造出别人（或很少人）做不到的事情，也就是创新的能力。不想沦为码农，解决之道就是学会用编程来解决别人解决不了的问题。\n‍\n我粗鄙的感受是，在产业链中，一个人的价值体现在他可被替代的成本，替代成本越高说明价值越大。\n码农总是被第一个开除的嘛\n‍\n那些理解透彻 j2ee,jvm,andriod 这么多 java 的方向，你还以码农称呼他们吗？\n基本没有一个大学是手把手教你这么多具体东西的，全是自学。\n我们常常嘲笑的是那些培训机构工厂式生产出来的程序员，因为他们比我之前说的那种人少了一个东西，叫做自我思考的能力。(我只是说我映像中得一些培训机构，没必要和我较真，或者我想说的是那些在大学不好好学习，想通过培训机构速成的人)\n幸存者偏差知道吗？别人的经验永远是别人的经验，别人的成功只属于他个人，一味遵循别人的步伐，很难实现自我。\n要学的很多啊，具体的知识我没说，怎么学我也没说，我只想告诉你时刻不要忘记自己独立的思考。\n‍\n在选择走上独立自主的道路之后, 我们变成所谓码农的几率越来越少了\n‍\n‍\n国内码农现状\n‍\n链接\n一方面，国内所谓的技术，只是停留在技术的使用阶段，即熟练的技工，和国外 30、40 岁经过沉淀进一步发展的有所不同；另外一方面，中国人的习惯决定了管理者和被管理者是明确的上下级关系，而不像国外是伙伴关系。\n以上两个方面就决定了可悲的青春饭问题，其实何止是 IT 行业，其他行业也一样有，只是因为IT 是新兴行业，而且从业者众多，这个问题比较突出而已。\n‍\n因此中国程序员被迫走上了 30 岁优化下岗的情况. 大家都说这个不稳定. 但是我深层的想法一向就是向往自由职业者与多元化的角色, 我希望我今天是医生, 明天是图书馆管理员, 后天是程序员, 一方面, 我希望长远规划的思考方向, 我不喜欢谈论饮鸩止渴的事情. 但是另一方面, 我又期待着生活能够多一些可能, 希望自己的创造力和所谓命运的网不能被自己的选择所限制.\n啊! 如果能有所谓自由职业的专业就好了啊! 我用计算机学到的逻辑思维和电子能力, 加上自己对于技术与责任的追求, 我想要成为达芬奇那样的全才啊!\n我一直在往这方面努力. 高中初中,乃至小学的我的人生中, 从来没有说局限于应试教育的御三家, 我始终对艺术, 体育, 科学, 地理, 政治, 社会抱有很强的兴趣, 因此我需要更大的知识仓库来管理, 因此我需要不断开拓我们精神文明的边疆.\n人是矛盾的复合体. 但是绝对的一点, 计算机将会成为我在这一阶段的主业(10y), 之后我就 30 岁了. 我要走向的地方我完全看不到, 但是我很确信, 那就是自己仍然充满热忱与激情.\nSK - 2024-03-24\n‍\n‍\n# 计算机学生刚开始该干什么 ‍\n“首先，我不会先学 OOP 等抽象概念，或先花大量时间学算法，而是会大胆尝试用代码实践项目，体验编程。相信我，你不需要过深的计算机知识，也能写一个简单可交互的页面。”\n我非常认同作者的这段描述，计算机科学与技术，从本质上讲，计算机的大多数领域是工程，工程依靠的是什么？是实践，是动手能力，是经验。就像剪发、做饭、弹琴，你不需要上大学或者是上课依然能在这些领域做出一些成绩，所以编程亦是如此\n动手做一些小项目（web 管理系统、小游戏、网络传输服务器），在实践的过程中一定会发现许多的问题，以此为导向去学习一个一个的知识点，积少成多，注意归纳总结，这些知识或许会在某一天连成一张网。\n‍\n我们再说科学，科学理论很重要，不可不学，但科学理论一定是为了解决某个工程问题而被写在书上的。其学习方法最好就是实践驱动的（对付考试、面试除外）。\n如果一上来就翻开“黑书”开始一页一章的线性学习，除了对其抱有巨大兴趣亦或是有超乎常人毅力的人，大多都会半途而废，屡战屡败。综上，在具体实践中发现问题，以此为导向进行理论的学习，你将会发现计算机科学的美以及计算机工程设计的精妙。\n‍\n不要把学习编程还当做学生时代的应试考试来看\n你或许也发现了。很多成绩特别特别优异的同学，他们的编程能力其实并不好。在大学的时候，那些编程能力最强的往往是那些成绩比较一般的。\n为什么会这样呢？\n我觉得主要是一个思维的转变问题。很多人学习编程的时候，总是想着我要把这个 API 记下来，把这个库的用法记下来。这样学习，导致的结果只有一个那就是你会很难受！因为，这些根本不是要死记硬背的东西啊！真还当这是上课考试啊！你要从如何用你学的东西来解决实际编程问题出发，站在做一个实际的项目的角度来学习。\nSk\n是的, 当初我们的科技树也是点歪了, 应该先考虑如何做一个工艺而不是死磕 Java 和 Python 的 API. 任务驱动学习任何时候都很管用\n‍\n‍\n‍\n# 多看优秀的代码 链接\n‍\n虽然要多看优秀的代码，但是也不要被 “最佳实践” 所束缚，很多时候实际是根本不存在适用于任何场景的“最佳实践”，没有银弹。\n有哪些优秀的代码值得学习呢？\n拿 Java 来说，不知道阅读什么源码的话，可以先从 JDK 的几个常用集合看起。另外，我比较推荐看 Dubbo 的，因为感觉会稍微相对容易一点，模块划分清晰，注释也比较详细。搞清楚了 RPC 的基本的原理，知道如何自己实现一个 RPC 框架之后，看起来就没那么吃力了。\n另外，随便一个框架的源码都 10w+行了，都看一遍是不可能的。要挑选比较重要的地方看，就比如看 Spring 源码的话你一定要看 IoC 和 AOP，要知道一个 Spring Bean 是如何一步一步被创建出来的。你要看 Spring Boot 源码的话就要知道 Spring Boot 的启动机制是啥，Spring Boot 是如何实现自动配置的。\n‍\n‍\n# 学习造轮子, 工作抹水泥 我们实际项目开发中是比较忌讳造轮子的，但是，实际学习过程中造轮子绝对是最自己百利而无一害的！ 就比如我之前搞懂了 RPC 的原理之后，就自己动手写了**一个简单的 RPC 框架**。我的 RPC 框架肯定是无法和 Dubbo 这类已经这么成熟的相提并论。但是，在自己去写 RPC 框架的时候，更加加深了自己对于 RPC 框架的认识。实现的过程中，遇到了很多问题，解决问题的过程中也提高了自己的编程能力。总而言之，造轮子是一种特别能够提高自己系统编程能力的手段。\n‍\n# 多思考为什么 多实践不是说拿到问题就直接开始写代码、不是不学习理论知识。多问自己 why ，而不是 what。 就比如技术选型的时候，相同的功能可能有不同的解决方案，你是人云亦云地不顾项目实际需要去选择，还是自己经过详细的对比呢？想当然肯定是根据自己项目的实际需要，然后经过各种对比之后选择！\n“ talk is cheap, show me code”这句话虽好，但是请不要忘记思考！换句话说就是：多写代码虽好，可不要贪杯哦！\n‍\n‍\n# 大专生的悲哀 链接\n‍\n上课耽误学习，不上课考勤扣分，拿不了高绩点，耽误保研出国。\n课程设置不合理，实验课多，作业多，并且是写 word 报告，占了很多时间，但是效果却不如自学，上课 PPT，考试内容全在 PPT 上，看书的同学没有背 PPT 的分数考得高，，\n都 2021 年了，国内估计没几个学校交代码是用 git 这些工具吧，评分没有搞自动化测试吧，做国外的 labs，都是直接去网站提交代码，立马跑 test case，马上就能知道哪些 case 没有过，立马再去 debug。\n教材大部分使用自己编的，水平如何就不多说了，懂的都懂，幸好我们学校教材基本都是使用全英文黑皮书，比如自顶向下、系统编程课使用 csapp 等，对于计算机的学生，最好的资料和书籍是美帝那边的书\n‍\n估计国内有不少老师自己都好多年没写过代码了吧？让不会写代码的来教编程这不是搞笑么\n代码量太少，很多同学到毕业估计 几万行都没写到，但是真正想锻炼出极强的编程能力没有上 10w 很难，但是这方面我们学生也要多反思，为什么平时没有写到这么多代码\n很多学校就是孤立的学了一堆 操作系统、计组、体系结构、编译原理、C、汇编，但是很少有同学能把这些课程连起来形成 CS 体系，这方面 CMU 的神书神课《CSAPP》又要提下了，幸好我们学校开设了《系统级编程》，教材就是这本书，其它没有开设这门课的学校建议学弟学妹们自学。\n课程设置杂乱，学了一堆的数电、模电、大学物理\u0026hellip;.. 想起大一被大物实验支配的恐惧，，，时间都费在这些上面了，说实话把这些课程压缩，上一些函数式编程、或者比较前沿的 CS 方向，我觉得对计算机专业更好！\n我们学校大二下、大三才开始计网、操作系统、数据库原理等核心课程，太晚了，这些课程至少要在大三前完成，大三再开设图形学、编译原理等进阶课程，大四直接就是实践课程为主或者让同学们自己出去找实习！\n我个人觉得大概这样设置 CS 课程更为合理： 大一上：C/C++程序设计、高数 1（初等微积分）、离散数学 大一下：数字逻辑、数据结构、汇编语言、面向对象编程(Java/C++)、高数 2 、线性代数 大二上：软件工程、数据库、Java/Python Web 开发、组成原理 大二下：操作系统、计算机网络、系统级编程（CSAPP） 大三：软件测试、软件安全、课程设计、密码学、图形学等选修方向 大四：实践、毕设、实习 另外，还有最大的问题就是 OS、网络、数据库等 CS 核心课程上成了文科！缺乏一些动手实践 Lab，大部分都是写实验报告，就是不写代码。\n我觉得和他们 CS 强校的教育模式有关， 国外，尤其是美国，很多高校 CS 教育极其注重实践，国内也就清北复交浙等少数学校有少量的实践教学，其它都是念 PPT，课后作业就是做 Word 项目。。。。\n知道为什么国内 Word 项目这么多么，因为很多老师自己也不会编程\u0026hellip;. 更没法设计那些硬核的实验和辅助教学平台，不会编程的人教你编程这结果能好么。\n‍\n再来说美国为什么有强大的基础软件能力吧，这得益于他们的高校在培养学生造轮子的能力。\n比如国外是如何学习数据库的？\n就拿 MIT 来说，6.830 Database Systems: 这是一门数据库系统的一门核心课程。前半部分比较基础的数据库的知识，后半段主要在讲 Distributed Databases 的东西\n他们的实验是什么？\n是让你写个小型关系型数据库，比如 lab1 实现数据库基本的存储逻辑结构，具体包括：Tuple,TupleDesc,HeapPage,HeapFile,SeqScan,BufferPool 等。\n国内数据库教什么？教 SQL 怎么写，教数据库原理(这个还算好的)\n国内的大多数高校实验是什么？\n用 Java 使用 JDBC 连接 MySQL 写个应用。。。\n国外是如何教计算机网络的？\n手写 TCP！\n国内大多数高校老师升职不靠教学，所以大家都没把心思放在教学上，做”研究“发论文，不香么。\n设计这么多麻烦的实验不是给自己找麻烦么\n弄个 PPT、Word 多爽呀\n这个现象我估计还会一直持续下去，老实说，跟着学校的路线走，学计算机，大概率毕业即失业。\n‍\n我的评价是: 完全就是河北牛马的样子了呢\n但是没办法, 我们需要前进!\n‍\n# 笔记软件使用体验 不止一般的笔记软件, 还有思维导图这类的\n‍\n# theBrain 思维导图 据说是最强大的专业思维导图\n和传统的树形思维导图有所区别，一旦我们在 TheBrain 中搜索并点击其中一个节点（想法）后，与之相关的所有关联信息都可以一目了然地呈现出来，更有助于整合零散的信息和灵感。\n我们看到，TheBrain 鼓励一种「发散式的」思维方式，而不是「按部就班」的方式。传统「思维导图」的优势在于利用「MECE 原则」穷举分类，而「TheBrain」更像是「头脑风暴」，想到什么就是什么，仅在需要时，和已有节点产生关联，不必刻意去划分类别\n但是太卡了, 烂!\n‍\n# 有道云笔记 广告和国内厂商的推广\u0026hellip;\n颜值相较于正宫 Siyuan 低下无话讲\n但是确实在线分享协作与在线端操作很友好, 之后仍然作为个人在线分享方法\n全局的待办事项有点太喧宾夺主了\n​升级为会员，即可使用markdown本地图片上传功能​\n不能手动截图放入, 因此我绝对不会再本地用它了\n‍\n# 语雀 仍然是在线的编辑器, 我还是喜欢本地的(虽然有多端协作功能, 但是网络还是个大问题)\n语雀成为了第一个使用新密码的家伙 2024-01-31 12:12:41\n还是太简陋了, 国内大厂的广告很难顶\n这种类型的碎片化整理我的 Siyuan 能做到\n数据库我不知道 SY 是怎么实现的, 但是也可以\n单个知识库的笔记，我们可以选择「目录」、「卡片」、「专栏」三种视图\n这个还是可\n还有一些和日程整合的很好的数据表等东西挂件, 这个不错\n格式刷不错, 虽然 SY 可以用上一次使用的格式来操作\n同样的各种按钮没法自定义位置\n作为多媒体生产的后手不错\n‍\n# Notion 流氓安装\n很复杂,很强大, 国外的没有内容审查\n没中文, 那还是算了\n没有离线功能。 这也是 Notion-like 类软件的缺点，但瑕不掩瑜，这个缺点我能接受\n国内的审核环境就是如此。机器审核+人工审核（机器审核不过就人工审核）不可避免的。我猜印象笔记和有道云也一样会\n而且网页没有导出为 word 等的接入\n由于是在线的, 因此受到网络影响很大, 还算了\n导出稀烂\n‍\n# FlowUs 息流 流氓安装\n流氓任务积分制\n竟然开头使用空格召唤 AI?疯了\n这些大概都是没有具体快捷键的设定的\n‍\n# flomo 浮墨 标签驱动的, 那我还是算了\n类似发朋友圈动态的笔记软件，一个字一句话，都能成为一条笔记\nflomo 擅长前期的闪念记录，后期笔记笔记处理能力很受限，如果要做知识加工处理需要换软件\n那么我直接 SY 腾出这个随机页面进行处理不就行了吗, 手机就放便签\n自己整理也是学习的过程嘛\n好好好\n‍\n# 收藏软件 Cubox ‍\n就是剪藏工具, 但是我的思源有对应版块了\n‍\n‍\n# 清单软件滴答清单 大部分功能思源支持了, 而且一直占用 CPU, 垃圾软件\n然而我最近没有什么长期的 TODO(和时间强相关的)\n因此我只要继续自己 Siyuan 即可\n‍\n# 金山专业版文档 因为 Win 自带的吃相太难看了, 不得不换一下\n阿虚找到破解政府版-WPS2016, 8 年前的版本\n版本为WPS 2016 10.8.2.7090，可使用 VBA 宏等功能\n缺点是无法登录使用 WPS 云文档，激活时间为永久激活\n‍\n‍\n# 职场篇 ‍\n‍\n# 月入五万的西二旗人教你如何活得像月薪五千 Link\n蜜蜂最为珍惜的是蜂蜜，殊不知自身才是养蜂人的宝贵财产\n对于西二旗和张江程序员，其实是可以涸泽而渔的\n因此不买房, 不把自己儿女的悲惨未来成为现实才是最重要的, 我认为这个世界不值得我去生儿育女. 同样的, 我也不会再采取任何促进对象这一可能的结果了. 之后就是一辈子打光棍咯. 无所谓, 天依会陪着我的(什么洛痴)\n‍\n‍\n# 那么多人坐在井里 Link\n我因为学习能力快，很快就把品质部经理助理这个岗位做得风生水起；还因为能力强，有一个品管员因为怀孕请假，她请假的时候，我把她的事情都做了\n抢别人饭碗, 公司是公司, 不是自己的, 还是要收敛一点\n大公司需要的是螺丝钉，听话的螺丝钉，而像我这样自主会学习、会思考的，太不安分了，不能留\n‍\n有些人钻在钱眼里，中途休息的时候，会拿点厂里的手工活自己做，割料丁、套袋、全检什么的；有些人下班了，也会留在公司里做手工活，赚取微薄的工资；她们跟我说反正回去也没事情干，睡觉嘛，睡够 7 个小时就够。\n有些人是即时行乐型的，下班了就嘻嘻哈哈，搭班结派的去吃夜宵、喝酒、唱歌、跳舞，过丰富多彩的夜晚生活。\n那时候小视频特别火，当然现在也特别火，看到拍视频可以赚那么多钱，一些员工也特别心动，他们也分享自己的工作和生活，但是缺少目标和计划，东撅一榔头，西撬一榔头，没有深耕也不垂直，最近还没有发现一个出圈的。\n认知不同，所选的目标也不一样。\n就好像我买回家的那块三层肉一样，我把三层肉带回家，婆婆就满心欢喜的跟我说：“又要烧红烧肉了。”\n可是我却觉得很腻味，我不止一次的告诉她：“三层肉不仅仅只能烧红烧肉，它还可以是回锅肉、是烤肉，还可能是粉蒸肉。”\n婆婆摇摇头表示不信，“三层肉就只能做红烧肉，饭店里都这么烧的。”她说的饭店是我家隔壁那个大排档，她在那里洗了两年的碗，不过那家饭店现在倒闭了，我估计倒闭原因就是那家店里的三层肉只能做红烧肉的缘故。\n变则通，不变，等死吧！\n人生是有很多的可能的，你现在层次低，并不表示你未来的层次也低；我见过很多人逆行，从普通员工做起，一步一步累计经验往上爬；我也见过无数的人，用梦想给自己点燃希望，不停自律、不停鞭策，然后到达人生巅峰。\n虽然他们的人生巅峰，只不过是一套房、一辆车而已，但那也是一个梦想呀。\n有一天跟大伙儿聊天，话说流水线上的工人千篇一律、每日生活枯燥不变，那不仅仅是对生命的浪费，更是对年华的亵渎。\n三层肉不仅仅只能做红烧肉，人生也并不是一套房、一辆车就是巅峰。趁着还年轻，多去尝试，你总能找到自己的梦想，然后呢，让梦想开花。\n我相信你能跳出自己的井，跳出舒适圈，为未来付出不亚于任何一个人的努力。\n相信我的眼光，你会成功。\n‍\n作者这些我也经历过，小公司问题挺多的，啥都要顾及，我那个时候经常焦虑，头发都白了一大把。如果我们换一种心态就好了，如果这个项目没有做好，最后不赚钱甚至亏钱，我们做技术的损失是什么？如果把这个问题想清楚了就没有那么多焦虑了。\n如果你自己把这个项目当自己的创业项目学习，换成这种心态就好很多，比如技术栈中碰见的问题，运营中碰见的问题，以及招聘中碰见的问题等等。把这些问题记录下来，并且自己思考，如果以后我创业也碰见这样的问题我该如何面对，反正一切抱着学习的心态，不要给自己压力，也不要焦虑，因为就算项目黄了，公司倒闭了，也关我屁事。\n当然这些东西不能说给其他同事听，更不要向老板抱怨。自己心里默默的干就好了。\n‍\nSK\n因此在职场里好好打螺丝就好了, 把更好的产能交给自己.\n‍\n‍\n# 女鼠鼠职场历险记 ‍\n年末大领导得空，总是在办公室转悠。某天听到他在办公室一角怼人，然后那人说：“领导你说得对，你骂我我特别爱听，很有收获”“要不您先去吃饭？可以吃饱了再来骂我，饿到您就不好了”…………我整个大震惊，这就是职场舔狗吗？\n手机上一些东西就是这样，这个软件分掉了你一点注意力，那个软件弹个窗你又点进去看，精气神完全散了，人也疲惫。所以我决定从今天开始把抖音、贴吧、微博都删了，每天只回到家后用电脑看看。希望这样我能够更集中精神在提升技术上面。最近还想恢复运动习惯和学弹钢琴，更要确保自己能腾出精力了。\n说回经历。培训结束后刚好国庆节，玩了几天。又因为恐惧面试摆烂了大半个月，终于鼓起勇气去面试。怎么获得面试机会？策略就是海投。boss 上面每天可以打 100 个招呼，每天醒来第一件事就是把招呼打满。不用看工作介绍，看到 java 就投，把筛选的成本转嫁给 HR\n有些工作要求和薪资纯属乱写，那就大家都乱来好了。打够 100 个招呼，大概会有十来个 HR 要你简历，当时在广州这样操作，一周能约四五个面试。当然前提简历包装好。反正有面试就去，我们这种半路杀出来的，策略当然要野蛮一点。野蛮生长！\n维护好基本的健康和清洁之后，大多数时候只想躺在床上刷手机，很多东西都是笑过就忘，这实在是太浪费时间了。曾国潘说“无事时心放在腔子里”，就是说人要珍惜自己的注意力，凝聚精气神，这样一旦有事时就可以雷厉风行，因为你的精气神是充沛的，指哪打哪。\n最近感悟：高强度的工作只能增加你的工作经验和业务熟练度，而这个业务熟练度并不是通用的，换份工作分分钟归零。\n真正能让人有提升的是工作之外的系统性的对技术的学习。工作的时候有不懂的就百度，虽然程序跑起来了，但个人获取到的只是是碎片化的，且只知道方法，不知道原理，同样的问题换个方式出现，又要百度一番。\n等换工作面试的时候，虽然一个技术你用得飞起，但没系统性了解过原理，可能也是一问三不知，平时的经验很难体现\n现在这种 996 的工作强度，回家完全没时间没精力学习，让楼主有种透支未来潜力的感觉。日复一日的上班，技术却并没有什么积累沉淀。\n仔细想想挺可怕的，上班时的工作、下班时的手机，把所有注意力都占据住了，导致我根本没想起要腾出注意力体会自己的需求、关心世界的变化和思考自己的人生方向，最后只会彻底沦为只会工作的工具人，甚至都不能称为人，而成为了一个没有思想的工具\n策略真该改改了。将帅无能，累死三军。我俩干得不够好啊，团队的人也憋屈。明天周六，还有三位兄弟要加班，周日也要上班，连着上十几天，谁遭得住。还是这种需要进工厂传防护服的工作。\n很多管理的道理都耳熟能详。但真正处于这样一个位置，完全不是这么回事。就拿“事情要有优先级”这件事来说，挺起来简单。而实际情况是，每天有千头万绪的事情来找你，应接不暇。\n事事有回应简直是一种稀缺的美德。干起活来就会发现，交下去的活，很少有人有意识及时跟你同步进度、汇报风险，又或者实在太忙了忙忘了。\n这时候就需要分出精力主动关注重要事项的进度，确保没有问题。\n要是下面的人根本不知道需要做什么，或者没能及时识别出风险，或者有阻塞但是就是不汇报。快到交结果的时候，Boom，漏洞百出。这时候大家都难受。\n领导跟我说过一句话，“事成人爽”。我不确定这个词语的意思，我把它理解为：事情办成功了，人自然就爽了。成功是对工作最好的激励。总是打败仗的领导没有人愿意追随。\n如果该大力投入的时候害怕压榨太过，该指出错误的时候害怕伤人自尊，宽容地接收所有工作成果。那就是本末倒置了。（我经常不自觉就这样）\n平时再温柔，但跟你一起工作没办法取得职业上的成长，那么你只是一个令他们想辞职又有一丝愧疚的鸡肋老好人。无法改变任何事情。\n2024-03-23 更新到这里\n‍\n后面作者也很忙了, OD 上岸转正, 华为, 工作强度太大了, 我认为不适合我.\n‍\n‍\n# 学习篇 # 自由软件选 \u0026ndash;理查德·斯托曼选\n我的评价是: 作者大概率也是破解网站的支持者(雾), 支持对垄断专制的软件重拳出击(雾)\n软件和硬件对我们的信息时代和互联网一样重要。自由软件被称为是革命性的政治理论，就如同我们可以控制自己的生活，我们也应该能够控制那些延伸我们身体的机器。这个被自由软件基金会支持的理论，已经成为过去三十年来数万人的实践和传统。我们这个时代有一位哲学家。他不是艺术家，也不是专职作家。他是一位程序员。理查德·斯托曼（RichardStallman）是 MIT 前程序员以及操作系统架构师。作为程序员和架构师，他创立了一项在这个日益由“代码”决定的世界里争取自由的运动，从此开始了他在大众生活舞台上的职业生涯。\n当 1998 年一部分社区决定停止使用术语 “自由软件” 并改为说 “开源软件” 时，教导新用户有关自由的观念变得更加困难。一些喜欢该术语的人想要避免“自由”与“免费”的混淆——这个目标是正当的。其他人却打算将激励了自由软件运动和 GNU 工程的原则精神抛到一边，反而迎合行政和商业用户，而这些用户中的许多人持有一种将利润置于自由，社区和原则之上的意识形态。因而，“开源”的花言巧语集中在制作高质量，强有力软件的潜能上，但是避开自由，社区和原则的思想。\n对于自由软件，用户不必须为了使用软件而支付发行费用。可以从拥有一份副本的朋友那里复制程序，或者请能上网的朋友下载程序。或者很多用户可以一起分摊费用买一张 CD-ROM，然后轮流安装软件。当软件自由时，高价的 CD-ROM 就不再是主要障碍。\n# 定义 自 1983 年以来，自由软件运动一直在为计算机用户的自由而战——用户控制他们使用的软件，而不是相反。当一个程序尊重用户和社区的自由时，我们把它称为“自由软件” 。\n在计算机领域，协作包括向用户再分发原始副本，也包括分发你修改过的版本。自由软件鼓励所有这些协作，而专有软件禁止这些。专有软件禁止再分发副本，并拒绝提供给用户源代码，封锁人们对软件的修改\n# 与教育 相比之下，如果我们教学生使用非自由软件，就等同于培养依赖性，这将违背学校的社会使命，学校应该极力避免这种事情的发生。\n为什么呢？毕竟一些专有软件开发者可以免费给学校的提供非自由程序的副本。那是因为，就像烟草公司免费向学生发放香烟一样，他们希望利用学校给学生灌输这种对他们产品的依赖性。(点名 IDEA) 当学生毕业之后，他们就会终止这种免费行为，而且，他们也不会为毕业生就职的公司或机构提供免费服务。你一旦对这些软件形成了依赖，你很可能就会付费，并且之后的升级可能会很昂贵。\n专有软件阻抑了学生对知识的渴望; 自由软件鼓励每个人学习。自由软件社区反对“高高在上的技术” ——这会让大众对技术的基本原理敬而远之。我们鼓励任何年龄层次学生或个人阅读源代码，而且，我们希望他们学得越多越好。\n使用自由软件的学校将会成为那些喜爱编程学生的乐土。\n学校使用自由软件最深层次原因是可以进行德育教育。我们希望学校教给学生基本的知识和有用的技巧，但是这只是学校工作的一部分。学校最根本的一项职能，就是培养好公民——其中包括助人为乐的习惯。在计算机领域，这就意味着我们需要教授学生分享软件的精神。\n# 阵营 起初，开源阵营从自由软件运动中分裂出来，是因为“自由软件”的伦理观念使一些人不安。这的确是事实：谈论关于自由、道义问题、可靠性和方便性，提醒人们去考虑那些可能被他们忽略的问题，比如他们的行为是否是道德的。这会引起不舒服，而且一些人甚至会回避它。但这并不意味着我们应该停止讨论这些事情。\n然而，这正是开源的引领者决定要做的。他们希望停止对伦理规范和自由问题的讨论，而仅仅关注某个自由软件直接的实际利润，这样，他们或许就能更有效地将软件“卖”给某些用户，特别是商业用户。\n用他们自己的话说，这种方法已经被证实是有效的。开源的修辞方式已经吸引了许多商业和个人用户来使用、甚至开发这些壮大我们社区的自由软件——但仅仅是在表面的、实用上的。开源哲学，和它纯粹的实用主义价值观，阻碍了人们对自由软件更深层观点的理解；它将许多人带进了我们的社区，但却没有教他们去捍卫社区。就目前的现状来看还是不错的，但是它不足以捍卫自由。要吸引自由软件用户，需要让他们成为个体自由的捍卫者。\n迟早这些用户会因为一些实际利益而转向专有软件。无数的公司试图提供这种诱惑，有些甚至提供免费副本。为什么用户会减少？只有他们领悟了自由软件所赋予用户的自由，去珍惜自由的价值，而不只关心特定自由软件在技术上和实用性上的方便性价值，他们就会明白了。为了传播这种思想，我们必须谈论自由。对商业采取一定的沉默方式对于社区来说是有益的，但是，如果大家普遍地把对自由的热爱看作是一种怪癖，那将是很危险的。\n开源的拥护者把新用户引入我们的社区，我们这些自由软件支持者必须做更多地工作来让这些新用户关注自由的问题。我们必须大声且更大声的高呼：“是自由软件给予了你们自由！”每当你说“自由软件”，而不是说“开源”的时候，你就是在为我们助阵。\n# 消歧义 黑客\nHacker 是指享受智慧乐趣的人们——并不一定与计算机有关。在 20 世纪 60 至 70 年代，麻省理工学院（MIT）的自由软件社区的程序员称他们自己为黑客。大约在 1980 年，那些发现了黑客社区的记者们错误地将这一词语用于指代“安全破坏者”。 请不要散播这种错误。那些破坏安全的人称为骇客（cracker）\nLinux\n是 LinusTorvalds 于 1991 年开始开发的内核的名字，使用 Linux 内核的操作系统基本上是由 GNU 再加上 Linux 内核组成的。将整个操作系统称为“Linux”是不公平并且引起混淆的。请将此完整的操作系统称为 GNU/Linux，既尊重 GNU 计划，也将整个操作系统和它的内核区分开来\n盗版（Piracy）\n出版商通常将不被它们批准的复制行为称为“盗版”。通过这种形式，它们暗示这在伦理上与在外海攻击船只以及绑架谋杀船上的人一样坏。基于这样一种鼓吹，它们在世界上的大部分地区骗取到了法律支持以便在绝大多数（有时是全部）环境下禁止复制（它们仍在继续施压以使得这些禁令更加完整）。\n如果您不认可未经批准的复制行为就像绑架谋杀的理念，您可能也不愿意使用“盗版”一词来描述此行为。\n中立性的短语诸如“非授权复制”（或者“被禁止的复制”，用于此种行为不合法的情况）可作为替代。我们中的一些人甚至倾向于使用某种褒义词，诸如“与他人分享信息”。\n一位主持了版权侵犯审判的美国法官认可“盗版”和“盗窃”属于诽谤性的词语\n“盗版”这一具有欺骗性的说法之所以被普遍接受，是由于它充斥于各种媒体，以至于极少有人意识到它到底有多么重要。它是如此地强有力，因为如果由公众进行复制是根本非法的，我们将完全不能对抗出版商强制要求我们牺牲自己的自由的行为。换言之，当公众被威胁给出理由以证明为何出版商不应获得某些额外权力之时，所有理由当中最重要的一条——“我们想要复制”——已经被预先否决了。\n供应商（Vendor）\n请不要使用“供应商”一词一般性地指代任何开发或者打包软件的人。 很多程序被开发的目的是贩卖其副本并且它们的开发者自然也是其供应商；这甚至也包括部分自由软件包。然而，很多程序是由志愿者或者并非致力于贩卖副本的组织开发的。这些开发者不是供应商。\n我们建议使用“提供者”（supplier）这一通用性的概念。\n究竟要不要支持盗版呢? 我是从我身边的现实理解的: 刚开始的时候, 我觉得一个东西很好, 我也不会立刻就选择入正. 因为我希望在按下按钮前 think twice. 如果是真心喜欢的话, 我一般会入正, 但是也要求对象的价格在我的波动的可接受附加支出内. 例如, 小时候为了一根棒棒糖我可以不假思索的购买, 但是为了一顿 60 元的大餐我会好好斟酌. 现在 60 元 100 元的大餐和旅行通行已经不能让我感到心痛了, 但是在所谓不能自食其力之前我不会说无拘无束, 我始终认识到付费内容和免费内容之间的差距, 大多数情况下我会用免费内容, 主要是为了省钱, 还谈不上所谓的支持\u0026quot;自由\u0026quot;.\n我对自由软件的理解: 如果只谈自由的表面, 我可以说中国的这些御三家手游都是自由的, 他们不付费不买断, 人人都能玩. 但是我主观上不喜欢这样的游戏(软件), 因为内购内容脑残且暴力, 对于我而言毫无意义(我说的就是所谓抽卡手游这样的).\n这事太复杂又太简单了. 自由软件和开源软件中的区别对于我们而言几乎没有. 对于有特殊取向的对象而言有加分只能说. 如果我直到一个软件是开源或者说是自由的话那么我也会立刻提升好感的. 我喜欢为爱发电的项目, 我希望在大部分情况下我的作品也是为爱发电类型的(公益, 公开, 公有).\n这就是所谓网络共产主义的魅力啊, 资源哥从来少不了称赞, hero 总是收到感谢. 我们需要更多的英雄(尤其是在这样的管制体制下)\n# 信息差 总之，你所能看到的都是他们想让你看到的, 所谓的信息差有高层低层之分。\n想获取尽量真实的“信息差”，建议接触国外的学术圈、开源应用圈子，这些圈子“相对”比较纯粹，不太有利益接入。\n我们需要掌握信息的源头\n# 农村程序员谈心 前端之虎陈随易\n更重要的一点：不要害怕失败！\n很多人心中有一点想法，但是迟迟不敢踏出一步，其中有个原因，就是害怕失败。\n其实失败是很正常的一种结果，从失败中总结的经验，才是接近成功的良药。\n所以，不要害怕失败，去尝试，去动手，去试错。\n但是，话又说回来，稳一点还是没错的，但是我所说的这个“稳”是指，当你失败的时候，对你的损失要尽量小。\n你不能因为失败了一次，就再也爬不起来了，比如拿出所有积蓄去炒股，失败一次就难重来了。\n就我个人来说，比如我做产品，搞创业，可见成本仅仅只是一台电脑，不可见成本就是需要持续投入自己的热情、精力和时间，比起其他很多产品和创业，成本和投入是非常非常小的。\n如果产品失败，那就换一个产品思路继续，可以有很多的试错机会。\n作为技术人的话，还是需要提前考虑一下自己未来的退路，上班虽好（不要只看到自由职业的洒脱，有稳定收入比啥都好，生活就是油盐酱醋，很现实），终究不是长久之计。\n所以，不管是接单还是做产品，请立刻，马上，每天挤一点时间，去持续探索，挖掘自己的副业，产生被动收入，复利收入，才能立于不败之地。\n对于那些也想成为自由职业者的同学，你有什么建议吗？人生苦短，及时行乐。\n但是我不建议这个“行乐”只是吃喝玩乐，而是要利用人生短短的时间，去做自己内心深处最喜欢、最感兴趣、最热爱的事情。\n当然，这个事情不能是违法，违规，不正当的，还是要有足够的正能量才行。\n不过，最大的阻碍，就是各种家人，环境，存款等因素了。\n我想说的就是，想象一下，你现在 80 岁了，你回过头来看你的一生，此时此刻的你，是你想要的那个你吗？\n如果不是，那就争取一下，提前准备一下，要么搞一些副业，产生收入，要么积累足够的存款。\n然后呢，没错！去吧！去追求自己内心的感觉！！！\n再次提醒，一定，一定，一定不要做冲动下的决定！\n如果你真的想成为一个自由职业者，那么你必须要具备以“年”为单位，来坚持和推进可以产生稳定收入的项目和耐心。\n否则，还是摆好心态，认真做好手头的事情，有稳定的收入来源，有良好的心态，上班也不比自由职业差，甚至好得多（因为自由职业要达到上班的收入实在是太难了！）。\n自由职业所面临的问题，非常非常棘手，要突破，何其难也（我至今还在突破中）。\n还有一个关键词，就是：积累。\n很多事情都不是一蹴而就的，而是水到渠成的。\n要持续不断地去折腾，去突破，去总结，去反思，去调整，去征服，就像《剑来》里面的阿良一样，要“猛”！\n“猛”是一种心境，是一种态度。\n最后一个建议就是：请对这个世界保持好奇和天真，用乐观的心态去生活。\n在某些人生抉择时，请多一些勇气，去做自己认为对的事情！\nSK 评\n撇开鸡汤不谈, 农村的生活确实诸多不便, 但是能有这样的超然物外的心境, 在下佩服\n# 英文文献是怎么看的 第一阶段：判断这篇论文值不值得读\n按【读标题和关键词 → 读摘要 → 读结论】的顺序掌握论文的大概内容\n第二阶段：读论文\n1）读图表和数据 → 读引言\n数据是最不会说谎的，这是论文中最原汁原味的东西\n2）读引言\n引言的功能是介绍研究的背景，以及在这个背景下这篇论文想解决的问题和它的重要性。\n如果你对研究的课题还不太熟悉，那就先搜集几十篇和自己课题相关的论文，先不读正文的实验部分，只读摘要和引言，快速了解这个领域以前研究的概况\n2）深挖细节：读结果和讨论 → 读实验部分\n第三阶段：做笔记\n好笔记的标准：下次看笔记内容即可，无须重读这篇论文。 ‍\n不完全赞同呢。这个阅读顺序的唯一适用范围，是自己已经非常熟悉的研究领域，并不适用于新手文献阅读者，也不适用于老司机文献阅读者对新研究领域的探索。如果是崭新的知识领域，顺着读完题目、摘要后，马上读引言是非常重要的，引言可以让你大致了解文章的知识领域、重要性，什么问题已经解决，什么问题没有解决，什么问题被这篇文章解决。如果直接开始读图表，很多时候难免两眼一抹黑。优先读图表而不同时读 Result 部分，的确是 critical thinking 很重要的步骤，但也要建立在能读懂图表的基础上。对于新的知识领域，还是建议老老实实地按顺序读完，同时做笔记。\n新领域我感觉最好的办法是略读引言，从里面翻有没有引用的综述类文章，然后精读综述。这样很快能对研究领域的有个全景了解。\n‍\n我的思路:\n我没有太多思路, 首先我会想翻译为中文, 然后丢给 GPT 助理帮我提取关键信息(AI 赋能在这里真的很好用)\n‍\n‍\n‍\n# 信息分布规律 【洛特卡定律】：发表 1 篇论文的作者占总数的 60.79%，发表 2 篇论文作者的数量是发表 1 篇论文作者数量的 1/4，发表 n 篇论文作者的数量是发表 1 篇论文作者数量的 1/n²。\n洛特卡定律说明一个领域的核心人物是极其有限的，绝大多数人不重要，找到这些极少数核心人物，就掌握了这个领域的核心信息。\n‍\n【布拉德福定律】：如将科学杂志按其刊载某学科主题的论文数量，以递减顺序排列，就可在所有这些杂志中区分出载文率最高的核心部分和包含着与核心部分等数量论文的随后几区，这时核心区和后继各区中所含的杂志数成 1：α：α2：⋯⋯ 的关系（α\u0026gt;1）。\n布拉德福定律说明一个领域的文献分为三个区域：核心区、相关区和一般区域，从核心区、核心期刊着手，获得优质信息源的概率会大大提高。\n‍\n真正珍稀的优质资源获取路径和艾滋病的传播途径一样： 血液、母婴、性\n我的评价是, 对于一个新鲜领域, 只要找几个大头兵好好管理好就抵得上一群菜鸟\n‍\n‍\n# 管理信息推送 ‍\n方法是，屏蔽一切被动推送过来的信息，只看经过你允许和选择的信息。\n其实在很长时间内，我都不喜欢刷知乎和微博，为啥呢，因为一打开，推过来的都是娱乐的，搞笑的、家长里短式的内容，我刚刷两下，就不爱看了（当然我也理解很多人爱看，甚至沉迷）。\n但实际上，微博里也好，知乎里也罢，是存在好东西的。对我来说，只是因为好内容淹没在垃圾里面了，垃圾让我很恶心，所以我连好内容也一起放弃了。 这就很遗憾了。\n‍\n深究一下就会发现，被垃圾信息淹没是源于两点。\n第一，系统默认让我看的是热榜-大家都爱看的垃圾内容\n第二，不知道什么时候瞎关注的人\n‍\n第一，删人。\n第二，大多数时候只看自己关注的人的信息。 当你这么做的时候，相信我，你会感受到世界都安静了，嘈杂没有了，推到自己面前的，都是有营养的大餐。\n‍\n但是很这样做明显有信息茧房问题\n‍\n所以人要适当的选择交流圈，有的时候可以独处，有的时候需要优质的人际关系，有些时候该断则断，该转向就转向。\n虽然听起来很复杂，但有一个基本原则，就是:尊重你的感受，感受是灵魂的语言（这句话来自于一本书，书名是《与神对话》）。\n‍\n大多数人的朋友圈全是分享日常流水账，可能是想维持曝光、或者想分享记录自己的生活吧，极少数亲近的人可能会关注，但对多数普通朋友来说其实就是毫无价值的信息。\n‍\n我的朋友圈和空间现在都是高质量信息了, 哼哼哼\n这种操作对于现在而言操作空间已经越来越小了, 因为平台会根据视频和其他广告协议供应商进行广告投送了. 你甚至不看视频都会被自己的身边人和自己的录音给出卖.\n但是总归是有用的, 例如使用两个账号, 使用(不感兴趣) + 自己主动搜索来处理\n‍\n‍\n# 信息搜集 此内容将会在未来被持久化,暂定 24.7\n‍\n总知乎链接\n信息越便宜，专注越昂贵。 When information is cheap, attention becomes expensive. —— James Gleick\n‍\n关于学习 网上的信息大部分都是碎片和失真的，从一堆垃圾信息中找到价值信息是挺麻烦的，多看书特别是教科书\u0026hellip;才能学到东西，偶尔可以刷刷纪录片什么的\n切记勿沉迷在被情绪驱动的事情之中。\n真正的知识是免费的，只要你愿意学，什么都能找到。\n‍\n1）文献\nGoogle 学术搜索\n2）对某些领域的入门了解\n维基+知乎+Quora\n3）对某些领域的深入了解\n就得看一些相对垂直的独立站了\n4）新闻\n新闻每个人感兴趣的都不一样。如果你对新闻不感冒，轻度阅读推荐喷嚏网（一个大佬推荐的），如果你是有重度浏览新闻资讯需求的用户，建议自己搞 RSS 但配置过程过于繁琐且可能会遇到一定的代码门槛(算了, 我本来就不是喜欢看新闻的家伙)\n5）Blog\n直接知乎搜大牛博客，能找到像吴军、风云、鸟哥、阮一峰等大牛博客列表\n6）医学常识\n默沙东诊疗手册 丁香医生 妙佑医疗国际（原梅奥诊所） ClinicalKey 临床精钥 可通过以上这四个网站进行基础的了解，但最好的方式还是前往正规公立医院就医。 - [中国政府网服务频道 医生执业注册信息查询](http://www.gov.cn/fuwu/bmfw/wjwyszyzgcx/index.html) - [中华人民共和国国家卫生健康委员 全国医疗机构查询](http://zgcx.nhc.gov.cn:9090/unit/index) ‍\n7）行业数据\n国家统计局 中国信息统计网 世界银行公开数据 宏观经济数据查询 CEIC 北京大学开放研究数据平台 Crunchbase 企业融资数据库 UN Comtrade 联合国商品贸易统计数据库 CNNIC 中国互联网络信息中心 调研报告及行业趋势\n普华永道 贝恩 埃森哲 德勤 艾瑞网 发现报告 艾媒网 标准网 IDC Counterpoint Research 消费品\nConsume Rreports 亚马跌 消协帮你选（微信小程序） CMM 智库 (monitor.com.cn) Maigoo 什么值得买 凯利蓝皮书 （Kelley Blue Book） Rtings 以上几个网站中什么值得买毕竟是上市企业所以商业化较重，内容相对良莠不一（乱用成语）与混杂，浏览时注意甄别。其他的都特别靠谱和专业，放心逛，特别是消协帮你选（微信小程序）是官方背景，强推。剩余的几个网站如果你是行业内人士可以多了解了解（比如汽车业是一定要玩转凯利蓝皮书，估计八成“车评人”都没听说过吧，什么？你说什么之家？那是啥玩意，逃）。 以下是中文 PUGC 科技网站：\nchiphell 机核 GCORES V2EX​ （推荐） 数字尾巴 mobile01 全球主机交流论坛 少数派 装备前线 外设堂 koolshare 人人都是产品经理 通信世界 通信百科 PMCAFF SegmentFault 思否 硬鹅 说明书之家 恩山无线论坛 极客公园 英文 PUGC 科技网站\nBusinessInsider FastCompany Tom’s Guide Wired NYT Tech The Information Recode MIT Technology Review OneZero Engadget CNET TheVerge Gizmodo TechCrunch Mashable Ars Technica TheNextWeb How To Geek ‍\n‍\n‍\n# 健康篇 ‍\n‍\n# 人体系统调优 ‍\n‍\n极简版的基础列表\n保持睡眠时长与质量。 不要吸烟。 尽可能每天做点运动。 减少糖分的摄入。 能做到这四点，就已经可以达到一个还不错的健康状态了\n‍\n‍\n# 睡眠 ‍\n# 原理 睡眠最重要的控制机理是我们内在的生物钟。随着生物钟的影响，我们体内的各类化学物质会发生变化，体温也随之改变，会影响我们的各种内在状态和外在行为。Huberman 教授很形象地描述了这个“生物钟”的具体作用方式：在早上，身体释放的皮质醇（cortisol）和肾上腺素（aderenaline）会让我们醒来，同时还会设定松果体释放褪黑素的倒计时钟，会在十多个小时之后让我们感到困意再次入睡。\n影响这个生物钟的最大因素是==光照==。我们的眼睛除了能够看到东西，另外一个重大的作用就是通过黑视素神经节细胞来接收光照信息，用以设定我们的内在生物钟。这也是为什么有时候我们通宵工作之后，虽然已经持续很久时间没有睡眠了，但随着太阳升起，整体的生物钟被设定到了类似起床时的状态，各类化学物质的释放会让我们突然感觉又有精神了。后续很多最佳实践里也都跟这个原理相关，我们需要控制自己接收光照的时间点，类型和时长。\n此外，体温也是一个用于控制我们生物钟的手段。一般来说我们的体温会从深睡眠中比较低的状态逐渐升高，到醒来后持续上升。到了一天的后半段会开始逐渐下降，直到再次进入睡眠。\n‍\n# 实践 ‍\n皮质醇的释放与接触阳光有关，因此如果想尽快醒来且保持日间良好的精神状态，起床后应该到外面去接触阳光，持续 2-10 分钟。这对于血压控制，心理状态，设定睡眠的“倒计时钟”等都有很大好处。户外日光的效果最好，如果是人造光源，蓝光的效果会比较好，且最好是上部（天空的位置）的光源。根据光照强度推算，隔着窗户接收日光的强度会降低 50%以上，而达到同样效果所需要的光照时间则需要 50 到 100 倍。有意思的是，这一点对于视障人士也有效，因为前面提到的黑视素神经节细胞并不是用于视觉成像的细胞。\n对应的，在晚上要尽量减少光源的接触，因为这会扰乱我们的生物钟，让身体系统误以为是在白天。尤其是晚上 11 点到次日凌晨 4 点之间接收光源，会抑制后续几天的多巴胺的释放，影响心情，心理健康，专注度，学习能力，新陈代谢等等。关于多巴胺的作用和机理，后面会再单独介绍。\n如果不可避免需要在晚上接触光源，处于较低位置，暗淡的红光，蜡烛之类的会相对好一些。如果要看电脑，建议使用 blue blockers 眼镜，这跟一些电脑软件会自动调节屏幕色温的效果可能类似。\n傍晚观察落日，对于后续入睡也有帮助，甚至能减轻晚上摄入光照的负面影响，有点神奇。\n人一天中的精神状态一般会在中间有个短暂的低谷，所以午睡对于有些人可能是有帮助的。也可以用一些其它的非睡眠深度休息的方式来替代，如 Yoga Nidra，冥想，自我催眠（可以利用一些 App，如 Reveri）等。\n体温对生物钟周期的影响：\n早上洗冷水澡，会让人快速升温，从而把睡眠周期往前移（早起）。 晚上锻炼身体，会让人保持高体温，从而延后周期（晚睡）。 可以选购一些自动控制体温的智能床垫来提升睡眠质量。 一般建议的锻炼时间：醒来后 30 分钟，3 小时和 11 小时这三个时间点。不过总体来看好像影响度比较小。\n饮食和药物因素：\n咖啡因会占据腺苷（adenosine）的受体，阻断入睡的信号。有不少文章都提到中午之后尽量不要喝咖啡，但 Huberman 表示没有科学实验表明咖啡因对所有人的效果是一样的，得根据自己的测试情况来。比如他自己在下午 5 点喝咖啡也能正常入睡。我是一到中午喝咖啡就会晚上睡不着的家伙 镁，对入睡有帮助。 芹黄素也能帮助入睡，但要注意对雌性激素的影响。 建议不要摄入太多牛磺酸。 不建议通过摄入褪黑素来帮助入睡，褪黑素药物本身的规格把控不严格，且褪黑素容易引起抑郁情绪。 中午可以吃低卡路里以及含酪氨酸的食物，如坚果，大豆，部分蔬菜等，提升多巴胺，肾上腺素，保持清醒。 晚上则可以吃点淀粉，白肉等富含色氨酸的食物，进而转化为血清素，会让人更加平静，容易入睡。 对于绝大多数人，6-8 小时的睡眠时长是比较健康的。\n对于各类药物的检索可以参考：examine.com。\n‍\n# 饮食 ‍\n# 禁食背景 ‍\n我们可以把身体跟进食相关的化学状态分成 2 类：\n吃饱了的状态，也就是血糖含量较高的状态。此时我们身体会更活跃地进行体内细胞的复制与成长 禁食的状态，也就是血糖含量较低的状态。此时我们的身体会更活跃地进行体内细胞的修复与清理（autophagic）。 ‍\n由于睡眠时我们天然是不吃东西的，所以一般来说睡眠中的一部分时间会使我们处于禁食状态，饮食时间的选择实际上就是在控制上述两个状态的持续时间和平衡关系。比较有意思的是世界上很多民族文化和宗教中，都有一些跟禁食相关的习俗，甚至会持续很多天。\n在 2012 年，科学家开始对小白鼠做实验，把他们分成两大组，一组可以在一天中的任何时间吃东西，而另一组只能在固定的 8 小时里吃东西。在大组里再区分小组，给小白鼠吃健康的和不健康的食物。结果发现，只能在 8 小时里吃东西的小白鼠们，即使吃的是不健康的高脂肪食物，他们的健康水平仍然得到了保持甚至提高，相比所有不做限制的组都有明显的提升。\n这个研究震动了学术界，后续又有非常多的针对人类，不同性别，不同年龄，不同职业（包括运动员）的各种实验与论文发表，科学家们发现这种间歇性禁食状态对于身体有非常多的好处，包括：促进肝脏健康，胆汁酸代谢，炎症自愈，保持体重，提升 brown fat 储备（对健康有益），防止非酒精性脂肪肝，血糖控制，肠道健康等等。如果养成间歇性禁食的习惯 60 天以上，还会让我们的身体倾向于代谢脂肪来供能，控制体重。\n因此，Huberman 教授指出，何时进食，与吃什么东西，其实是同等重要的。这个研究也让很多学术界的研究人员自己也都养成了 fasting 的习惯，包括 Huberman 自己。\n‍\n‍\n# 禁食实践 ‍\n由于长时间的禁食难度较大，所以绝大多数的研究都专注于间歇性禁食，也就是 intermittent fasting。简单来说就是跟前面的小白鼠实验一样，在一天的固定时间段来吃东西（跟睡眠周期对齐），而其它时间段都不摄入任何食物的做法。这里简单整理为基础和高阶两个版本：\n基础：如果想享受 fasting 的基础收益，最简单的执行原则是起床后至少 1 小时内不要吃东西，同时睡前的 2-3 小时不要吃任何东西。 高阶：目前研究结果中最理想的进食窗口是 8 小时，结合社会习俗等，一般比较合理的时间在 10-18 点或 12-20 点的范围。看起来不吃早饭并不是什么坏事 :) 作者特地温馨提醒，如果想通过健身来增肌，建议可以把这个时间窗口往前移，因为早上摄入蛋白质会对肌肉增长有益。而健身的时间可以自由选择。 尽量保证这个窗口时间的稳定性，也非常重要。否则就跟频繁倒时差产生的效果差不多，会打不少收益折扣。 如果想尝试高阶 fasting，建议逐渐切换进食习惯，例如每两天缩短 1 小时的进食窗口，逐渐达到理想的 8 小时。 值得注意的是，这里说的不吃任何东西，并不是说连水也不能喝。从前面的背景可以看到，是否处于禁食状态，主要依据是血糖水平，因此：\n喝水，茶，咖啡（不加牛奶）等，并不会中断禁食。但一勺糖的摄入就会中断。 晚饭后想尽快进入禁食状态，可以做一些轻量运动，比如散步等，加快血糖清理。 二甲双胍，黄连素（berberine）等可以直接促进血糖清理。肉桂皮，柠檬汁，也能轻微降低血糖。 最后，如果禁食期间觉得有些头晕，颤抖，并不需要立刻进食或摄入糖分。可以喝一点盐水（可以加柠檬汁），一般就能很好的缓解症状。这让我想起 Lex 会提到了会服用药片来补充各种电解质元素，比如钠，镁，钾等。\n‍\n‍\n# 饮食与消化道健康 ‍\n‍\n肠道的微生物群不仅影响消化系统的健康运作，对人体的免疫系统也起到了非常关键的因素。 婴儿出生，成长的方式会形成非常不同的肠道菌群生态。暴露在微生物环境中（但要注意会引起疾病的情况），对于维持菌群环境是有益的，比如家里养宠物，让孩子自由玩耍等，不需要过度清洁与消毒。 什么是健康的肠道菌群生态，目前没有一个标准的结论。不过总体来看，菌群的多样性程度高，一般就表示更加健康。 抗生素会严重破坏肠道菌群生态，需要谨慎使用。 ‍\n在访谈中，两位重点讨论了一个实验，就是什么样的饮食方式会让我们更好的维持肠道菌群的多样性和健康。实验主要对比了两种附加饮食：\n高纤维食物：全谷类，豆类，蔬菜，坚果。这也是传统上被认为非常健康的食物，其中很多纤维的分解都需要肠道菌群的帮助，换句话说，纤维就是它们的“食物”。 发酵类食物：酸奶，牛奶酒（kefir），康普茶，酸菜，泡菜，纳豆等。注意需要是自然发酵，一般是冷藏且非罐装的食品。而且像酸奶这类要格外注意不要加糖等添加剂。 ‍\n实验的结果也颇令人意外：\n摄入发酵类食品的组，显著提升了肠道菌群的多样性。被试者几十个免疫标志物的显著降低，对各类炎症都有更好的抑制作用。没想到吧，肠道菌群还能调节炎症。 肠道菌群本来的多样化程度比较高的人，摄入高纤维食物是有帮助的。如果不是，则摄入高纤维食物的帮助不大。在工业化进程中，人类的进食习惯已经有很多代都转变为了摄入大量肉类，加工食品等，肠道菌群的生态无法仅通过提高纤维食物的量来改变其族群结构。 ‍\n如果要改善肠道菌群生态，最好的方式是一天两次摄入天然发酵类食品。 高纤维食物对于肠道菌群生态的维护是有益的，建议日常饮食以植物类食物为主，尽量避免深度加工食品的摄入，控制糖的摄入。Sonnenburg 教授还讲了个故事，说微生物学家参加的会议，一般餐厅的沙拉吧总是会供不应求 :) 前面提到的 Rich Roll 大佬也是个素食者。 益生菌的效果没有广泛研究支持，且这类产品的监管很有限。益生元的效果也是好坏参半，缺乏多样性，溶解速度太快等问题都使总体效果存疑。 地中海饮食相比生酮饮食来说对健康的影响效果接近，但更容易坚持遵循。另外生酮饮食如果长期实践可能有一定的风险。所以总体更推荐地中海饮食结构。 ‍\n另外值得参考的是我们也有官方的 中国居民膳食指南，或许更适合东方人的饮食习惯。\n‍\n# 心态与动力 ‍\n这一部分主要介绍的是人体的多巴胺系统原理，以及如何利用它来形成健康，自律的生活方式。这一集是 Huberman 开播以来播放量最高的一集，对于强健我们的心智有着非常好的指导作用。\n‍\n# 原理 ‍\n多巴胺是一种非常重要的化学物质，主要作用于两个神经回路：一个影响身体的运动，例如帕金森病与多巴胺的分泌不足有关；另一个则影响我们的动机，欲望与快乐，这几乎与我们从事的各种活动有关，无论是工作，学习还是社交，休闲娱乐。这里我们会主要讨论多巴胺的后者影响能力。\n我们为什么会“放弃”，实际上是由于在不安，压力，沮丧等情绪作用下，身体内的去甲肾上腺素水平不断提升，当超过一定阈值时，神经系统中的认知控制就会关闭，我们就放弃了。多巴胺能够抑制去甲肾上腺素作用，从而持续“激励”我们前行。\n‍\n神经系统中多巴胺含量水平的高低会影响我们的情绪，当多巴胺水平低时，我们会感到情绪低落，没有动力，而多巴胺水平高时，我们会感到兴奋和快乐。在通常情况下，我们的身体处于多巴胺 baseline 的状态，当我们达成一些令人兴奋的目标（比如玩游戏胜利，考试拿高分）后，多巴胺的水平会达到一个高峰，此时我们就会获得巨大的愉悦感。在高峰之后，多巴胺水平会回落到比 baseline 更低的一个水平，且这个状态会持续一段时间。\n‍\n这里有两个非常重要的原理：\n多巴胺绝对值含量的高低只是一方面，更重要的是其“相对变化量”的多少。比如在刷抖音时看到了一个很有趣的视频，多巴胺水平升高，你会感到快乐，刷到下一个视频时，你感到的快乐程度好像不会那么强烈了，因为多巴胺已经在一个比较高的水平，难以形成更大的变化量。而同样的视频，如果你是几天之后看到，或许你会觉得有意思的多。所以当你持续做一件喜欢的事情时，你感受到快乐的阈值也会不断提高。\n多巴胺的总体“储备”是有限的！也就是说无论你是通过学习，工作，娱乐，社交，运动等不同方式来获得快乐，所消耗的“快乐货币”都是同一种：多巴胺。举几个例子来看下这个原理带来的影响：\n很多自律的人都会说自己是 work hard，play hard 的生活方式，比如工作日通过高强度的工作来获得成就和满足感，休息日进行各种休闲娱乐，运动，社交等方式来获得快乐，其实背后都是在释放多巴胺来获取快乐。长期持续，我们身体的多巴胺 baseline 会逐渐下降，出现一种燃尽（burn out）的心理感觉，对很多事物无法保持之前的兴趣与精力。 很多人会对玩电子游戏着迷，因为它们能带来巨大的多巴胺释放刺激让人感到快乐。但要意识到，多巴胺的储备是有限的，如果对此上瘾，你的多巴胺耗尽问题就会变得非常严重：一方面能够引起你兴趣的事物会变少，可能只有玩游戏才能带来快乐；另一方面，后续甚至会导致玩游戏本身也无法触发多巴胺释放，引起严重的抑郁问题。 ‍\n另外，多巴胺也具有叠加效应。比如你喜欢健身，那么运动就会刺激多巴胺的释放。而我们实际去健身时，可能会不自觉地安排了很多其它的“快乐因素”，比如选一个精神状态比较好的日子，运动前喝一些能量饮料，跟认识的朋友一起去，边健身边 social，听一些自己喜欢的音乐或 podcast，等等。这些因素也都会促进多巴胺的释放，让你感到“前所未有的快乐”。但要注意前面的原理，多巴胺的高峰越高，后面随之而来持续的低谷也会越长，而且长此以往，可能会降低你单纯从运动中获取快乐的能力。这样的例子还有很多，比如边跟朋友吃饭，边玩手机，拍照发朋友圈，可以计算一下叠加了几种快乐因素 :)\n‍\n‍\n# 影响多巴胺外界因素 我们来看下具体影响多巴胺释放的各类因素有哪些，首先是促进多巴胺分泌的：\n巧克力，提升到 1.5 倍的多巴胺 baseline 性行为，提升到 2 倍 尼古丁，提升到 2.5 倍 可卡因，提升到 2.5 倍 安非他命，提升到 10 倍 咖啡因本身只会少量提升多巴胺，但它会抑制一些多巴胺受体，提升同等多巴胺造成感受的效果 马黛茶，包含咖啡因，能控制血糖，还能保护多巴胺神经元 刺蒺藜豆也能提升多巴胺（基本等同于 L-DOPA），还能提升男性精子数量和质量 运动，带有主观成分，喜欢跑步的人，可以提升到 2 倍 baseline 健康的社交关系也会促进多巴胺释放 ‍\n‍\n食物方面感觉 Huberman 教授非常推荐马黛茶。\n也有很多提升多巴胺释放或影响其效果的药物：\nL-Tyrosine（酪氨酸），提升多巴胺 Phenethylamine（PEA），巧克力中也包含，能够提升多巴胺 Huperzine A，提升多巴胺 各种“聪明药”，如 Adderall, Modafinil, Alpha-GPC, Ginkgo 等，留学党应该很多都有耳闻 ‍\n通常来说，不推荐持续使用这些药物，因为多巴胺释放之后的高峰会带来 baseline 水平的降低，导致无法享受活动的快乐，无法专注，限制学习能力和神经元可塑性等。Huberman 表示一周使用一次的频率应该是安全的。\n最后还有一个比较特别的研究，就是冷水浴能够提升多巴胺释放到 baseline 的 2.5 倍左右，且持续时间更长，能达到 3 小时左右。建议使用 10-14 摄氏度的水温，注意安全。此外冷水浴也不需要太频繁，每周 11 分钟左右足够。如果已经习惯了冷水浴，那么也就没有释放多巴胺的效果了。\n‍\n还有一些因素会降低多巴胺，如：\n褪黑素，会引起多巴胺的减少。前面也提到过并不建议使用褪黑素来帮助入睡，或者适应时差等。 睡眠时段接触光源，也会引起接下来几天的多巴胺水平下降。半夜睡不着刷手机是很有害的哦。 ‍\n‍\n# 健康的多巴胺水平 了解了原理和各种影响因素后，我们来看下如何有效设计我们的生活工作方式来维持健康，可持续的多巴胺水平。\n简单回顾一下，前面我们已经知道了多巴胺储备有限，且对一件事物上瘾会不断提高感受快乐的阈值，那么如何让我们能对一件事情保持长时间的兴趣和投入度，又不至于耗尽多巴胺呢？\n一个经典的例子是赌场的运作方式，我们并不是每一次下注都能赢，偶尔赢一次会释放多巴胺，而且根据赢得钱的多少有所上下浮动，这会吸引玩家持续参与。这就是一种非常有效的间歇性且随机的奖励机制。感觉很多游戏，社交网络产品也借鉴了这个思路来进行设计。\n对于我们经常需要从事的活动，我们也可以模拟这个机制。还记得前面提到的多巴胺叠加效应吗？我们可以通过随机化叠加因素的多少，来实现多巴胺释放的差异性。还是以健身为例，我们可以随机决定今天是否要听音乐，是否去健身时带手机，是否要在健身前喝能量饮料等因素。如果其它什么都不做，只是单纯健身，那么多巴胺的释放量就会相对较低。如此就能模拟多巴胺释放有高有低的随机奖励机制。\n‍\n‍\n# 成长型思维 最后来看下如何构建良好的思维方式来利用多巴胺系统提升自我。\n有一个非常知名的实验，挑选了一群天生喜爱画画的小朋友，在他们完成画作后给与一些奖励。后面在移除这些奖励后，小朋友们对于画画的兴趣和动力大大降低了。这个实验说明，当我们因为一个活动收到奖励（比如金钱，美食等）时，我们反而会降低活动本身的愉悦程度。而且多巴胺本身影响我们对时间的认知，同时也影响我们的情绪状态，如果我们始终以完成活动后的奖励为目标，则整个过程中就很少释放多巴胺，让原本困难的过程变得更加难以坚持。\n‍\n仔细想一下，这是一个非常有意思的观察。多巴胺有点像我们的“本能系统”，决定了我们是否有动力做一件事。但反过来我们的主观思想却可以影响这个系统起作用的方式，这也是人类为何能摆脱动物本能，达成很多需要“反人性”的投入才能取得的成就的原因吧。上述的实验是我们的主观思想造成的一个反面作用的例子，我们自然也可以实现正面作用，那就是成长型思维。\n具体来说，就是通过自我暗示，把努力过程本身当作一种“奖励” 。我在努力学习，这个过程本身就是有趣的，会让我不断变得更强，这样的想法会在过程中激发身体系统释放多巴胺，而多巴胺提升了我们的情绪和动力水平，也会让努力的过程中碰到的困难变得相对容易克服。专注于这个过程的本身，而不是在过程前进行各种外界刺激（如前面提到的药物），或者在过程后给自己巨大的奖励。\n这种思维方式看起来很主观，但这就是我们的神经系统工作的方式，虽然人类的“硬件系统”都差不多，但知识，思维这些运行之上的“软件”却可以千差万别。我们可以通过自律，自我暗示来改变自身对各类活动的喜好。例如通过暗示 fasting 对我们健康的益处，来获取满足感，而不是借助于 fasting 结束后的大快朵颐。通过自律抵御高油盐食物的吸引力，并且自我暗示植物类食物对身体的好处，坚持一段时间，会觉得花椰菜也挺美味的。这也是为什么我们在这篇文章中介绍了很多原理性的内容，而不仅仅是行为建议。因为这些原理知识能够让我们做更好的自我暗示 :)\n多巴胺系统中也有对我们认知成长造成“障碍”的运作机理。例如当我们接受到的信息支撑我们之前的信念时，也能够激发多巴胺的释放让我们感到快乐，这从本质上会改变我们对世界的认知。由此可见， “空杯心态” 是多么难得的品质，网上如此多的争论无法达成共识也有很大一部分“归功”于此。如何克服神经系统中的这类缺陷呢？一种可能的方法是尽可能调节情绪，使自己处于镇静的状态（提升血清素水平），这样才能让自己更好的去倾听和吸收跟自己认知不一致的信息，更好地协同合作\n‍\n这一节的 podcast 对我本人的冲击非常大，强烈建议大家观看这期 Mindset \u0026amp; Drive，相信也会有不同的收获。\n‍\n# 学习与专注 在了解了多巴胺的运作机制基础上，我们可以继续探究一些跟大脑健康，专注度，如何进行高效学习相关的话题。\n‍\n# 学习的原理 从脑神经科学来看，学习的本质是神经元的重新连接（rewire），进一步来看，需要大脑处在一种学习的化学状态下，也就是 Huberman 经常提到的神经可塑性（neuroplasticity）状态。要达到这个神经可塑性状态，有两个重要条件，一个是足够的专注度，另外一个是 “犯错”的信号（后面会展开）。另外大脑一个比较有意思的机制是，在学习时的神经可塑状态下，乙酰胆碱会标记需要改变的神经元，而具体的神经元重连接则主要是在休息和睡眠时发生，是不是有点像 JVM 虚拟机的垃圾回收机制 :)\n什么是犯错信号呢？当我们尝试做一些事情，但没有达到预期目标时，身体会给大脑发信号，“我犯错了”。处在这种犯错，沮丧的认知状态下，神经系统会释放肾上腺素（提升 alertness），乙酰胆碱（提升 focus），多巴胺（促进神经元的 change，rewire）等化学物质，激活神经元的可塑性。也就是说，犯错是我们进入学习状态的重要前提。搞机器学习的同学应该很熟悉了吧，这跟我们训练模型不是一模一样么 :) 另外很多人可能觉得心流（flow）状态是学习的最佳状态，而 Huberman 则不这么认为。心流是一种精神高度集中且接近于自动化的状态，是在做我们已经知道怎么做的事情，而不是在学习新的知识技能。\n对于这个学习状态，经典的实验是给人们戴上一些能转变角度的眼镜，然后执行一些类似物体抓取的任务。由于看到的东西通过眼镜改变了其本来的位置，一开始在尝试时总会出现抓取动作的偏离。但后续在进入神经可塑性状态后，我们能逐渐适应相关的视觉偏移，协调自己的听觉，动作等都与之协同，顺利完成任务。更有意思的是，这个“神经可塑性”的化学状态是可以持续的，我们甚至可以先通过一些其它操作触发大脑的这个机制，再去进行真正的学习，以加快学习的速度。这里还有一个隐藏逻辑，当你在遇到挫折困难时，大脑进入了可塑性状态，而此时你却放弃了，那么神经元也会重新连接到这种容易放弃的行为模式，形成恶性循环。\n人在年幼时期大脑天然的神经可塑性会比较好，而在 25 岁以后则会大大下降。我们后面会提到如何来进行克服。\n另外，休息和睡眠时也会发生大量的神经元重连接的活动，这也是之前我们就提到过的，高质量的睡眠是实现很多生理，心理健康强壮的先决条件。\n‍\n# 利用神经可塑性 如果正在阅读文章的你还未满 25 岁，那么恭喜你，你的神经可塑性仍然非常的好，可以尽可能广泛的学习各种知识和技能。比如你可以很快学会各种乐器，新的语言，新的运动，新的专业技能等等。通过更广阔领域的体验接触，尽量找到你最有兴趣的方向，可以后续再不断深入经营。\n‍\n如果已经像我一样超过了 25 岁，那么还有很多办法来提升神经可塑性：\n通过实验发现，成年人对于小幅度的增量学习是完全可以适应与掌握的。例如每次视觉上的偏差只有 7 度，而不是一下子就来个 180 的大颠倒，那么成年人也能很快从错误中学习纠正。应用到实际学习中，我们每次学习的内容可以控制一下不要太多（本文有点违反了，建议收藏慢慢学习），多次积累来完成神经系统的调整学习。 对于达成目标的渴求度越高，重要性越大，奖励的刺激越大（比如为了生存），则神经可塑性就会越容易出现。这个比较符合直觉，但是现实中可操作性可能不高。 第三点最有意思，通过扰乱前庭神经系统（vestibular system），能够达到神经元可塑性的状态。简单来说，就是让你的身体有一些“新颖的重力体验”，如倒立，瑜伽，体操，滑板，任何让身体会失去平衡的一些状态等，会快速激发“我犯错了”的信号，进入学习状态，甚至可以在之后去做别的任务的学习。这一下子就让我想到了淘宝成立初期的“倒立文化”，没想到还真的有科学依据。需要注意的是，这个体验必须要新颖，也就是说如果你已经倒立很熟练了，那么去做倒立就是个日常行为，并不会给身体一种在犯错边缘，需要纠正的刺激。 ‍\nHuberman 认为，大脑的主要功能链路是感知，认知，情感，思想，行动。在尝试控制我们的神经系统来进行各种任务时（例如学习，解决困难问题，挑战运动极限），我们是很难用精神思想来控制其本身的（比如不断跟自己说我不能分心），更可行的办法是“逆向链路”，从我们的行动出发，利用神经系统的运作原理，逐渐影响思想，情感，认知甚至感知部分。这也是 Huberman 非常推崇各种“行动工具”的原因。Mood follows action。\n‍\n‍\n# 学习的理想状态 除了神经可塑性的化学状态外，我们也需要注意其它的因素。例如我们不能太放松以至于有些昏昏欲睡，也不能太紧张激动，无法控制自己拥有清晰的思考等。这些也都跟我们体内的多巴胺，肾上腺素，乙酰胆碱，血清素，褪黑素等化学物质的水平有关，需要做好调节。在之前 Rich Roll 的访谈节目中，Huberman 提了一个非常有效的“呼吸工具”，叫生理叹息（Physiological Sigh）。\n‍\n操作方法上简单来说就是吸两口气，然后出一口长气。通常情况下，只要一两次生理叹息就足以使我们的压力和警觉水平迅速下降，让人感到更加平静，提升学习表现。\n前面提到的成长型思维也很重要，在遇到错误导致的沮丧感觉时，可以不断增强自我暗示，失败是帮助我们学习成长的唯一路径，对我们是有益的，以此增加多巴胺的释放，提升学习动力和过程中的愉悦感。\n联系到睡眠对学习的促进作用，也有一些研究提供了一些相关的 tips：\n在学习时听一些有规律的节拍，在入睡时也播放同样的微弱节拍，能够提升学习和记忆的效果。 一般在 90 分钟的学习后（人体生物钟的周期），可以选择进行 20 分钟的休息（non sleep deep rest），也会加强学习的效果。 Gap effect，在学习中随机停止 10 秒钟，这些停止会在睡眠中加速“播放”，提升学习效果。 ‍\n‍\n# 提升专注 ‍\n“专注”背后的机理是大脑中两种“网络模式”的协调，一种叫 Default network，在我们不做任何事情时被激活，另一种叫 Task networks，在我们专注于做某些事情时被激活。普通人的大脑能够很好地协调这两个模式，两者像跷跷板一样，当一种模式被激活时另一种模式会被抑制。而具有专注障碍（比如多动症）的人来说，这两者无法很好地进行协调，因此会出现无法专注的现象。\n通过提升多巴胺水平，可以有效促进这两种网络模式的协调，因此有非常多的多动症治疗药物都跟提升多巴胺有关，例如 Adderall，Modafinil 等。一些调查表明，这些药物（经常被称为聪明药，nootropics）在美国被滥用的程度甚至超过了大麻，不少“学霸”都以此来提升注意力，减少对睡眠的需求。但 Huberman 教授表示，一方面多巴胺的刺激提升后都会带来多巴胺水平的低谷，另一方面这些药物也可能导致上瘾，对新陈代谢作用造成扰动，有很多负面影响，对长期的学习与记忆效果可能并没有提升作用。在之前介绍多巴胺的章节也有提到，应该谨慎使用这类药物，并严格控制使用频率不能过高。\n最好的提升专注的方法当然是前面聊过的更好的控制我们的多巴胺系统，例如把行动跟背后的意义相连接，给自己正面的心理暗示；将任务拆成多个小的里程碑，通过过程自身的激励来促进多巴胺的释放提升我们的专注度。此外一些安全有效的提升专注力的方法包括：\n适量补充 Omega-3 EPA 鱼油，这是神经细胞的组成原料之一，能够有效减轻抑郁，对治疗多动症（ADHD）也有帮助。 通过身体其它部分释放运动，可以帮助提升注意力。教授举的例子是作为神经科医生在开刀时，如果采用半蹲半站的姿态（运动释放），拿手术刀的手更稳定不容易颤抖。这让我想起以前读书时很多同学习惯转笔，现在工作了也有不少人喜欢玩指尖陀螺，或者站立办公，可能都是类似效果。 限制视野范围，能够提升专注度。比如我们经常因为眼睛瞟到了任务栏上的消息提示闪动而分心，可以通过一些设置来进入“专注模式”。 视线的高低也会影响神经状态，视线往下看会让神经系统偏向镇静，放松，甚至困倦，而视线向上则会让系统提升警惕。工作时一般至少把显示器放置在鼻子位置之上。 大脑不擅长处理大量频繁的 context switch，典型的比如刷抖音，不同的信息以非常快的速度频繁切换，这对我们的注意力是有伤害作用的。2014 年的一项研究表示，我们每天在手机上花费的时间应该少于 60 分钟（青少年）/120 分钟（成年） ，以免引起注意力障碍问题。 还有研究表明，17 分钟的冥想，能够对大脑中的神经元做重新连接，永久地改善注意力。只要做一次就可以，完全可以尝试一下。 ‍\n‍\n# 大脑健康 最后来看下提升大脑健康和效能的一些方法。\n‍\n首先是前面提到过的，保证高质量的睡眠。\n‍\n运动方面，对大脑直接帮助最大的是有氧运动，提升心肺功能，支持大脑供能。建议每周 150-180 分钟的有氧训练。\n‍\n对于大脑健康有帮助的食物，其中前三点是比较重要的，后面的部分涉及的研究没有那么多：\nOmega3, 尤其是 EPA 等脂肪酸，是大脑组成的重要部分，且一般人都容易摄入不足。多吃鱼，牡蛎，鱼子酱，奇亚籽，核桃，大豆。一天至少摄入 1.5 克，理想情况需要 3 克以上。不喜欢吃鱼的话可以辅助摄入鱼油。 磷脂酰丝氨酸，也对认知能力有帮助。通过鱼，肉类，卷心菜来摄入。 乙酰胆碱，重要的神经调质，提升注意力。摄入胆碱的重要来源是鸡蛋，尤其是蛋黄。土豆，坚果，水果中也含有，虽然没有蛋黄中的含量那么丰富。可以通过 Alpha-GPC 等补充剂来获取。 肌酸，尤其对于不吃肉的人，一天需要摄入 5 克左右。 花青素，在蓝莓，黑莓，葡萄等食物中有提供。可以降低 DNA 损伤，缓解认知下降等问题。大约每天需要 60-120 克蓝莓的补充。 谷氨酰胺，可以通过牛肉，鸡肉，鱼肉，鸡蛋，大豆，卷心菜，菠菜，芹菜等食物来摄取。提升大脑在缺氧（高海拔地区）下的表现，还能够抑制对糖的需求。 水，钠，钾，镁等电解质是神经元信号传递所需的基础元素，需要保证。 这一节中还讨论了我们身体对各种食物喜好进行判断的三个渠道，前两个分别是味觉判断和营养成分的下意识判断。第三个比较有意思，也跟多巴胺有关，即我们可以通过提升大脑代谢的活跃度来增加对某种食物的喜好。比如你如果不喜欢吃鱼，一种方法是你可以把鱼跟你平时爱吃的食物一起吃，另一种是给自己足够的心理暗示，说服自己吃鱼是有益身体健康的。通过这两种办法，你都可以让大脑释放多巴胺，从而逐渐提升对鱼类食物的喜好程度。\n最后，如果你对膳食补充剂感兴趣，还可以看看 Huberman 教授平时会吃的补充剂有哪些。\n‍\n‍\n# 长寿 最后我们来看下如何延年益寿，这是 Huberman 跟这个领域的专家，来自哈佛的 David Sinclair 的一集访谈节目。\n‍\n# 衰老的本质 Sinclair 认为，衰老是一种疾病，它本身导致了非常多通常意义上的疾病的出现，比如阿尔兹海默症，癌症等。我们可以通过科学的手段来“治疗”衰老，甚至逆转它。\n从本质上来说，衰老是基因信息的损失，这分为两部分：\nDNA 本身的信息，比如细胞中的 DNA 结构会在辐射等情况下受到破坏。 控制哪些基因进行表达的信息受到了破坏，也就是所谓的表观基因组（epigenome）。这部分在衰老的因素中占了 80%。 ‍\n人体内有一个天然的“衰老时钟”，而且并不是以匀速走的。在年轻时我们的生长发育过程中，这个时钟走得更快。所以如果青春期发育比较迅速的人，一般来说整体的时钟走的比较快，寿命也会相对短，是不是有点吓人……而且，一般比较矮小的人，像侏儒很少会得心脏病，癌症，也会明显更长寿。不过不要紧张，前面提到了，基因本身的信息只占了衰老因素的 20%，控制基因表达这部分占了大多数。\n这里有点意外的是 Sinclair 教授介绍的最重要的几个实验，都跟前面我们提到的 fasting 有关。比如一般老鼠的寿命大概是 2 年，他们实验室有一只叫 Yoda 的老鼠，活了足足 5 年。其主要的做法就是选取了侏儒基因，以及执行 fasting。\n教授详细介绍了 fasting 为何能提升动物/人类 30% 以上的寿命：\n在低血糖水平时，身体会抑制哺乳动物雷帕霉素靶蛋白（mTOR），激活去乙酰化酶（sirtuin），形成一个非常良好的化学状态，清理旧蛋白质，提高胰岛素敏感度，提供更多能量，修复细胞等等。后面这个乙酰化酶是我们抵御衰老的一个重要武器。 当胰岛素水平低时，“长寿基因”会被激活，如 SIRT1 等。 fasting 会给细胞足够的“休息时间”。 血糖水平低，会让身体对胰岛素更敏感，更快吸收血糖，也对健康有益。 当你从来不感受饥饿时，你的衰老时钟也走的更快。 除了 24 小时周期 fasting 触发的 autophagic，还有更深层次的清理机制，会在禁食第二，三天启动。在老年老鼠上的实验表明，这种长时间的禁食可以让他们延长寿命 35%。不过这个实操难度对普通人来说有点大。 Sinclair 也对比了一些上个世纪失败的研究，比如通过抗氧化剂来抵御衰老。现代长寿研究的核心思想是，如何通过一些机制手段来触发身体自身的衰老抵抗机制。\n‍\n‍\n# 抗衰老手段 ‍\n先来总览看一下各种抗衰老的手段。\n‍\n# 饮食 包括食物结构和饮食控制。饮食控制方面前面有提到过，建议缩短进食窗口到 8 小时左右。饮食结构可以参考最新发表在 Cell 上的这篇文章 Nutrition, longevity and disease: From molecular mechanisms to interventions。简单总结一下就是多吃植物类的蛋白（花生，藜麦，豆类，西兰花等），脂肪（橄榄油，坚果，牛油果等），减少精制碳水（白米饭，白面包，蛋糕，饼干等）；动物脂肪，动物蛋白质，糖这些总体来说是加速衰老的。\n‍\n# 体育锻炼 有氧锻炼对心肺功能，血管健康等方面的促进对延寿很有帮助。力量训练也能持续保持我们的肌肉，关节，韧带的力量水平，支撑保护能力等，在年纪大时减少各种跌倒或者受伤的风险。一般建议是一周 3 小时左右的有氧运动，搭配 2 到 3 次的力量训练。有氧运动一般比较简单，跑步，骑车，游泳都可以。力量训练有一定的门槛，个人也最近正在学习一些入门训练方式。\n‍\n# 药物 药物方面的研究也非常多，不过绝大多数都还在人体实验的早期\n‍\n‍\n# 细胞重编程 前面也提到了基因表达是影响衰老最重要的因素，那么有没有手段来控制人体细胞的基因表达呢？著名的山中因子（Yamanaka Factors）给出了一种可能。山中伸弥团队发现的诱导方法是，通过慢病毒载体将 Oct4、Sox2、c-Myc、Klf4 四种转录因子基因转入成体细胞，将其转化为类似于胚胎干细胞的多能干细胞（iPS 细胞）。iPS 细胞与胚胎干细胞拥有相似的再生能力，理论上可以分化为成体的所有器官、组织，而这一点完美地对冲了由细胞衰减带来的人体衰老。听起来是不是非常的神奇？基于这些新技术也出现了很多主攻长寿领域的科技创新公司，我们可以期待一下未来这些技术的普及应用。\n‍\n‍\n# 实践 这里列出一些 Sinclair 自己的实践方式，如果想要采纳还是要结合自身的情况来看。有意思的是这集节目下有个热门留言是这个教授竟然已经 52 岁了，完全看不出来……所以你懂的。\n不吃早饭，午饭也吃的比较少，酸奶或者橄榄油，晚饭吃蔬菜为主，加鱼和虾，基本不吃牛排。不吃糖，甜品，面包。基本达到了 2 小时进食窗口的高阶 fasting 状态。他偶尔也会尝试一整天都不吃东西，但比较难坚持。 每天摄入 1 克的白藜芦醇（resveratrol），1 克的 NMN（进而会转化为 NAD，which is sirtuin 的“燃料”），还有二甲双胍（metformin）。其中锻炼的日子可能会跳过一些补充品。他并不吃复合维生素。 以蔬菜为主食的好处：富含各种营养，维生素；包含异种激素（Xenohormesis），植物基于“压力”之下产生的物质，对长寿有益。后者也可以通过槲皮素（quercetin）来做膳食补充。 一般会隔一天进行有氧运动和力量训练。有氧运动能提升 NAD 水平。 根据家族病史来决定一些药物摄入，如他 29 岁就开始服用降胆固醇药物。 对于人造甜味剂，教授认为总体来说是安全的。他偶尔也会喝健怡可乐。 ‍\n对于这一系列实践，Sinclair 教授都进行了 10 多年的自身实验，并使用各种手段来监控身体数据。通过监控数据可以推测出一个人的“生理年龄”如何（不是光看脸），他自己在上述实践下，生理年龄在持续下降，现在已经达到了 30 岁左右的水平（实际年龄 52 岁）。另外，他认为每个人的身体情况不一样，医院约定俗成的生理指标范围也不一定适合每个人。未来这种健康数据的实时监控与个性化诊断会成为主流。他举了一些例子：\n监控血糖水平 HbA1c，观察 fasting 的影响等。 监控炎症指标 CRP，与心脏病等各种疾病的诱发相关。 监控 LDL，通过药物等进行控制。膳食胆固醇对血液胆固醇几乎没有影响，不需要戒红肉，黄油等。 补充铁元素可能加速衰老。医学指标需要个性化，低铁元素含量并不一定导致贫血。 还有一些影响寿命的负面因素：\n肥胖症会加速衰老。 吸烟，会破坏基因表达，加速衰老。 X 光检查同理，没有必要时，避免接触。 展望一下 longevity 研究的未来，还是挺激动人心的。现代科学每一年能让我们的平均寿命延长 1/4 年，如果每一年能让我们的平均寿命延长超过 1 年，则达到了寿命“逃逸速度” （类比以 1000 英里每小时的速度往西飞行，太阳永远不会落下），实现了“永生”。著名的未来学家 Ray Kurzweil 预测，大约 12 年后（2034 年）就能实现，让我们拭目以待。\n除了这集 podcast，也必须附上吴承霖大佬的万星项目 程序员延寿指南\n‍\n‍\n# 清晨霸主 ‍\n硬核的 HeyMatt老师一个视频放弃熬夜，做清晨的霸主（人生效率的巨变）\n‍\n# 极致利用晚上时间的错觉 ‍\n会不会有很多小伙伴会有这种情况，每天辛勤劳作后，到了11​ 点半大脑就会提示你:累了一天了，要不要放松一下呢？视频里说到，这种大脑暗示的放松大体分为三种：\n开始刷视频，打个游戏，借助浅层的刺激感来放松 点个宵夜，搞个小烧烤吃吃，借助食物换取特定心境 想一些过往能够牵动情绪的往事，沉浸在起伏连绵的情绪中 绝了，以上三种我都尝试过，全中，但是作为程序员我还会有其他的几种：\n学习知识 优化代码 加快需求进度，赶需求 我经常会有这种想法，如果晚上11​ 点半到1​ 点半我可以把这些事情做完或者做多一点，那么我的时间就会被延长 🕐。\n错，看了这个视频后我真的悟了，我花掉了N​ 个晚上的两个小时，但是换不回来人生相应的发展，甚至很多质量很差的决策、代码都是在这个时间段产出的。\n可能你确实在这晚上获得了很多愉悦感，但是这个愉悦感是没有办法持续的第二天又赖床又想逃避，你会去想我白白浪费了晚上两个小时刷剧，过了一个晚上这个愉悦感在你早上醒来的时候会忽然转化为你的焦虑感。\n确实是这样的，特别是在周末熬夜的时候，你会潜意识的特别晚睡，第二天让睡眠拉满，直接到中午才起床，但其实这样不是浪费了更多的时间吗？\n‍\n# 风险 ‍\n# 时间的消耗不可控 就拿我来举例，我前段时间老是想着公司需求怎么做，需求的方案是不是不完整，是不是有可以优化的点，要修复的Bug​ 怎么定位，怎么解决。 我不自觉的就会想，噢我晚上把它给搞定，那么第二天就可以放下心去陪家人出去走走。 可是事实呢？运气好一点或许可以在2​ 个小时解决1点​ 准时睡觉，但是运气不好时，时间会损耗越来越多，2个半​ 小时，3​ 个小时，4​ 个小时，随着时间的消逝，问题没有解决就会越发焦虑，不禁查看时间已经凌晨3-4点​ 了。 就更不用说以前大学的时候玩游戏，想着赢一局就睡觉，结果一晚上都没赢过\u0026hellip; # 精神方面的损耗 当我们消耗了晚上睡眠时间来工作、来学习、来游戏，那么代价就是你第二天会翻倍的疲惫。 你会不自觉的想要睡久一点，因为这样才能弥补你精神的损耗，久而久之你就会养成晚睡晚起的习惯，试问一下自己有多久没有在周末看过清晨的阳光了？ 再说回我，当我前一个晚上没有解决问题带着焦虑躺在床上时，我脑子会不自觉全是需求、Bug​，这真的不夸张，我真的睡着了都会梦到我在敲代码。这其实就是一种极度焦虑而缺乏休息的大脑能干出来的事情。 我第二天闹钟响了想起我还有事情没做完，就会强迫自己起床，让自己跟 “想休息的大脑” 打架，久而久之这危害可想而知。 # 健康维度的损耗 随着熬夜次数的增多，年龄的增长，很多可见或不可见的身体预警就会越来越多，具体有什么危害，去问AI​ 吧，它是懂熬夜的。\n‍\n‍\n# 怎么做 那么怎么解决这些问题呢，其实很简单，把晚上11.30​ 后熬夜的时间同等转化到早上即可，比如11.30-1.30​，那么就转化到6.30-8.30​，这时候就会有同学问了：哎呀小卢，你说的这么简单，就是起不来呀！！ 别急，我们都是程序员，最喜欢讲原理了，HeyMatt​ 老师也将原理告诉了我们。 ‍\n# 赖床原理 其实我们赖床起不来的很大一部分原因是自己想太多了。 闹钟一响，你会情不自禁去思考， “我真的要现在起床吗？” “我真的需要这一份需要早起的工作吗？” “我起床之后我需要干什么？” “这么起来会不会很累，要不还是再睡一会，反正今天不用上班？” 这时候咱们大脑就处于一种 “睡眠” 与 “清醒” 的重叠状态，就跟叠buffer​ 一样，大脑没有明确的收到指令是要起床还是继续睡。 当我们想得越多，意识就变得越模糊，但是大脑不愿意去思考，大脑无法清晰地识别并执行指令，导致我们又重新躺下了。 ‍\n# 练就早起 在一次采访中，美国作家 Jocko Willink​ 老师提出了一种早起方法：：闹钟一响，你的大脑什么都不要想，也不需要去想，更不用去思考，让大脑一片空白，你只需执行动作即可。 而这个动作其实特别简单，就是坐起来\u0026mdash;\u0026gt;站起来\u0026mdash;\u0026gt;去洗漱，什么都不用想，只用去做就好。 抱着试一试的心态，我尝试了一下这种方法，并在第二天调整了闹钟到 6:30​。第二天闹钟一响，直接走进卫生间刷个牙洗个脸，瞬间清醒了，而且我深刻的感觉到我的专注力​ 和精神力​ 有着极大的提升，大脑天然的认为现在是正常起床，你是需要去工作和学习 👍。 绝了，这个方法真的很牛*​，这种方法非常有效，让我觉得起床变得更容易了,推荐大家都去试试，你会回来点赞的。 ‍\n‍\n# 克服痛苦 是的没错，上面这种办法是会给人带来痛苦​ 的，在起床的那一瞬间你会感觉仿佛整个房间的温度都骤降​ 了下来，然后，你使劲从被窝里钻出来，脚底下着地的瞬间，你感到冰凉刺骨，就像是被一桶冰水泼醒​ 一样。你感到全身的毛孔都瞬间闭合，肌肉僵硬，瑟瑟发抖，好像一股冰冷的气流刺痛​ 着你的皮肤。 但是这种痛苦是锐减的，在三分钟之后你的痛苦指数会从100%​ 锐减到2%​。 带着这种征服痛苦的快感，会更容易进入清晨的这两小时的写作和工作中。 ‍\n‍\n# 我得到了什么 ‍\n更高效的工作时间 更清晰的思维 更多可支配的时间 更好的身体健康 ‍\n‍\n‍\n# 平静的生活不焦虑笔记 ‍\n不焦虑的生活：14 步带你回归平静 \u0026ndash; 马丁 M.安东尼\n如何克服焦虑方面给予了很好的理论依据\n‍\n# 流程 ‍\n我们要从认知疗法开始。在经过几周挑战自己想法的练习后，再引入暴露疗法。使用情境暴露法来处理你对外部物体和情境的恐惧和回避。使用认知或想象暴露来应对你对想法、想象或冲动的恐惧。采用暴露于症状来处理你对焦虑相关的身体感觉的恐惧。\n并不一定非要完全使用这三种暴露方法，这取决于你恐惧的焦点是什么。\n而且，在你将暴露引入自己的治疗后，你也应该继续使用认知方法。\n除此之外，当致力于你的暴露练习时，着手开始减少或清除安全行为也很重要\n基于放松、冥想或接纳的方法也可能整合进你的治疗中来，不管是在你已经练习过暴露，还是在治疗的早期阶段。对于大多数焦虑问题，并不一定需要基于放松、冥想和接纳的方法。单独的暴露和认知疗法就已经非常有效了\n改变生活方式应该尽可能地整合进你的治疗。如果你想让它们容易实施，治疗刚开始你就应该做。如果做出这种改变很可能是一个挑战，在治疗稍晚些时候才尝试这样做。如果你在同一时间要处理太多不同类型的问题，投入必要的时间和精力到每个问题上可能会变得困难。\n‍\n‍\n# 认知疗法 包括将不现实的、引发焦虑的想法转变为更均衡的、现实的想法\n注意力放在你的想法和感受之间的关系上。当你学会了改变自己焦虑的思维时，焦虑和恐惧的程度就会降低 无意识想法的作用 高估可能性 + 灾难化思维 高估可能性指的是夸大事件发生的可能性，而灾难化则指夸大事件的重要性 僵化的规则教条思维: “我必须在考试中拿到 A。” 负面的核心信念 引发焦虑的冲动 引发焦虑的想象 ‍\n当你能够接受自己的信念并不符合事实这样的想法时，改变焦虑的思维只需三步：\n（1）开始觉察你焦虑的信念、设想和预期。\n（2）考虑其他可替代的信念、设想和预期。\n（3）评估与焦虑的信念、设想和预期相关的证据，同时也评估你想出的其他可替代信念的证据，选择一个可以更现实地理解情境的方式。\n‍\n# 箭头向下技术 核心信念恐怕是我们最难觉察到的想法了。找出核心信念的策略之一是箭头向下技术。基本上，这项技术会不断地提出问题，以找出你引发焦虑的预期背后的深层含义\n‍\n# 想法替换 考虑对情境的其他可能解释\n‍\n# 换位思考 如果在感觉焦虑时你很难想出其他可替代的信念，你可以反问自己，某个\n没有焦虑问题的人可能会如何解释这个情景\n‍\n# 理性思考进行实验 可以回顾你过去的经历，并利用这些经历来更准确地预测未来\n我们鼓励你对自己进行反问，挑战自己焦虑的思维\n并在实践中验证\n‍\n# 去灾难化 实际上，可能发生的最糟糕的事情是什么, 我要如何应对？\n‍\n# 改变僵化的规则 僵化的规则通常难以改变，因为：\n① 很难去证实这些规则是对的还是错的；\n② 这些规则基于个人价值观，而我们并不想破坏自己的完整性，因此会抗拒改变价值观。\n‍\n# 改变核心信念 更进一步, update 自身\n‍\n‍\n# 暴露于恐惧诱发因素 包括直面恐惧情境、物体、想法、记忆、想象、感受和身体感觉,而不是回避它们\n面对恐惧罢! 治疗焦虑的专家把这部分称为暴露\n不要立即去面对你最害怕的东西，或一下子去面对所有你害怕的东西——治疗焦虑的专家把这样的做法称为满灌。虽然它可能有一定的作用，但只有在经验丰富的心理健康专业人士的帮助下才能去实施。相反，我们推荐逐级暴露\n撰写暴露计划之后逐个实行\n在开始之前，练习挑战想法的策略。当你选定并安排好了暴露任务，在开始前练习挑战引发焦虑的想法; 设定一个具体目标: 将其限定为做了, 而不是感觉到了\n请抵制对自己是否达到目标做出限定的诱惑，如使用是的，但是……的描述。焦虑的头脑想要忘记或忽略成功，关注失败。\n频繁练习, 延长练习, 最好可以预测暴露并处于掌控中\n‍\n# 清除错误安全行为 它们不会真的保护我们避免危险，它们只是让我们感觉更安全。例如不停洗手, 没用\n‍\n# 暴露于恐惧情境 包括进入恐惧情境和直面恐惧物体和活动\n‍\n（1）详细计划你如何找到并面对这个物体或情境。\n（2）练习挑战你在暴露中可能出现的想法。\n（3）设定可以测量、基于行动而非感觉的具体目标。\n（4）开始暴露。\n（5）待在暴露中直到你的焦虑重新下降。\n（6）不要使用任何安全行为或安全想法。\n（7）完成暴露。\n（8）回顾你的目标，看看焦虑的想法或预期是否成为现实。\n（9）为面对你的恐惧而奖励自己。\n‍\n# 暴露于恐惧想法、记忆、想象和冲动 包括不断地重温令你害怕的想法、想象或冲动,直到你不再害怕它们\n同上\n‍\n# 针对重复出现记忆或担忧 可以编写创伤记录, 陈述事实\n‍\n# 针对突然闯入意识的想象或冲动 他们没有可以写下来的故事，只是一个画面或冲动。这些人可以使用我们所说的“强迫想法暴露”\n你需要强迫自己出现这些你一直努力驱逐的想法。现在，你已经了解这种反直觉的行动会获得令人惊讶的成功，是因为我们大脑工作的方式。\n（1）如果我们努力去忽视或避免想法，我们的大脑会认为他们肯定是非常重要的想法，所以它会不停地让我们想起这些想法。\n（2）另一方面，如果我们一遍又一遍地想那些想法，我们的大脑就会对他们产生厌倦，就像你如果一遍又一遍地看同一集电视节目，你也会感到厌倦。\n‍\n# 暴露于恐惧感受和身体感觉 包括用于不断重新感受令你恐惧的身体感觉的练习(例如,旋转、过度换气、有氧运动)，直到你不再害怕它们\n关键是对感觉的恐惧会让这种恐惧的感觉变本加厉。\n‍\n# 基于放松、冥想和接纳的方法 包括学习放松身体肌肉、放慢呼吸和接纳焦虑感觉而不是对抗它们\n‍\n# 渐进式肌肉放松 一系列先让你把某块肌肉紧张起来，再将其放松练习\n当战斗或逃跑反应通过不随意神经系统让呼吸加速时，你可以通过调整随意神经系统重新控制你的呼吸\n‍\n‍\n# 呼吸再训练 ‍\n# 基于正念和接纳的策略 基于正念的策略通常会让人感觉非常棒，所以它们成为治疗焦虑的最常见技术并不奇怪。但是它们并不能代替想法挑战和暴露。大多数情况下，那些方法才是克服焦虑的关键。\n‍\n‍\n# 改变生活方式 ‍\n‍\n# 克服治疗障碍 找到时间, 增强动机, 应对压力, 提高技能\n‍\n# 防止焦虑再度出现 ‍\n如果你真的觉得自己已经控制了自己的焦虑问题，那么现在就是你将重新从获得成就转向维持成就的时候。\n制订一个将这些方法融入日常生活的计划。我们强烈鼓励你继续练习这些技巧\n‍\n‍\n‍\n# 政治篇 ‍\n‍\n‍\n# 中国当前各阶层分析 ‍\n知乎 风雷 ​2023 11.8\n‍\n列宁说：“所谓等及，就是这样一些集团，这些集团在历史上一定社会生产体系中所处的地位不同，对生产资料的关系（这种关系大部分是在法律上明文规定了的）不同，在社会劳动组织中所起的作用不同，因而领得自己所支配的那份社会财富的方式和多寡也不同。所谓等及，就是这样一些集团，由于它们在一定社会经济结构中所处的地位不同，其中一个集团能够占有另一个集团的劳动。”\n我国产业结构划分\n（1）第一产业占比 7.46%。\n（2）第二产业占比 38.77%，其中制造业占绝对主导地位，占比 26.77%。\n（3）第三产业占比 53.77%，其中低端服务业占比合计 17.54%，金融房地产和计算机占比合计 18.25%，教科文卫合计 9.23%，其他服务业占比 8.74%\n1978-2014 年间，我国所有私人资本家六成以上有体制背景。小的私人资本家（营业额小于 3000 万）65.98%是体制内出身，中等私人资本家（营业额 3000 万到 5 亿）70.16%是体制内出身，大的私人资本家（营业额 5 亿以上）72.27%是体制内出身。我国私人资本家和体制有着千丝万缕不可割裂的联系\n‍\n新兴小资产等及明显的两面性\n当经济高速发展的时候，他们的工作稳定、收入不断增长，他们多数人能够买车买房，能够支付子女高昂的补习费用。虽然也受到资产等纟及领导的压迫，虽然他们赚的钱不过是脑满肠肥的资产等及餐桌上剩下的几碟小菜，但是他们也知足了。\n一旦经济下滑，他们的地位就出现了剧烈动荡，一部分人被开除了，一部分人面临开除的危险。离职的人被高昂的房贷和子女的补习费用压得喘不过气，在职的人更加小心翼翼，以免下一个被干掉的就是自己。\n他们的怨言越来越多了，以前他们感恩时代，他们愿意宽恕高速发展下时代的瑕疵。现在高速发展没有了，时代的每一个瑕疵都被他们放在显微镜下观察，并且试图在每一个偶发的错误后面寻找体制的必然性。但是，他们仍然是保守的，他们力量分散，他们甚至不敢组织起来去和公司抗争。当他们被欠薪的时候，他们首先想到的是找律师，而不是团结起来向公司施加压力。\n‍\n个体工商户的困难\n劳科院曾在全国发放并回收 27,112 份问卷，并对部分个体户开展调研，最终得出结论认为“个体工商户实现增收存在多方面困难”。\n首先，个体户大量集中在低端服务业，同质化竞争非常严重\n其次，地产资本盘剥严重。“相关数据显示，小食杂店的房租和水电费占总成本 50%左右，较大的餐饮店房租和水电费占总成本 15%到 20%左右，理发、服装、小百货等行业房租、水电成本也占到总成本的 30%左右”\n再次，个体户往往受到垄断平台的盘剥。\n‍\n在这样的大背景下，个体工商户常常靠“自我剥削”式的超长时间工作，维持比打工略高的收入。\n他们起早贪黑，甚至全年无休。一个餐饮铺子，如果早上 7 点开店，四五点就要起床准备，7-9 点是最忙的时候，接待完顾客后就要准备中午的，11-13 点又是异常忙碌的时候，14 点后稍事休息，又要开始准备晚上的，5-8 点再次忙碌，随后接些零零散散的顾客，10 点能关门休息就算不错了。有效工作时间一般都在 14 个小时以上，很多甚至会超过 16 个小时。即便这样，多数个体户的收入仍然很低。\n‍\n按劳科院数据，调查户中 92.44%的个体户，月利润不足一万；63.48%的个体户，月利润不足 2500 元。这些人是小资产等纟及的下层，他们虽然幻想着发家致富，但是在竞争异常激烈的低端服务业中，他们没有任何核心竞争力，也没有任何抗风险的能力，外部环境的任何变化都可能对他们造成毁灭性的打击。如果留心自己家旁边的小店，你会发现很多店铺一年不到就会挂牌转租。\n小资产等纟及下层和无产等纟及没有稳定的界限，今天你可能还在做小生意，明天就破产进厂打工了。一些攒了点钱的打工人，也可能一时冲动就盘个店面做起了小生意。小资产等纟及的下层，在意识形态上和无产等纟及也比较接近，他们见过斗争，他们也敢于斗争。在未来不可避免的变革中，无产等纟及要大力争取他们，让他们站在自己这一边。\n无产者分类\n‍\n（一）体力无产者 由第三产业的服务业工人和第二产业的产业工人构成。\n‍\n第一类工厂中的产业工人 - 血汗工厂\n这类厂多是中小型资本，没有技术门槛，主要分布在完全竞争行业。内资、港澳台资本多属于此类厂，他们是典型的血汗工厂，他们不仅在法律许可的范围内获取剩余价值，他们还会突破法律底线获取剩余价值。\n‍\n特点\n实行 6 天 12 小时工作制。他们给到工人的基本工资就是我国制定的各地最低工资，这个工资根本无法完成劳动力再生产，为了养家糊口工人被逼不得不自愿加班。\n以珠三角某些城市为例，最低工资标准大致在 2000 左右。2000 块根本不够养家糊口，怎么办？加班赚加班费。于是出现一个奇怪的现象，工人拼命追求加班。一个能提供稳定加班的厂，才是工人眼中的好厂。沿海工厂多数是两班倒，早八点对晚八点，一周最多休息一天。按这样的工时制度，工人平时加班 3 小时（12 小时扣除 1 小时休息时间），周末加班 11 小时，一个月大致能拿 4000 出头，扣除社保也就不到 4000 元。4000 元也就能够工人生活，余下点钱存起来，以后供小孩读书，供老人看病。\n为了拿到这 4000 块钱，工人每天要在极端枯燥的环境中工作 12 小时，一个月加班时间超过 110 个小时。长三角很多地方的工资制度形式上与此不同（小时工/返费），但本质并无差别，即压低工人的基本工资，迫使工人自愿加班，以延长劳动时间，加大剥削程度。\n基本不按法律足额缴纳社保和公积金。\n按法律规定，社保公积金的基数应该是上一年度工人 12 个月的平均工资，也就是说应该算上加班费。但是这类厂要么不给工人上社保（哄骗工人签署《自愿放弃社保承诺书》），要么只给工人按最低工资缴纳社保。\n至于住房公积金，这类厂能不缴纳就不缴纳\n再次，这类厂在诸多事项上明显违法，并通过违法的方式占有工人的剩余价值。\n不会有法定产假\n打卡数次\n义务加班。早上提前 15 分钟开早会，晚上延迟 15 分钟下班，每天有三十分钟的加班不支付加班费。按每小时 10 元计算，三十分钟加班费是 7.5 元，1000 个操作工就是 7500 元。一天少给 7500 元，一个月少给 20 万左右，一年下来就是 240 万。这些钱都成了资本的利润。这类厂往往会压工资，这个月入职，往往要下个月中下旬才能发这个月的工资。如果自离就不发压的工资。很多厂不批准工人离职，通过各种方式逼迫要离职的工人“自离”，扣罚工人被压的工资。\n管理往往非常粗暴，厂方用这种高压模式维持生产秩序\n‍\n总体而言，第一类厂具有很多早期资本主义工厂的特点，通过尽可能延长工作时间的方式，加大剥削程度，通过罚款等方式在建立工厂秩序的同时，进一步占有劳动者的剩余价值。《劳动法》在这类厂形同虚设。内资和港澳台资本绝大多数都是这类厂，他们合计雇佣制造业工人 82.27%，也就是说，工人中的绝大部分集中在这类工厂。这类工厂工人流动性很大，普工往往一年能换个遍。矛盾也很尖锐，日常的冲突、突发的斗争，屡见不鲜。\n从中长期看，这类工厂的斗争有两个可能的方向：第一，增加底薪，减少加班时间。第二，落实《劳动法》的各项规定，比如按法律规定缴纳社保和公积金。\n‍\n‍\n第二类厂中的产业工人 - 垄断资本\n这类工厂是垄断资本控制的工厂，资本体量大，具有一定的技术门槛，能够获取较高的收益，因此有能力提供更好的待遇。欧美日资本控制的厂，多是这种厂，部分国有企业也是这类厂。并不是说有了更高的收益，资方就会自愿提供更好的待遇。\n‍\n特点\n基本工资明显高于当地最低工资\n以汽配厂为例，欧美日汽配厂的工人五天八小时工资往往就能达到 5000 元，甚至更高。该类厂一般设置有工龄工资，即使入厂时基本工资不高，积累年资几年下来，基本工资一般也能在 3-4 千之间。该类厂的工人无需靠无休止的加班，就能完成劳动力再生产。因此他们有更多时间进行社交活动，并沉淀社会关系。\n定会缴纳社保，多数也会缴纳公积金，并且很多厂会按法律标准缴纳，而不是按底薪缴纳\n按法律规定给予员工法定福利\n即使是这类厂，也会有违法事项。比如，不按法律支付高温补贴，或者不按法律支付夜班津贴，等等。但是总体而言，违法行为比第一类厂少得多。\n管理一般相对人性化，基层管理骂人的较少，厂方还会设置各种娱乐机构组织工人活动，试图营造一种大家庭的氛围，来缓和等及对立\n‍\n总体而言，第二类厂已经脱离了早期资本主义的暴力和野蛮，他们尽可能把剥削的面貌掩盖在温和的管理之下。这类厂的流动性较小，很多工人工龄都在十年以上，老工人有自己的社会圈子，对工厂的方方面面都很熟悉\n这类厂日常的矛盾不如第一类厂突出，他们往往会比较珍惜自己的工作，在当前的情况下轻易不出手。然而，一旦利益足够大，涉及面足够广，他们照样会团结起来争取。由于他们都是相交多年的工人，相互之间有信任，对厂里又熟悉，因此他们斗争的灵活性和韧性，比第一类厂更强。比如，这类厂的搬厂斗争，往往能持续数十天之久。\n中长期看，由于流动性小，这类厂的工人能够沉淀出自己的社会关系，并逐步形成自发的经济斗争的团体。\n‍\n‍\n（二）脑力无产者 由办事人员、普通专业技术人员和新兴服务业人员（金融信息房地产和商业）构成\n‍\n1、办事人员\n体制内的办事人员，即非领导岗位的各级公务人员，这部分人员不在本文叙述范围(我不好说)\n‍\n体制外办事人员，如企业单位行政人员、打字员、电信营业员、电话客服等等\n办事人员（第二类）不占有任何生产资料，通过出卖自己的劳动力获取工资，完成劳动力再生产，他们是典型的脑力无产等及\n他们主要在写字楼的办公室里工作，拿一台电脑就是劳动工具，平时写写文件，递材料。他们也有加班的时候，可能加班时长和厂里的体力无产者有的一比，乃至更久。办事人员的工资收入并不高，部分办事人员的工资收入比产业工人还低。\n办事人员（第二类）可分成两大群体，第一种是工厂中的办事员，第二种是公司中的办事员。\n以工厂办事员为例，分两种，一种是跟线文员，这类文员和普工没有区别; 另一种是我们这里讲的办事员，如行政人员、业务跟单人员。\n第一类厂（内资港澳台）文员工资在 4-5 千，和普工的综合工资差不多。\n第二类厂（欧美日等）文员工资在 6-8 千，高于多数普工。工厂文员加班较少，工作环境相对较好，厂方用各种方式把他们和普工区别开，比如管文员的叫做职员，普工叫做工人，再比如给文员和普工挂不同颜色的工牌等等。文员在日常工作中和普工接触不多，在当前的斗争中也不如普工勇敢、团结，但是从长远看，文员和普工的利益是一致的，在未来的变革中，他们势必走到一起。\n‍\n2、普通专业技术人员和新兴服务业人员（金融信息房地产和商业）\n普通专业技术人员 6683 万，主要集中在教育、医疗、经济、工程领域，如中小学老师、医院一般医生或者护士、非资深会计师、一般工程师或者技术员，等等。新兴服务业人员 2346 万，主要集中在金融、信息、房地产和商业领域。\n‍\n这类人员不掌握生产资料，受雇于资本，靠出卖劳动力谋生，是典型的脑力无产者。这类脑力无产者工资多数比普工高，但是自身的开销也比普工大。\n一线城市该类脑力无产者税后工资基本都在万元以上，但是单单房租就需要花掉三四千（这还只能在远离中心区域的地方租个单间）\n脑力无产者工作时间非常长\n很多公司执行 996 工作制，如果算上通勤时间，好些脑力无产者需要在早上八点前出发，晚上十点后才能到家。 996 就算福报了, 更多外包和小厂巴不得 007. 965 还算正常点\n绝大多数脑力无产者加班没有加班费。\n职场中的脑力无产者有相当部分已经买房，他们被房产所束缚，每月要还固定的房贷，他们中部分人的小孩已经上学，为了让小孩能够考上好大学（不然就会阶层跌落），他们还要支付高昂的补习费，这些都构成了他们劳动力再生产的必要费用。他们害怕丢失工作，被迫接受资本家开出的一切劳动条件。\n互联网行业尤其严重，近几年互联网从业人员过劳死的新闻屡见不鲜。95 后的脑力劳动者反抗意识更强一些，因为他们还没有被房贷、车贷以及小孩高昂的补课费束缚。\n‍\n‍\n按买房的时间点，可以把这类脑力无产者分成两个部分。买房买得早的脑力无产者，他们的压力相对较小，对社会的抱怨也比较少，他们的意识更接近新兴小资产等纟及，明显更为保守。买房买得晚或者尚未买房的脑力无产者，他们的压力相对较大，他们对社会的抱怨更多，斗争性更强，他们的意识更接近无产等及。\n‍\n目前脑力无产者的斗争分成两类：\n一类是公司职员的个人抗争，以法律的途径索要加班费、离职补偿等等。\n二类主要集中在部分城市中小学教师中，由于经济下滑等各种原因，部分城市中小学教师薪资待遇急速下降，有些城市承诺的事项不履行。受影响的教师团结起来，用各种方式争取自身的权益。\n‍\nSK\n按照这一分类, 我们是属于纯纯农民工这一阶段的(脑力无产者), 我们要(*Filter)\n(*Filter)\n‍\n# 娱乐篇 ‍\n‍\n# 老式社区的去向 ‍\n今年五月份，天涯社区关闭以后，还有人直播众筹，希望募集 300 万元让它复活，结果根本筹不到钱。\n其实，就算筹到了，天涯也回不来，依赖少数核心用户的“专家社区”是救不活的，注定要衰亡。\n我今天写这个话题，就是想告诉大家，最好不要做社区，包括论坛、粉丝群、问答网站等等，这些都不要做。它们的模式有先天不足。\n这几年，一直有网友来问，周刊有没有读者群。我总是回答没有，原因就在这里。如果没有办法持续投入，最终都会变成闲聊群，那还不如不搞。\n网络社区想要成功，只有一种可能，那就是一直有源源不断的新成员加入，愿意留下来，顶替老成员的角色。这种人员更新的自动机制，除了高校 BBS，真是太难做到了。\n‍\n‍\n# V+圈子 ‍\n雨狸退了，今年 1 月看得出差不多已经到界限了。哪怕是这样的人，写出来的作品却如此打动人心。\n确实，我需要做的就是保持这样的距离。之前太远了又太近了。\n还剩下的，18 年的面孔还有几个呢。最后把他们用小号关注了吧。\n但是其实我不喜欢再关注了. 因为这些音乐人总是在分享自己的生活, 我暂时不想让个人的推送被这类信息占满. 因此先靠着周刊度过一段时间罢.\n‍\n‍\n# 2003-2021 的 ACG 历史 11.19\nACG 观察\n‍\n从 17 年开始，却已经感受到了比较深的“漫展低龄化”。看到了很多初中甚至小学的小妹妹。并且主办方也看到了各种商机，相对前几年为爱发电的环境，有了更多铜臭味。\n同年感觉熊猫微视也开始火了起来～\n一个节点是 2017 年 12 月。光这一个月的漫展（算上线下聚会的话），按自己计算就一共有 12 个。\n或许有些人觉得不太是初心了，又或许觉得大了还喜欢那些有点丢人，再或者有了其他兴趣爱好，并且会转变~特别 coser 的话，感觉大多人也都会一段时间后退圈。\ncosplay 的话，最开始日漫是最流行的，后来的话国漫和古风也开始发力。差不多也是 17 年开始吧，感觉很多人开始喜欢古风。也开始比较流行嘉宾签售，也是更多人可以作为职业 coser，以及漫展主办方恰钱有利可图的证明吧。\n‍\n“古拉狗事件”（指一群素质极低的人入驻贴吧捣乱，和目前孙笑川吧部分人类似）之后，玩儿贴吧的也变少了。与此同时，感觉 coser 也变了～大家更倾向于只收拍的很好看的返图，而不收比如手机那种返图或者拍的不好看的了。最早大家是哪怕拍的不好，也都收还很感谢那样的～同期在喵特上返图的人变多了。一段时间内，喵特成为了最多人用的二次元漫展交流软件。\n不过二次元确实一般还是玩儿 qq，只是 20 年以后自己空间没啥人点赞了～\n‍\n差不多 19 年开始，上海陪玩俱乐部模式开始流行，加上陪玩业和直播业影响。女仆店开始“陪玩化”，基本上都是二次元陪玩不收费的被淘汰，走向助教的模式了。\n‍\n2020 也是一个新的节点。在同年开始，成都开的所有新开的女仆店都是陪玩收费的制度了，并且大多会被命名为“助教”。自己其实很长一段时间不太能够适应，感觉找不到最初的感觉了。不过还是作为“探险家”进行着记录。\n感觉除了直播（漫展直播）以外，感觉拍短视频的人也开始变多。去漫展的人，相对而言也有一些鱼龙混杂了。当然也有真心喜欢二次元，喜欢动漫的。但想恰钱的人也在变多。当然其它行业而言，也都是这样吧。似乎一定会被商业化和资本注入。\n‍\n2021 年也毕业工作了嘛，于是我想，究竟有没有可能，把喜欢变成职业呢。就像“请问您今天要来点兔子吗”或者“会长是女仆大人”那样，亦或者是自己走访的日本宫崎那家童话物语那样。有所保留本质的同时，也能顺应时代。\n作为遵守本心的人，似乎不适合和任何人做生意。我，也没什么大的本事。还不如就偶尔去玩，接受一下采访，或者写写文章什么的。\n比较遗憾的是，熊猫微视消失了～二次元媒体只余 co 视一家。\n‍\n2022 同年下半年开始，“cos 委托”开始冒头。最早能搜到相关词条，大概是在 2021 年。但可能 2022 年下半年开始，才开始被更多广为人知。\n‍\n2023 半次元停止运营了，喵特没什么人用了，只有 b 站周边购一个票务选择了。\n虽是不错，可是不知道大家有没有发现，现在的主题餐厅，主题咖啡厅，和最早是完全两个概念了！现在有的是资本的注入，比较像日本那样，却少了很多人情味。而最早，是为爱发电的人还原，实现自己的想法而开的。在资本之下，为爱发电的人越来越少了，也不得不面对现实 可能是大的趋向吧。。。\n‍\n然后，我其实想说一个，很少有人提过的话题。\n我也不把话说的很明确。可不知晓大家是否清楚，在外网其实有人会找一片栖息地，说着很少能去表达，被接受的一些事。日本人也是如此，推特上大号说官方话，玩游戏单独会开号，小号才是畅所欲言。\n也很少有人能够共感像是抑郁症或者自己伤害自己的人吧。更多的是指责或排挤。\n“非要刀子插在身上才会感到疼吗，说着风凉话把麻木当成熟的人渣 ”\n有时候，只要将个人行为上升到和爱国绑在一起，无论是人身攻击，欺软怕硬还是寻衅滋事还是什么都“自有道理”。不了解事情全貌的情况下，至高点目光或者人云亦云的变相加害倾向。而受害者被伤害后摇身一变，有时却又成了加害者。\n还是幻想的精神世界比较美好。\n‍\n“现实和幻想”\n当然委托也不只是恋爱，有时候可能只是人需要陪伴叭，我就是很孤单的人。\n\u0026ndash;越是浪漫越容易对现实失望。“戒断反应”，悲伤心绪。 确实自己也是寄托于虚拟的人。\n在虚拟与现实的切换中，也像这个时代的“包法利夫人综合征”。\n‍\nSK\n评价是, 看了这些之后还是感觉没有实感, 唯一的记忆就是小学 3 年级开始的冲浪生活, 偶尔在 4399 和 7K7K 之外瞥见的网页. 可惜啊, 当时如果能多一点探索之心, 也许我就能更快开始我们的道路了\n但是, 2017 以来的故事对于我而言太在意了, 我沉浸在自己的小圈子里, 完全不知道外面的事情呢. 直到 2020 我才开始正式的探索, 在 2022 达到结尾. 2023-2024 我看来是收缩期, 需要建立自己的知识体系以及长久的兴趣领域啊.\n‍\n‍\n# 剖析\u0026quot;男娘文化\u0026quot; 男娘文化的盛行是什么的结果\n‍\n因果倒置； 男娘热度是严重性焦虑的结果而不是原因； 与之对应的还有青年女性流行的赛博女同文化；\n两者本质上都是一样的。\n赛里斯本来就是一个观念保守的半现代化区域，在经济增速神话破灭，意识形态右转之后更是雪上加霜。\n中国男女矛盾、男性性焦虑的一个重要原因是社交隔离，互相陌生；\n好吧，你们既然都体面不想说，那就让我来挑明吧： 男娘文化说白了就是 “我想要一个可以满足性需求的同性角色，因为我不会和异性交往”；\n同样的道理，很多男娘幻想都是在兄弟和群友身上的，因为你只有在和他们交往的时候才感到放松和愉悦，真正的异性只会让你感到压力和拘束。\n根本原因在于，大量的中国青少年在成长过程中，过的其实是一种半禁欲的修道士生活。\n整个社会从家长到学校，都对青少年的男女关系严防死守。\n在两性特征发育，本该形成两性观念的年纪，世界的另一半（异性）却成了熟悉的陌生人。\n无法否认的是，男女在认知世界的过程中确实存在差异，在大幅度减少两者交流之后，这种差异无疑越来越大。\n所以你在中国社会经常会见到一种吊诡的情况，青少年娃娃从初中开始就被告知要严防早恋，到了大学才算摸索进入恋爱的新手村，参加工作后却又恨不得被要求马上结婚。\n同样的，这种性压抑给中国二次元文化提供了旺盛的土壤，中国青少年是天然的二次元文化的受众，尤其是那群最为压抑的男性理工科群体。\n二次元文化说白了是就是一种性焦虑的补偿，但这种“精神自慰品”塑造出的完美男友、女友形象，实际上加重了两性之间的误解。\n假如我们做一个定性分析，把下降的结婚率和生育率作为两性关系的一种反映，将男女矛盾和文化形象作为另一个变量；我们就会发现，随着两性关系的恶化，男女矛盾在加重，而男女文化形象也变得失真，而男娘文化，就是这种失真的产物。\n‍\nSK\n对于这个话题, 呃(*Filter)\n‍\n‍\n# 幸存者偏差 of 社交平台 ‍\n论应届生工资多少?\n\u0026ndash;这种问题你得倒着看。特别是无赞那些，才是人在农村，刚下拖拉机\n\u0026ndash;你这个怎么说呢，就是典型的幸存者效应，你有没有想过，只有月薪两万的才发文章呢\n牛客只有大佬, 鼠鼠只能去贴吧\n‍\nSK\n是啊, 像我这样完全没有能拿的出手的家伙, 简历甚至自己都看不下去了, 害得来这里准备知识仓库和填充内容来充实简历啊.\n但是, 贴吧也找不到几个像样的家伙啊\u0026hellip;到底要去那里呢? 哦, 还有招聘平台!\n‍\n# 文化篇 ‍\n‍\n‍\n# 北大的记忆 - 全文抄录 北大往事\n‍\n如果你问一个孩子高中是怎样过的，八成会得到比较类似的结果，老老实实学习，刷题，高考，搏一个好大学。如果你问一个孩子大学是怎么度过的，八成会得到一个五花八门的答案。大多数人都会逃课，但自己努力选到的课恐怕不舍得逃。有人拼 GPA，有人拼实习；有人找导师，有人谈朋友；有人泡自习室，有人泡图书馆，更多泡网吧和宿舍。每个人刚来到大学，都像是从高考这个巨大的国家机器中生产的规范品，而突然发现，大学并不是要继续修剪你，反而给了无限的自由，于是一个个像野草一样疯长，各自长成自己想象中的样子。\n我是通过 99 年高中物理竞赛保送进入了北大。竞赛的过程付出了我极大的心力，可是毕竟不需要对目标迷茫，不问为什么学只问怎么学好，这是我们孩子最熟悉的方法。于是一路竟然得到全国一等奖。只是在竞赛闭幕式上，各个大学来宣传招生的时候，才发现虽然手里有无数的选择权，却不知道选什么了。清华大学是倒数第二个上台的，强力介绍了自己的工科尤其是电子工程，北大最后上台，推荐了自己的物理专业。我身边的高中物理老师问我想去哪里，我确实是完全没有头绪，只因为北大是最后一个介绍者，于是顺嘴说了北大物理，老师一副了然理解的样子，说对，我觉得你就适合北大物理，于是我也就觉得自己果然合适，这么大的事，就这么两句话随便决定下来了。\n‍\n# 栖所 北大的本科生住宿是出名的艰苦，记得刚入校某一次讲话中，一位系里的领导有点得意的讲，我们的人均宿舍面积是全北京市大学里面倒数的，但是相信大家来也不是为了优秀的住宿环境。我们的宿舍是老楼，紧挨着南边的海淀路，从南门进入大学校园，左转走不远就到。楼体清灰斑驳，依稀记得长有些北方常见的爬墙虎。内部没什么光洁的瓷砖，全是清素的水泥，走廊里永远昏暗，头顶上永远挂满了洗过的衣服，把暗淡的灯光挡住八成。走廊尽头是一间洗漱间和一间公共厕所。洗漱间就一个大水泥台子，两排水龙头，卫生间就一排蹲坑. 每天 11 点熄灯后，这里是最热闹的地方，聚满了洗漱聊天和学习背单词的人。走廊两侧是各个宿舍小房间，十平米不到的长方形盒子，塞进来六张床，六付桌椅家具，如果人都在屋里，那确实是满满当当，进出都要腾挪。衣柜这种奢侈品是没有的，每个人都在床下塞一个大箱子，里面叠好自己的所有家当。\n刚来到宿舍，什么生活必须品都不全，少不了去学校商店里买齐。路过最大的学一食堂不远，就是一个校办商店，依旧像九十年代百货商场的样子，柜员阿姨带着围袖站在玻璃柜台后面。\n东西买好，大概问清了食堂和教室的方向，这才算心中惴惴的安顿下来。\n刚刚接触宿舍生活无疑是拘谨的。这是第一次毫无私人空间的和几个陌生人被塞在一起同吃同住，好像雏鸟从熟悉的巢里被拿出来，扔到另一个陌生的巢中。当然，大家都是同龄人，虽然兴趣各异，但大致都是活泼健康的，不管有没有选择，大家都走入了彼此的世界，不管喜不喜欢，都要接受彼此不同的交往方式。在接受无数新信息之外，我们还要经历一次最深刻的社会化经历：随时活在别人的视线中。这是很痛苦的，久而久之，大家都用帘子把自己的床围起来，退守在自己最后的角落里。床上桌，床上灯，床上风扇，慢慢变成标配，大家形成一种共识，如果想说话，那么坐在座位上，比如吃饭的时候一起看看电影，说说笑笑，如果不想被打扰，就盘坐回床上，这就从社交中暂时退场。\n夏天的夜里是最难熬的，没有电，自己的小风扇也没用了，每天半夜都在汗水里被泡醒，然后到卫生间冲一个凉水澡，也许能睡半个小时，之后再醒，循环往复。\n好在到后两年，很多不堪忍受又家境殷实的同学会到外面去租房子，一般宿舍就住不满了，剩下的人可以多喘口气。\n我没什么清理衣物的能力，就索性以泡代洗。姑姑每次来都把我一大盆泡着的衣服彻底漂洗一遍，水一桶桶从灰变清，我就又能干净一个月。后来有几次我有事进了女生楼，发现整个楼都是香的，也许是洗衣粉或者化妆品的味道，从走廊到室内，芬芳一路。我们系传说有一个精神不大正常的男生，有一次穿着内裤走进了女生宿舍，被保安拦住。老师找他谈话，痛心疾首的说，你怎么能穿内裤进女生宿舍呢？他一瞪眼说，那不能穿呐？此处带东北口音。我听完一笑之后，也怀疑他是被香气勾引进去的吧。\n姑姑在北京教课，全家早就安在这里。2000 年在望京分了房子，那时候望京还是一片荒地，交通不便，我从宿舍来一次要两个多小时，但是她会给我腾一个安静的小房间，做几顿爽口的饭菜，我很感念姑姑对我的照顾，更重要的是，她仿佛和我是同一个时代的人，聊聊感情和生活，亲近的很。\n大部分课在理科教学楼上，那里相对较新，也有空调，但是晚上很早就会赶人。图书馆很有名，可惜我并没有学会怎么使用它：每次从书架上随机抽几本有缘份的朋友，似乎没什么效率，而那个复杂的检索系统，又不是我这个小镇做题家所掌握的。有时候老师推荐几本书，但总是被借光的。如果你去上自习，就永远找不到空位，永远有一杯水，一堆书或者一个睡觉的大哥在占位。到最后，图书馆变成一个为去而去的地方，类似现在的打卡，形式大于内容。至于为什么去，我不知道，我也不知道那睡觉的大哥知不知道。\n我经常去的地方是三教，老旧，自由，每天后半夜三四点钟才赶人。虽然没空调，没干净的厕所，但是每天坐在一群全国最聪明的脑袋中间冥思苦想，每一颗脑袋都仿佛冒出热气来，这种感觉很有活力。老木头桌面上刻满了乱七八糟的留言，学习的，爱情的，性的，诅咒发誓的，厕所的木头门上所刻的则更漏骨。晚上大部分教室在自习，有时候会突然进来一个人在黑板上写，几点到几点有某某讲座，大部分人于是起来咒骂着收拾书包。有时候我懒得挪屁股，就索性坐着听讲座。就这样听到了雷军讲什么是财富自由，也听到了俞敏洪讲被打劫和刷电线杆的经历。每当后半夜从三教里疲惫的走出来，漫天繁星，万籁俱寂，心中就又有些得意，不是因为真的多爱学习，而是学习实在是不多的和过去相似的又能延续到大学的活动之一，在三教熬夜让我好像摸到了过去的熟悉。更何况回到宿舍也会看到几个人就着走廊的破灯在读书。\n‍\n# 有情 不问理由，没有原因，从生活了十几年的城市和学校被彻底的移栽到一个陌生的环境，虽然号称是中国最好的大学，可是心里的一面却总是喊着我要回去。但凡与过去的联系，同学们书信，家乡的消息，过去的习题集，熟悉的音乐，总是存放在心里宝贵柔软的一面，总觉的有一日回去了，这些东西照旧打开，生活就会恢复成以前的样子。然而毕竟逝去了。\n大学的第一个学期，总是和高中同学有打不完的电话。长途电话要从一张卡拨到另一张卡，一张市内，一张转长途，加起来好像也要几毛钱一分钟，并不便宜，两张卡打两次也就消耗了，可是楼下小广场的一排黄色电话厅却往往都是满员，那是挤不上屋里电话或者想说些亲密的话的人。每天晚上熄灯前后，走廊里几乎挤满了煲电话粥的人。各种方言，声调，此起彼伏，往往一直喧嚣到午夜。有爱情的恣意炫耀爱情，没爱情的努力挖掘友情，最不济的也有亲情。我们一屋子都没出息，没有明面上的女朋友，但是有一个同学每次跟家里打电话都温言温语，甜甜蜜蜜，跟老爸的聊天聊的好像在初恋，我们觉得好玩，但现在想想却也难得。\n大部分人就算没有女朋友，高中也总有个暧昧的对象，距离之下，过去的种种都变作求不得的好，于是生出那么多“假如当初”的情愫和想象。再加上平时男生之间的八卦和吹牛，于是有意无意把故事往做实里说，蒙上一层原来如此的物哀。如果还没有电话联系，那么可以写信啊，小小一张纸大可缓缓经营，把那说过的和想说却没说过的缓缓道来，每天路过门房，看一眼信件成了心里最大的安慰。若是收到了期望中的回信就面露暖流，中午吃饭都会因看信更香些。有些信，写着写着变成电话，有些电话变成电话煲，有些联系建了又断， 年复一年，这些终归变成想要回到过去的枉然，慢慢的遗忘了。\n可是那时候还没有遗忘。第一个寒假，学校统计回家的人数，给学生准备了车票。虽然是绿皮车，但是毕竟在一票难求的春节，我坐了九个小时回到济南，又折腾了一两个小时公交，狼狈的回到家，终于喘了口气。接着就是马不停蹄的见面，安排，半年不见的同学仿佛只是放了一个大假，这才是真正的同学。这里有死党，玩伴，暧昧的对象，这里大家都那么合拍，又不会近的需要忍受彼此的鼾声。\n在几乎天天满满的安排和掰着指头过日子恋恋不舍中，大家终归还是要回去。可是回去做什么呢。对于我这样的小镇做题家来说，应该就是自己最熟悉的，学习了吧。\n‍\n# 学业 其实我不觉得对于为什么要学习，我们的学校教育给出过一个答案。高中大家都有一个目标，只是为什么要冲那道独木桥，没人认真想过。大学突然变成了许许多多个目标，寻找目标本身成为了最大的目标，但讽刺的是，这最需要教导的一步，我们是盲目的，教育是缺席的。大学招生的老师，还有几位代课老师，跟我们说起出路，都很实际：物理系三分之一的人出国，三分之一的人读研，还有三分之一就业。好像从高考这个大机器出来，我的未来就是分成三个小机器，分别制造着不同的结果，可是这不是我想要的答案，为什么出国？出去干什么？为什么读研？读什么？我真有这么喜欢某件事以至于如此笃定的贡献一生吗？还是又作为下一个阶段的敲门砖？只是人生中的下一个转折之前的关口？没人告诉我答案，我也一时想不明白。就算你问一个笃定要出国的同学，他的答案恐怕也不同，我知道一个同学的目标是到华尔街靠心算当交易员。还有个同学来的第一天目标就是去清华学建筑。他去清华找老师咨询的结果就是清华建筑系有史以来没有外专业的人考上，然而他竟四年后做了第一个从物理系考入清华建筑的人。我还听说以前有个人致力于交谊舞，毕业以后全职去搞这个了。我羡慕这些人的笃定，就像我说的，只要找到个方向，这些聪明人总能折腾点什么出来，但难的是那个方向。\n老师们说，前两年抓好绩点总是没有错的，如果要出国必须 GPA3.5 以上。于是所有主课成绩 90 以上成为或多或少每个人的目标。所谓的学霸或学渣，也靠绩点区别。\n说起来这好像不过是高中刷题套路的延续，但实际上完全不是这样。大学一个学年的一门课里面就也许压缩进了不少于高中三年的内容量，在高中可以慢慢揉碎了再搭建起来的知识体系，在大学短短一年中根本来不及理解深入，只能囫囵吞枣。像四大力学，每一个都需要用新的数学工具去阐述新的理论图景，理想中的情况是，既有物理直观想象，又有熟练的数学解析，现实的情况是，数学工具不熟，（那是另一门主课），物理公式看个含糊，图景更谈不上。学习陷入一种鹦鹉学舌式的碎片化刷题。大一一年，我在入门的尝试中碰的鼻青脸肿，绩点也不过在二三十名，大二一年，我索性放弃建立全面理解的企图，就安心考试，不求甚解，反而刷到年级第七，连班主任都给家里手写一封祝贺信，只是我心里没有一点欣喜，因为我知道我只是学到了一点考试窍门，真才实学一点都没得到。\n还要吐槽一下我们的教材，那就是不会好好说话，没打谱让人读懂。如果是翻译的，又要加一层语言障碍。汉语之与学术，本就缺乏精确直接的表达，又多一层名词对照的障碍，且极看翻译者的水平。多年后，我用上了油管，又七七八八爬过语言关，才发现其实本不应该这样辛苦，有些道理可以讲的很清楚且优美，可惜，二十年前的我不懂这些。\n按理说，北大是全国最好的大学，这里的物理系应该提供最优质的教育给最聪明的人才，让更多年轻人学的更轻松，更享受。遗憾的是，我没有从它的教育设计中感受到这一点。在入门的时候，我们大多数人的数学基础，英语基础和计算机能力都太差了，高等数学并没有成为习惯工具，而是停留在一种反直觉的存在阶段，这让很多物理的课程束手束脚。英语的高考应试水平对于支持大学学习完全不够用，任何一篇原版教程都几乎无力自学，更不要说看论文。计算机课程又设计的太基础晦涩，它应该完成的使命是建一个房子，我们课程教的是烧砖，而我们只会用它看电影和打游戏。\n这就是小镇孩子走到北大物理系真正的无奈，虽然闯过了千军万马的独木桥，却发现之后这些本事变成了屠龙技，而真正欠缺的，那些别人也许早就习惯的工具，数学，英语，计算机，却像一张白纸，没人教，没机会学，真到用时，也不会有人等你。\n很多人继续慢慢走下来，也许五年十年之后，读了研读了博，这些终归都不再是问题，但是也有人就慢慢换了心，外面的花花世界不等人，为什么不去做点更好玩的？我最羡慕的还是那些天纵英才，他们的基础好到你拼命苦学，也不过是到他们开始前的水平，而他们开始努力的时候，你坐在他们旁边几乎能感觉到静电刺激皮肤。那些工具的障碍，数学，英语，计算机，早在他们之前的阅历中就被不自觉地征服了，又或者智力太出色，被强行征服了。我们一个年级一百多人，可以说汇聚了当年最优秀的全国人才，给我这种感觉的，也不过一二人。他们让人绝望，觉得这条路走下去真的有意义吗？他们才是学术真正需要的人才吧，我再努力也只能沦为分母之一了吧。然而又不甘心，难道教育和学校本身不能做到更好一些吗？难道不可以让更多平庸的学生享受到科学开悟的美感？难道就不能少一点人变成时代车轮的润滑剂，多一点人保持做当年那个看星星的孩子？毕竟，我也是当年那个看向星空的孩子。毕竟，多年以后回过头来看，不是只有智商 160 才能取得成就，很多普通的聪明人持之以恒也可以有大成。\n如果有万一的可能，高中到大学之间的课程可以更合理的设计，帮更多孩子走进屋里去，有多好啊。在北大物理系，是我在屋门口徘徊最久的一次。\n其实除开这些遗憾，我倒是有幸接触几位人格魅力如温玉暖风的教授。想一想如果不是在这里，我将无法从他们的谈吐，见识和情怀中多一层对世界的理解，那倒真会是巨大的遗憾了。其中一位是舒幼生老师，他很自谦，总说自己是个教书匠，不带科研，但是他讲的基础课总是最让我津津入迷。记得在第一学期末，主要课程讲完了，他就在黑板上写下麦克斯韦方程组，然后加上假设光速不变和对称性原理，居然一步步导出了狭义相对论的结果。就好像翻戏法一样。北大有名的教授不少，但是把教课这么当回事，这么宠着学生的老师，确实不多。\n我最大的遗憾是嘴笨，有几次私下跟舒老师交流的时间，都不会主动开口问什么。舒老师说我孤高，也确实评价的精准。但是心里对老师的敬仰从没改变过。\n另一位让人印象深刻的是潘文石老师。他常年在野外工作，难得回北京一次，公开课都是一票难求。巨大的礼教阶梯教室人塞的满满的，很多人只能站在过道里。虽然他讲的是保护大熊猫和白头叶猴的故事，但其实他讲的是他的人生，和他对自然与人类关系的思考。记得他有一次饱含感情的说，那些濒危的动物很苦，很难，可是你去看看那些当地的老百姓，他们也是真的苦啊，不靠自然他们怎么活下去啊，难道为了保护动物他们就要饿死吗？我从没想到一个为保护动物奔走一生的人说这些话，但是又无比自然，让我感动不已。多年以后看视频平台上对潘老师的访谈，音容依旧。\n还有一位老师，总是在晚上一个小教室里教授伊斯兰文化历史课，不温不火，娓娓道来，他也为我打开了一扇窗。\n说到底，老师爱说人话，把教课当一回事，拿出真心来，学生就爱戴老师，这一点从来没变过。\n‍\n# 社团 开学后很快，就是社团招新的日子。人们说来到北大，不参加社团就像白来一趟。这里号称百团，前三者爱心山鹰自行车，都是几千人的大社，据说全球有名的大山已经被山鹰摘取的七七八八了，每年还都有勇士牺牲在雪线上。我没有如此闪光的兴趣点，又不喜欢热情外向的纯社交，于是找到了宅男宅女们的精神洞窟，漫画社，元火。第一次去时怕人不收，还带了些自己高中和平时画的短篇，其实人家是收看漫画的，会不会画完全不在考察范围。而且我对于会画两笔的自以为是更是完全不值一提。\n不说这些，社团其实是太好混了，只要出现，刷脸，陪人聊天，吃饭，看电影，一两年之后也能成为所谓的元老。面对新人的妹子也能大言不惭的指点两句。有活动时就会有人拉你，论坛上就会有你一号人，谁和谁吵起来了，谁和谁成一对了，这些事仿佛就跟你变得有关起来。因为实实在在看到了好处（主要是和女生接触的机会），我有两个物理系的男同学又在我的影响下加入了社团。\n一开始主要是做隐形人，瞪着个眼睛东看西看，很多动画电影是借了元火放映的机会才第一次看到，不得不说北大孩子们的见识都太高了，什么吸血鬼猎人 D，浪客剑心追忆篇，大友克洋，押井守，那些平均 9 分以上的东西，对于一个孤陋寡闻的小镇男孩来说，就是精神的重击不能停。\n而且社团里认识异性太容易了，只要本身长得不差，或者至少是收拾的干净些，就总有那有意无意的邂逅交集。在大学里，学多少东西是一方面，谈一场恋爱才是必须的。我们很多一路考上来的感情小白一度对这个题都绝望了，现在，我满心满足的摸着身边儿子的胖屁股，衷心希望他假如将来需要，也能用上这个捷径。\n社团里有趣的人也多，有一位才女，我们叫她地瓜，编剧文采飞扬，曾为社团编导舞台剧一部，名曰叹息的墙壁，十几个社员 cosplay 成各自角色来表演际会因缘，当年在各个高校的动漫节上巡演经年，衣服都是自己寻门路去订制，真是辛苦且快乐。演出之后少不得聚餐和跑团。聚餐经常去鸡翅，西门鸡翅实在是太有名了，现在还在经营，名气更胜过去，不知老板为子孙挣下了几套房子。有趣的是那时候说到有个新开张的火锅店，服务感人，据说还会表演甩面条，那家店叫海底捞。跑团也就是二十年前的剧本杀，只是骰子棋子剧本一无所有，只有酒，几个人就围坐在静园草坪上，靠脑子和嘴做显卡，一玩一夜。玩的时候既有剧情中的身份，又有现实中的身份，谁是谁的舔狗，谁是谁的备胎，谁和谁是情敌，谁和谁在撕逼，机锋往来，暗潮涌动，非常复杂烧脑。\n‍\n# 选择 在大学，人人备考托福 GRE，几乎成了必修课。不单是北京，全国的大学生都要来到北京的新东方，交一笔不菲的培训费，或者说朝圣费。仿佛不如此，大学就不完整。我曾经怀揣着高中十几个同学的数万块巨款，站在几百米长的队伍里去给俞敏洪交份子钱。据说俞敏洪都是用麻袋给老师发工资，应该是这样。罗永浩那时候挺火的，学生们都去听段子，我也听了一次。\n暑期班大部分人是耍着玩过去了，也不指望真的考多好。但奇怪的是我参加考试以后，分数竟然遗失了，再也没有寄过来，所以究竟也不知道 gre 通过没有。我在大学背单词花的功夫，大概超过了任何一门主课，砖头厚的书也啃了四五本，绝不是停留在 Abandon 那一页。我觉得倒是没有浪费，语言这一关是绕不过去的，或早或晚，总要过这个关口。它可以多给人看世界的一个窗口，感受和表达的多了，你活的也就比别人多。现在孩子语言学习环境真是太好了。遗憾的是，他们享受的开放和自由，反倒比我儿时少。\n另外在大学时常做点插图的兼职，那时候给书画插图，一张一百块，有时候来接头的就是作者妹子，看起来还是低两届的学妹，就坐在学三吃着炸鸡腿把稿费付了。积少成多，一两年也有几千块补贴。钱不多，但是有一种实实在在劳动和回报的快乐。在南门外有一个加州牛肉面馆，北大的学生都喜欢去彻夜自习。我也不能免俗，每天晚上去，清早回，点一杯冰咖啡，背两页单词，画两张画，一边是茫茫的前途，一边是眼前的蜜露，一边苦，一边甜，就像这杯咖啡。\n那时候有两套图书杂志，一套是科幻世界，一套是幻想，都对我影响巨大，这是第一次接触世界级的插画和科幻文化，面对想象的世界，心中向往无以言喻，就如同飞蛾向往灯光。\n一旦要走出象牙塔，接触些社会上的人和事，比如去出版社见客户，一种强烈的身份撕裂感就出现了。一方面，北大的学生自视都是比较高的，至少门槛在这里。另一方面，社会上认可的是财力和地位，学生可以说一无所有，对于社会人，我的心里可以说是很矛盾，瞧不起又攀不上。大四是我曾跟女朋友，现在的老婆讲，毕业了，能找一份喜欢的工作，挣四五千块，就足够我们生活了。那时候的我对于经济，金钱一点概念都没有。现在看来真是有点错位，可是，错位的是我还是这个社会呢。为什么一个人不能既平凡又高贵？既贫穷又快乐？如果社会容不下这样的快乐，那还是一个好的世界吗。\n当然，金钱的力量就算在校园里面也感受的到，同学家境有不同，毕竟有那来游戏人间的，见多识广，谈吐不俗，鲜衣怒马。我本能的感觉到阶级的不同，虽然谈不上羡慕，但毕竟人家不会缺女生。\n做出转专业的决定和做出进入物理系的决定同样重大，但这一次我想了几年，绕了个大弯。第一，在投入艺术的时候我能体会到一种忘却时间的快乐，而大学几年艰苦的学习无法给我这种快乐。无法说服自己投身到科研的生涯中，用一生去证明自己能做这件事。第二，我见识到了真正适合科研的人才是什么样子，心无旁骛又天纵英才，全心全意我都不可能比得过，更何况三心二意。既然做不到最好，索性放弃。而在艺术一途，我还是个门外汉，起点太低了，尚且不知道自己的极限在哪里。第三，我的感情关系刚刚开始，和女朋友好的像一个人，实在舍不得跑到地球的另一边去做牛郎织女。第四，如果仅仅为了敲门砖和一张绿卡继续读下去，那么下一个决定在哪里？在什么时候做？\n有个济南的艺术老师说我这个决定可惜了。我当时是无怨无悔，但经过很多年终于了解了他的意思。抛开兴趣和主观感受，确实是可惜了。在物理这条路上，至少我已经走在康庄大道上，只要按部就班走下去，资源，名声，都是可以排在这一行中的前列的。不用说一定要出国，就算躺平保送个研究生，将来也是在中科院的研究所下。而艺术，不要说我还没有入门，就算入门了，也未必有潜力，就算有潜力也未必有机会成就。这是废掉一个十年练成的满级大号，重开一个小号。就算重练出来，又如何？三十年后往回看，是做个清苦的科研狗好，还是做一个蝇营狗苟的社畜好？这也难说的很。只是年轻人，除此一身别无长物，年轻本身就具备无限的可能性。所以轻身锐意，重来就重来吧。\n最近看老电视剧过把瘾，里面王志文饰演的角色也是在单位文职里书生意气，但他走向社会后的志向居然是做一位司机，学得一技之长。估计那时别人看我，和看这个角色差不多。\n虽然我不后悔这些选择，之后十几年也确实过的很满足，不过当时的决定有主观也有客观原因。我希望我的孩子假如将来要做类似的选择时，能从心所愿，充满安全感，不用背着太大的经济压力。不管想做什么，都能全心全意的去追求。人只有脱离开温饱和安全的压力，才能去追求下一个层次的满足。\n至于北大，我在里面兜了一个大圈。它的光环虽然是虚幻的，却从不消退。我在这里依着学术的门框窥视过，怀着迷茫思考过，努力过，享受过也爱和被爱过。我不后悔这段往事。\n太真实了\u0026hellip;大佬好文笔\n你说的是哪个北大? 哦是 Peking University? 不好意思打扰了. 我也是\u0026quot;北大\u0026quot;的 : )\n‍\n‍\n# 碎片化言论四则 ‍\n1、\n真是难以置信，我们距离第一款智能手机发布，只有区区 15 年，而现在已经到了这样的阶段：新发布的智能手机，已经没有太大的改进，增加的都是一些微不足道的“创新”。\n\u0026ndash; Hacker News 读者\n‍\n2、\n当你成为某个领域的专家，遇到的问题就会非常具体，很可能只有少数人遇到过。再想进一步前进，互联网也不是很有用，只能靠自己摸索、应用、实验和协作。这些都相当慢，这就是为什么专家再要提升自己，往往要花费数年时间。\n\u0026ndash; 《像旅行者一样学习》\n‍\n3、\nTMT 指的是科技（Technology）、媒体（Media）和电信（Telecom）这三个产业。它们有一个共同点，就是边际成本非常低，增加一个新用户，几乎不带来额外的成本。\n正是由于这个经济共性，这三个产业逐渐融合发展在一起是毫不奇怪的。\n\u0026ndash; 《TMT 为何存在？》\n‍\n4、\n遥远的事物总是对我有一种永恒的吸引。（I am tormented with an everlasting itch for things remote.）\n\u0026ndash; 《白鲸》，美国经典小说\n‍\n‍\n# 一起流浪 Link\n流浪的日子也许会有厌倦无聊，必须给自己找到生存的意义，不妨这样吧。先试着坐遍城市的每一条公交线路。腻了，攒够钱，再一路换乘公交，到另一个城市流浪。\n按照人文主义者观点，知识=体验 × 敏感性；人活着首先要尊重自己的感觉，活在当下，体验生命的过程。在流浪的过程中，如果你够敏感，可以一个观察者的身份尝尽世态炎凉，人生百味。叔本华曾经说过：人生就是一团欲望，欲望得不到满足就痛苦，欲望得到满足就无聊，人生就像钟摆一样在痛苦与无聊之间摇摆，而人生最后的结局又是死亡，所以说人生根本就没有意义\n‍\n如果让我说哪种类型的人是这个时代过的最舒服的，我觉得大概是天生智力有些缺陷（没有半点歧视的意思，相反我其实很羡慕这种），但身体健康的人吧。\n毕竟，这个社会的困惑与压力，本质上都是欲望引起的，或来自攀比，或来自对旁人眼光的在意。但我认为上述所说的人，大概也感受不到这些自我世界之外的牵绊吧，毕竟这个社会，还是可以保证他们基本的温饱的，并且他们内心的澄澈与认知的限制，也能屏蔽外界的烦恼。\n本来无一物，何处惹尘埃——天生的无我境界，真的羡慕。\n‍\n\u0026ndash;也许不能完全认同, 但是确实有其存在的理由\n‍\n(*Filter)\n","permalink":"https://spadektlsg.github.io/p/sk%E6%89%B9%E8%AF%8401%E6%94%B9/","tags":[],"title":"SK批评01改"},{"categories":[],"contents":"原文作于 2023.3.23, 润色于 2024.4.28\n记录了 2023.8-2024.1 的被电脑拷打实录\n‍\n# 垃圾鼠标 深受其害: 9.2-2023-10-20\n‍\n大概是鼠标的省电模式的问题, 导致长时间不操作(5s)后发生时延;\n但是经过一段时间的使用后发现, 更有可能的系统的忙碌, 鼠标进程的优先级被抢占导致的操作迟缓\n不知道最后的结果是什么: 我确信, 只要把电脑重装后测试即可\n后来发现不是鼠标的事情, 是电脑服务设置的问题.\n‍\n总之不会再买这家的无线蓝牙静音鼠标了(说的就是你, 英菲克!)\n超了, 最后一个鼠标才用 8 个月又坏了, 经典只能用一年然后报废, 因为坐车的时候没有装盒子的话就会导致磕坏点击板或者是平时放书包没保管好就会磕碰到, 可靠性 40%的废物\n‍\n‍\n# 垃圾网卡 网卡只要切换一下网络就会找不到 WIFI 网络\u0026hellip;\n使用修改网卡的 VMware 导致 Wifi 适配器被禁用\n‍\n深受其害: 9.2 - 2024. 1.30 过年前才修好, SK 你 TM 是真的能忍啊\n算了罢, 更新全部失败, 驱动坏了两个, 能用就行吧\n为了保证当前虚拟机的正常运转, 什么都可以忍受\n2023-10-28 现在大概只能去服务列表里使用重启 WlAN autoConfig 服务来不重启完成连接了\u0026hellip;\n‍\n大概虚拟机的网课配置有关(关于 IP 设置等,当初为了调试为非桥接模式废了很大的功夫但是收效甚微, 大概是因为外面还套了一层 VPN 的原因, 流量走的不是固定的 IP 地点)\n24 年的我要说, 你太聪明了, 完全正确, 不愧是 SK!\n最后的结果就是网卡打开后系统的 Wifi6 适配器就没了, 再也打不开只能按照下面强制重启 Wifi 设置, 运气好的时候使用 Wifi 控制中心的 Wifi 图标禁用就能解决. 运气不好就白白浪费生命中的一分钟去乱点一些没用的 Button 最后还是走重启流程, 就连重启有时候都无法解决!!! 烦内!!!\n发生的频次: 频繁切换校园网或者是流量或者 Wifi 会导致发生概率大大增加,解决长时间待机后连不上网\n因此之后我经常哪怕学校网再烂也不去切换为自己的网, 就是怕切回来后切不回去了(直接 WLAN 可选列表干没 \u0026ndash; 你找不到 Wifi 网络\u0026hellip; 😋)\n大概也叠加了 Win 之前的老 bug\u0026hellip;之前大概 3 个月才能非常倒霉的来一次, 甚至还要让家里的 Wifi 背锅\u0026hellip;\n看来是 Win10 底层的东西了, 还是尽量不要动系统了, 没有靠谱的软件的话\n这里事实上我为了达到所谓的超级续航, 封禁了系统一大批功能, 可能也间接导致了这个网络的问题, 现在是没精力鼓捣了, 老老实实用罢. 也不追求性能和续航了反正从学校 run 了整天插电也不用考虑续航了(大概)\n然后呢? 我现在在图书馆, 电池只能用 4h\u0026hellip; 续航还是很重要的拜托\n这一连串, 就是反复打脸和回旋镖的过程\u0026hellip;吸取教训, 下次遇到这样的问题绝对不要忍了, 就好像三蛋在台上呆了 50 年, 点数亏麻了太子都熬死了, 还不知道陛下请上马一下\u0026hellip;\n‍\n大佬的排查笔记CSDN, 翻遍全网没几个出问题的, 大概是其他修改软件又把注册表修坏了\n其中尝试了一个月可用的只能手动重启服务: 任务管理器找 Wlan AutoConfig (但每次去任务管理器还是很麻烦) 设置自动任务 - 当崩溃时重载也不行 -\n这里提到了之前 8 月份重装的策略, 现在想起了一个点, 就是重装前已经不堪重负的旧系统我为了提前演练一下 VMware 的操作(例如创建虚拟机和安装 JDK), 先装了, 之后没有卸载还是卸载了忘记了 ( 反正根据广泛流传的关于不能卸载 VMWare 的传言来看, 当时或多或少受到了这个影响), 然后重装选择的是部分重装, 系统设置什么的导入也存在问题, 当时就觉得不对劲了\u0026hellip;\n(本人一直有鼓捣系统服务等各种原有配置的习惯) 后来装了 VMware 之后情况就急转直下了, 特别是选择固定 IP 的时候 (之后一直没能设置上, 导致每次我重启之后都要把 Linux 系统 IP 对应的一个个子节点重新 ifconfig 然后记录 Ip 存到 Hosts 文件里\u0026hellip;浪费 8 分钟/次, 总共持续了 6 周, 就是浪费了人生中的一小时!!!NO! 为什么我不去重装?! 为什么?! 因为自己鼓捣的系统白白重装了没了很心痛啊\u0026hellip; 但是现在我已经成了没有感情的重装机器, 十次也好, 百次也罢, 只要需要我重装, 我一定会做的(甚至给自己写了一份完整的灾难处理重装手册 2333)\n‍\n‍\n没用的操作, 一两次还行, 后面玄学基本没用, 不如直接关闭服务来得快\n**以管理员身份运行命令提示符输入**​netsh winsock reset 后重启\n​Win+Q​系统配置，选择服务, 到服务中的 network setup service，将其左边的勾取消掉，保存，选择退出而不重新启动。在进入服务里启用它，就不会自动关闭了。\n‍\n‍\n# 驱动更新被拷打 ‍\n‍\n驱动更新导致连不上网 - 仍然在设置此设备的类配置\n更新网卡后有驱动问题, Windows 仍在设置此设备的类配置\n‍\n网友介绍是注册表问题, 大概是 VMware 不正确卸载导致的问题. 害人不浅, 绝对不会用了\u0026hellip;需要重建注册表, 那么我用 Windose 管理工具来烩一烩它\n‍\n‍\n看来还是老实恢复旧驱动好\n驱动真就难倒英雄汉了, 没有网络真的是寸步难行\n‍\n现在打算应急重装一下. 保留思源内容\n无妨, 正好重装系统, 现在先尝试一个下午看看 (强装镇定)\n‍\n结果之后就发生了 12 - 24 著名小丑事件: 装了鼠标新驱动导致鼠标脱手不响应事态结束了, 当时装完了鼠标驱动修完了我还是不满足, 希望用同样的方法把 WLan 驱动也修好, 解决所谓 WLAN 崩溃问题\u0026hellip; 当时装好后就完全不能联网了, 很急当天晚上, 第二天紧急重装了. 心想反正没什么事了也就写个 CSS \u0026amp; LDBMS 小组作业加上期末复习而已, 还运转的过来(结果真的运转不过来了, 后来间接导致了 1.9 滑铁卢小丑事件和 1.15 死线战士俩个恶性事件(后话)\n为什么说是小丑事件? 因为装完第一天我拍手叫好! 网络? 启动! 鼠标? 启动! 好起来了\u0026hellip;结果第二天鼠标又烂回去了, 不跟手还卡\u0026hellip;网卡第三天变回去, 一旦换网络 80%断网\u0026hellip; 结果为了期末俩大项目和期末复习还不能重装, 就这么熬到了 1.15 终于开始完全电脑搬家彻底扫除影响, 选择了从云端获取全新的 Win 系统选项, 同时抹除了磁盘所有玩意(没错, 包括你! VMware), 到今天 2024-03-18 终于可以说是阴霾散去了 OTZ\n‍\n‍\n‍\n","permalink":"https://spadektlsg.github.io/p/2023.8-2024.1%E8%A2%AB%E7%A0%B4%E7%94%B5%E8%84%91%E6%8B%B7%E6%89%93%E5%85%A8%E8%AE%B0%E5%BD%95/","tags":[],"title":"2023.8 2024.1被破电脑拷打全记录"},{"categories":[],"contents":"‍\n2022参与网络课程仅黑马JavaWeb路线全套 + JVM + Git等, 不记录\n‍\n‍\n# Header 里面内容已经转储对应页面, 这里仅记录\n这里仅抽取网课评价 + 记录内容, 具体网课的输入最后会转换为两个文档- 评价(合并) + 具体精华内容(吸收入各个文档内)\n个人API - Key等信息部分删除, 部分已失效无需删除\n‍\n2023学习的苍穹和Redis点评事实上延续到了2024作为项目和复盘任务, 于是不在此记录\n‍\n# 非正规入门 ‍\n# 智障网课 盗版录屏网课, 2023.3出厂, 2023.10学习\n很明显是教室网课录屏, 有人在上课\n‍\n# 评价 其实和黑马这类差不了多少, 顶多一些知识点讲的细了一点\n那我不如去看文档或者直接在工作场景中找问题, 也比你这看教程来得主动性强呢\n真的没什么补充, 都是细碎的点, 只需要自己之后遇到了记录一下就好.\n很明显 没有什么流程设计, 讲的很随意\n但是可以记录一下流程和知识点, 截点图之后解密和按图索骥是非常好的材料也能弥合和培训班学员的信息差, 同时也能感受到培训班的情况\n‍\nSB+MP一共16个40分钟的网课(音质很烂没办法太多快进), 也就是需要16小时, 两天全部的产能, 按照当前的分配标准大概是要3日完成. 简单的跳过, 但是一定要做到真的能出成绩, 这便是对于CRUD的试炼了. 也是我对项目经验的回答: 我能够用这份经验完成基本项目经验的积累, 那么就没有无从获取这一说法.\n‍\n‍\n# 简单记录 在空项目中创建了SSM基础工程\n首先导入依赖\n但是发现好像是用sevlet做的? 这叫什么SSM? 是什么时候的老黄历了\n如果太落后了就算了. 白费心机 ; 这个只有部分的内容, 很明显有一些是被删除了, 前后接不上.\n因此只能够看看\n‍\n‍\n询问技术栈问题: Newbing - SpringbootSSM使用类似HttpServletResponse在Controller层传递参数来控制跨域请求吗?如果不是, 那么这是不是Servlet整合Springboot的技术栈? 那么在最新的SSM框架中如何实现跨域请求请求?\n哦哦,看来不是, 不能一看到Servlet就觉的是旧知识然后开始产生散漫的心态了.\n这个是新知识.那么记录下来\n‍\n我发现这个网课视频内的差不多一半的内容都是在浏览器和前端部分进行调试和看Chrome的执行情况, 知识点实际上没有讲很多, 我觉的这样效率比较低, 知识密度也转化为一般的学校课堂了. 我的建议是像任务布置- 问题解决这样来.(怎么开始盘算着补习班的事情了??)\n现场调试占用的时间太多了, 本该用大量时间在讲解原理上\n因此, 对于不感兴趣的前端(除了Axios需要再看看外)其他内容标记以下大概的实现然后自习即可\n‍\n情报中最关键的一点就是事件, 事件的细节无需在意.\n我明白了, 知道它在哪意味着我可以对其进行探索, 知道怎样做和在哪里反而导致情报的冗余\n‍\n同样的, 系统建议专业版而不是家庭版避免权限不足的问题. 但是将来还是先用正版为主\n这个没事, 缺啥补啥, 直接装就是\n但是这个网课有前后端一起展示出来教授你怎么看前后端然后独立完成接口编写, 也就是全栈的技能, 这个挺好\n‍\n‍\n# 租借军火库SSM + JavaWeb 笔记列表\n友人租借的网课视频, 小滴课堂JavaWeb + SSM, 2021的比较旧版技术栈\n‍\n‍\n# 评价 网课这个其实算是全栈了, 前端的东西不必学, 看看即可\n不需要完全自己实现, 采用其他现成的项目观察即可. 已经过时了这些技术\n特别是那些细碎的开发, 而且这个网课很老了, 不能作为学习前端的东西\n只能说亏了, 这类二线网课性价比太低\n‍\n‍\n# 个人记录 ‍\n注意有一些字符(\\t)从外观上看起来是没问题, 但是事实上是乱码, 建议手动控制缩进\n根据前端传输地址, 将整条请求网址复制到Controller方法下面之后参照着进行分割写参数接受的方法流程\n忽略Controller业务中的内容, 而是用日志输出一下看看下面的Service能不能正常运行输入信息\n学到了, Nginx因为是开箱即用, 因此大多数情况下不要自己去配, 直接拿就好了\n为之前耍小聪明的行为感到不齿\u0026hellip;\n指自己下载然后拼装入Nginx, 白白浪费时间\n‍\n‍\n‍\n‍\n‍\n‍\n‍\n# 正规入门 这里主要是项目, 基础技术栈不必记录了\n‍\n# 硅谷校园 ‍\n# 评价 少见的只需要SSMMP的基础项目, 应该是黑马外卖的竞品, 和黑马的两个网课一起干了\n我的评价是比不上黑马一点, 很粗, 没有诚意前端都没有, 大概不是主打菜\n只是简单小项目罢了\n‍\n由于没有前端, 因此采用Postman来发请求\n之后找找大佬的前端页面练习?\n不需要了, 现在看来这个直接用若依做前端即可, 项目本身没什么特点, 就是入门测试\n‍\n‍\n# 链接 CSDN1附资源\nCSDN2\n‍\n# 瑞吉外卖 ‍\n# 评价 ‍\n真不错，少有的单体项目了(没有微服务)\n有些地方没有很好的遵守restful原则\n‍\n# Bugfix ‍\nresource只保留yml文件\nnginx.conf需要在第1行确认user为root才能使用\n统计所有端口号，令防火墙放行该端口或者放行主机\n‍\n‍\n主从同步那玩意我搞了整整一天……我真心建议这一块去其他地方专门补一下，如果你一遍过当我没说.\n‍\n问题是 Slave_IO_Running: no\nSlave_SQL_Running: Yes\n原因是我的两个虚拟机是直接克隆的 而数据库会有一个唯一的uuid，直接克隆导致了uuid重复 只需修改uuid即可\n‍\n问题二\nLast_IO_Error: Got fatal error 1236 from master when reading data from binary log: \u0026lsquo;Could not find\n，这个我解释不清楚 直接百度搜这个异常能解决\n‍\n问题三\n当一切看起来都ok之后用xiaoming这个用户登录数据库却不能新建数据库.\n我给换成了root 但又不能实现同步了 原因是权限没开 在主表开个权限\ngrant replication slave, replication client on . to \u0026#39;root\u0026#39;@\u0026#39;数据库地址\u0026#39; identified by \u0026#39;数据库密码\u0026#39;; 到这才终于成功.\n‍\n如果是使用MybatisPlus代码生成器\n实体类里面加上@TableField(fill = FieldFill.INSERT)和@TableField(fill = FieldFill.INSERT_UPDATE)注解\n不然实现后面的功能，打断点调试的时候 自定义元数据对象处理器会起不了作用，无法自动填充导致数据库抛500异常，想着偷一下懒，没想到调试浪费了我20分钟，真是划不来，也算是积累经验了，哈哈哈哈\n‍\n# 资源 大佬花里胡哨的博客(最后一章) CSDN更好的 ‍\n项目\n学习\nUI转Vue\n‍\n# 瑞吉外卖个人笔记 各种原因跳过部分: Mysql主从读写分离 + Nginx反向代理 + 负载均衡, 前端不太懂, 记录下后面看看; 相信后人的智慧\n以上写于2023, 12月2号, 现在看来所谓的\u0026quot;后人\u0026quot; 只会说 \u0026ldquo;兄弟, 别回头\u0026rdquo;\n‍\n# 要点 ‍\n公共字段自动填充\n‍\n分类信息分页查询\n‍\n全局异常处理器类\n‍\n‍\n# 瑞吉外卖大佬笔记 如果你后面想做逻辑删除​，要在模型类中加入isDelete​字段，黑马给的资料的模型类里没有逻辑删除属性，但数据表里有\n‍\n全套大佬笔记链接\n‍\n‍\n# 苍穹外卖 (瑞吉升级版, 技术栈变了)\n‍\n‍\n2023\n苍穹外卖的业务更加真实完整，用户端改为微信小程序，登录改为了微信登录，加入了统计报表，来单提醒，客户催单，订单管理等功能，业务实现了闭环. 技术选型更加丰富和实用. 可以认为是增强版瑞吉外卖\n比较新, 可能大佬的笔记资料比较少\n苍穹前端稍微摄取了, 挺好\n‍\n‍\n# 抽取 ‍\n阿里云对象存储使用\nsky: datasource: #自定义数据源 driver-class-name: com.mysql.cj.jdbc.Driver host: localhost port: 3306 database: sky_take_out username: root password: 2333 alioss: endpoint: access-key-id: access-key-secret: bucket-name: redis: host: 124.70.10.183 port: 6379 password: qwe123 database: 14 wechat: appid: secret: mchid: mchSerialNo: privateKeyFilePath: apiV3Key: weChatPayCertFilePath: notifyUrl: refundNotifyUrl: ‍\n# 链接 哔站视频 - 无, 太新了\n‍\n‍\n# 其他 调试地址\n‍\n微信小程序(废止)\n管理员登录 http://localhost/#/login\n接口文档 http://localhost:8080/doc.html#/home\n项目接口文档/苍穹外卖-管理端接口.html\n‍\n# 预期 ‍\n# 复盘 ‍\n最后使用断点来老牛反刍式的进行练习(联调)\n最后处理API接口文档生成内容, 前期先放着 (最后按照成品一锅端)\n随时处理/**文档注释\n‍\n‍\n# 未来知识处理 前端课程没有对应的笔记, 但是可以去找大佬的解答\n前端封存等复盘时候来(或许因为学校项目这个要延迟一点)\n‍\n因此本来学完后端了就该全部开始复盘了, 但是这次不能, 这次打算把这个抛出到回家后进行测试\n进行二次学习测试.\n‍\n‍\n# 实现 ‍\n我需要一个写死的版本, 和一个自己实现的魔改的版本\n(需要修改前端, 需要等待2月份来训练)\n‍\n‍\n# 完结 2023-12-06 21:35:32\n一年的孽缘到此斩断\n保存所有状态直到回家慢慢调试\n或者观看大佬作品\n结果回家了也没用调试过, 放着生利息, 现在赶紧捡起来鼓捣一下做成项目填简历了\n‍\n‍\n# 全局配置 按照原来的项目配置了SB2.7, 而不是3.2, 怕出问题\n这次希望能够照着敲顺利实现, 少一些报错\n‍\n# 热部署 暂停, 为了节约电量(电脑太拉跨了, 省电模式真就大乌龟, i5 11500H)\n‍\n‍\n# 请求路径 管理端发出的请求，统一使用 /admin作为前缀. 用户端发出的请求，统一使用 /user作为前缀. ‍\n# 返回R的泛型控制 如果是需要返回具体数据, 就设置为具体数值 如果完全不涉及到具体数据返回, 那么就不会用泛型(我还是加上Object防报错?) 其实没必要去跟随着IDEA的报错管理, 这些都是可以忽略不计的东西\n真正应该引起注意的是项目\n‍\n# 登录 设置token过期时间为3天, 不然原来两个小时就要重新生成一次令牌烦死了\n使用admin用户登录重新获取token，防止token失效\n‍\n# 约定 自动填充的时候需要将核心对象放在第一位, 方便获取\n最好最后再来优化代码质量, 因为由于学习时候跟上进度使用的反复导入的覆盖问题\n‍\n‍\n# Key- Fake账户实现访问鉴权 SKfake显示名称 SpadeKFake登录名称\n‍\nbucket Name\nsktlsgbucket 登录密码\n‍\nAccessKey ID\nAccessKey Secret\n已隐藏\n‍\n# 图片资源 本地上传Bucket后, 记得修改对应数据库的对应地址(但是没什么意义, 因为SQL是不保存的)\n最后回去的时候调试罢(1月) 好看点\n‍\n# Redis ‍\n个人虚拟机\n开启Redis\n‍\nRedis启动\nredis-server /usr/etc/WORKSHOP/TOOL/redis-4.0.0/redis.conf 使用10数据库\n‍\n# Wechat 控制台\n‍\n4个参数\nappid:wx7eca24934e7 secret:224abf53 js_code:0e3Qv2200 grant_type:authorization_code ‍\n需要加入白名单, 获得openid 微信号对应的唯一标识\n这个只能用一次, 然后就失效了\n{ \u0026#34;session_key\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;openid\u0026#34;:\u0026#34;\u0026#34; } ‍\n# 支付 支付接口和小程序接口\n业务取消\n‍\n# TIPs 填充测试数据时候, 可以选择没用的手机卡和地址\n‍\n‍\n‍\n# 个人笔记 ‍\n‍\n# Day1 联调 ‍\nNginx报错 windows安装nginx莫名其妙 CreateFile()权限不够创建问题\n原来接口地址没写好也会这样\n在部署好Nginx服务器后，输入IP地址和端口号，返回403\n其中，xxx是在/etc/nginx/nginx.conf中指定的root目录.\n报错根因：直接使用IP地址和端口号访问时，需要指定index，如果未指定，出现该报错.\n这时候，可以在nginx/nginx.conf中添加配置：\nautoindex on; # 自动索引\n‍\n自己的环境需要配置反向代理才可以完成联调, 这里网课设置有问题\n果然, 查看了接口和后端不一致, 应当是反向代理\n‍\n由于开发阶段前端和后端是并行开发的，后端完成某个功能后，此时前端对应的功能可能还没有开发完成，\n导致无法进行前后端联调测试. 所以在开发阶段，后端测试主要以接口文档测试为主\n‍\n# Day2 阿里云OSS 需要30分钟准备他们的Bucket: 阿里云竟然还有公开检测功能, 我推到公共仓库还没2秒就被定位到了\n好好好, 不过想来也是让人后怕\n‍\n关于DTO和VO等对象的转换, 可以理解为为了逻辑而操作的\n这里没有之前使用String类的拷贝方法自己造, 而是使用了Spring的BeanUtils封装\nOss并没有实现成功, 图片还是所谓的损坏状态\n应该是前端的问题, 不可能本地上传都看不到图片的样子\n但是OSS确实学到了怎么操作了\n是前端的问题, OSS已经找到了!\n好!!!\n‍\n‍\n‍\n# Day56 Redis× Wechat × 新版本微信一定是用不了了\n备案烦死了, 取消部署上线\n开发者工具官网\n‍\n本地的登陆了\n‍\n小程序ID\n秘钥\n‍\n可以进入, 那么便试试罢\n‍\n最后装起来确认登陆了, 但是却没有DB变化, 控制台也没有输出\n都装好了, 没有报错, 为什么连请求都没发过来呢\n一定是小程序前端代码的问题, 建议自己后面修改(也可能是小程序没有上线被封禁了)\n‍\n莫怕, 经过调试发现报错是\nerrmsg -\u0026gt; invalid ip 121.18.90.146 ipv6 ::ffff:121.18.90.146, not in whitelist, rid: 656db174-797c5568-62b50eaf IP不在白名单范围, 可是我的代理服务器一直变化啊\n那么只能够取消代理裸连了吗\n不怕, 关闭了白名单即可, 这个就是一个坑啊\n倒不如说不知道自己的服务器后台转发问题才是问题根源罢\n‍\n为了保持后面调试的便利性, 现在暂时不要打开前端, 直接在后台写即可\n‍\n‍\n# Day8 WechatPay 需要获得两个秘钥文件才能开始, 而当前未完成备案取消\n‍\n内网穿透实现相互调用微信后台\n需要计网内容\n‍\ncpolar控制台\n获得临时域名(公网IP)\n选择验证,复制令牌\n软件控制台使用命令\ncpolar\u0026gt;cpolar.exe authtoken XXXXXXXX 可以启动服务, 获得IP地址\ncpolar. exe http 8080 ‍\nForwarding找到域名, 右键标记后复制浏览器访问\n网址类似\nXXXX.cpolar.top/ ‍\n一般项目部署到服务器后都是要公网IP的, 当前为了解决这个本地项目没有公网IP问题先搞这个隧道穿透实现\n不需要开启项目实现, 因为后面不采用微信平台相关工具\n‍\n‍\n# Day9 完善业务 ‍\n取消调用百度接口, 写死\n之后现学即可\n‍\n‍\n‍\n‍\n‍\n# 问题解决 ‍\n# 弱警告 ‍\n# 不建议使用字段注入 检查中去掉Injection Warn 字段注入警告\n‍\n# 未注解的形参重写 @NonNullApi 形参 使用@Nonnull​标记对应参数即可\n‍\n# 找不到符号大概是自己IDEA疯了 找不到Serial?喂喂喂我好心帮你加上去\n清理clean了编译了还是启动失败\n‍\n直接左上角刷新缓存试试, 依旧失败\n可能的原因\n其实是idea的索引出现了问题 是因为idea每次启动的时候都会初始化 创建索引 如果之前您对某个类进行了编译 那么该类的索引地址就会发生改变 ,那idea中原来对此类的索引值就发生了改变就会出现引不到的情况\n‍\n‍\n# 长时间未操作数据源报错 discard long time none received connection 在项目的DruidConfig类中新增加：\n/* * 解决druid 日志报错：discard long time none received connection:xxx * */ @PostConstruct public void setProperties(){ System.setProperty(\u0026#34;druid.mysql.usePingMethod\u0026#34;,\u0026#34;false\u0026#34;); } ‍\n# Maven报错 ‍\nFailed to execute goal on project 未解决\n‍\n# 业务401 ‍\n401 表示没有得到鉴权, 应该是自己设置的\n一看jwt鉴权那里果然是\n大概是小程序的bug\n‍\n微信小程序拿不到list\n解决: 暂时全部return 鉴权true\n包括员工和管理的\n‍\n‍\n# 插入数据失败 大概是上面鉴权的问题\n‍\n重大BUG - 问题调试解决 -暂时写死处理\n发现是获取User对象没有从线程中获取出来\n之前的老Bug, 没有User对象只能手动指定试试了\n或者直接在从线程获取的方法里设置写死UserId为对应值\n我查看数据库UserID, 在调试时候发现BaseContext无法获得当前ID\n‍\n后续代码修复 Bing搜索\n由于没有可能上线, 这个微信小程序也只有可能我一人使用\n因此解决此问题意愿不强(不紧迫)\n暂时写死处理, 进一步测试基础代码后进行针对性调试\n‍\n# 无法完成支付 ‍\n自己设置支付直接返回空数据, 但是需要进一步深入修改支付逻辑\n由于前端已经写死了, 因此这里再怎么做也是徒劳\n‍\n因此\n我需要一个写死的版本, 和一个自己实现的魔改的版本\n微信小程序已经弃用, 接下来只能找相关大佬实现了\n‍\n# MAVEN崩溃 JDK17版本的MAVEN, 虽然一直用1.8也没问题\n依赖settings文件\n暂时使用公共阿里云仓库\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;settings xmlns=\u0026#34;http://maven.apache.org/SETTINGS/1.2.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd\u0026#34;\u0026gt; \u0026lt;localRepository\u0026gt;D:/maven/repo\u0026lt;/localRepository\u0026gt; \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;aliyunmaven\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;阿里云公共仓库\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;jdk-17\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;activeByDefault\u0026gt;true\u0026lt;/activeByDefault\u0026gt; \u0026lt;jdk\u0026gt;17\u0026lt;/jdk\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.compilerVersion\u0026gt;17\u0026lt;/maven.compiler.compilerVersion\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; \u0026lt;/settings\u0026gt; ‍\nlinux后面部署需要两台服务器，有的朋友会去克隆，尽量不要克隆, 去重新配一个，要不然静态地址修改了也会出现问题\nlinux用的时候访问不到地址一般都是防火墙没关闭的问题，访问不进去就试试 systemctl stop firewalld命令\n每次更新完资源就source一下更新一下配置，再更新打开\nspringboot现在很多都是3.0版本以上，配置jdk的时候都得配置高一点的版本，1.8已经不支持了，或者是导入maven的时候给springboot降级\n‍\n‍\n# Redis ‍\n‍\n# 规划 12.10日前先完成理论整理, 之后项目篇等回家了一起做\n如果有破坏当前黑马其他课程的内容, 则立刻取消课程\n12.16 继续来个实战篇 + 高级理论\n使用本地节点搭建\n‍\n高级篇超远期\n‍\n‍\n# 链接 哔站视频 剩余实战篇\n‍\n百家讲坛\n翻了翻没找到Typora版的笔记，于是自己边学边写，目前刚看完基础篇，笔记也是记到了基础篇，我把typora版的笔记下载链接放在了我博客文章的最上面，方便我看完其他部分后更新下载地址，大家有需要就去下载吧：https://www.oz6.cn/articles/58\n‍\n项目代码地址：\nhttps://gitee.com/huyi612/hm-dianping\n直接运行老师的gitee项目有好多错误，然后自己根据老师gitee的项目和黑马公众号里面的项目重新整合了下，只需改一下配置文件里面的redis，运行不会报错. 整理到P29，大家可以直接P30开干！\n链接: https://pan.baidu.com/s/1F82Nxl2LUN1jwi8ewXklcw 提取码: wssy 复制这段内容后打开百度网盘手机App，操作更方便哦\nGitee是完整版本，依赖后期的课程内容，是用来做参考的，不要运行.\n公众号资料目前重新上传了，测试是完整可运行的.\n‍\n54 节事务肯定失效：\n应该这样：\n@Autowired\nprivate VoucherOrderServiceImpl voucherOrderServiceImpl;\nvoucherOrderServiceImpl.createOrder(voucherId);\n‍\nvoucherOrderServiceImpl.createOrder(voucherId); 等效于this.createOrder(voucherId) this 拿到的是原始对象，没有经过动态代理，使用Autowired 注入的是经过动态代理的，可以处理事务，这是开发中大坑，\n当然你也可以通过application.getbean(voucherOrderServiceImpl.class) 拿到代理类\n‍\n这里做了一下基础篇和实战篇的笔记，需要的兄弟萌可以来看看，如果对你有帮助的话，可不可以把这条评论顶上去\nRedis基础篇：https://cyborg2077.github.io/2022/10/21/RedisBasic/\nRedis实战篇：https://cyborg2077.github.io/2022/10/22/RedisPractice/\n‍\n【P25无法启动】\n解决方案：hm-dianping项目下载到本地导入后，不仅要修改yaml配置文件，还需修改config下的RedissonConfig配置类，改成自己的redis地址，同时加上端口号，就像下面这样\nconfig.useSingleServer().setAddress(\u0026ldquo;redis://192.168.89.100:6379\u0026rdquo;).setPassword(\u0026ldquo;123\u0026rdquo;);\n可能视频中的项目这个时候还没有RedissonConfig这个配置类，所以不报错\n‍\n‍\n‍\n","permalink":"https://spadektlsg.github.io/p/%E5%8F%82%E4%B8%8E%E7%BD%91%E7%BB%9C%E8%AF%BE%E7%A8%8B%E8%AF%84%E4%BB%B7%E4%B8%8E%E6%80%BB%E7%BB%932023/","tags":[],"title":"参与网络课程评价与总结2023"},{"categories":[],"contents":"\u0026ndash;Linux 操作记录\n‍\n# Header 这里将要记录 Linux 操作笔记, 包括感悟和体验, 以时间日志方式给出\n‍\n我是什么时候踏上这条道路的呢?\n现在想起来, 应该是 8 月 10 日-2023. 那一日我第一次装好了自己的 Linux 虚拟机, 虽然对这个世界全无了解, 然而却感到无比的雀跃.\n这份心境, 也将伴随着我度过接下来布满荆棘的旅途.\n‍\n‍\n‍\n# 8 月中本地虚拟机初体验 8.15 2023\n‍\n# 练习中 Linux 装机记录 真-初号机\n8.15 日, 假期预演, 去微信号手把手以及 CSDN 看教程, 在 3 分钟内利用快速安装装了第一台虚拟机(选择最小安装, 导入镜像 iso 文件即可 run)\n8.16 日删除, 准备正式配置, 参考了更详细的教程\n正式零号机-03\n由 3 次尝试后生成\n创建了多个账户, 设置了 root 账户密码\n8.22 日因系统重装被摧毁\n正式二号机\n9.4 日重建, 与一号机基本相同\n9.5 上机处理问题:\n· [X] 学习 CV 方法\n· [ ] 处理鼠标闪烁(失败)\n· [ ] 设置共享文件夹(后面成功)\n早上 11 点, Settings 打不开, 无法解决, 遂从硬盘摧毁\n正式三号机\n在处理共享文件过程中, 反应很慢, 逐渐演变为全程卡死. 遂被抹除\n正式四号机\n设置文件共享: 安装 VMTool\n过程中发现无法下载. 原来是网络问题; 结果重启发现网络设置被吃了, 然后不停尝试修改 IP 和 DNS, 设置桥接模式以外的连接方式等 -\u0026gt; 全部失败\n‍\n最后按教程重启了网络设置, 勉强可以了\n晚上去教室自习发现我的主机 Windows 的网络也出问题, 连上一会儿就断联, 两天使用诊断服务处理了几次, 最后发现是系统服务出问题.\n现在已经平稳运行(大概)\n因祸得福, 现在挂完代理也不用重启网络了, 虚拟机的设备配置也没问题了.(你确定?来自 12 月)\n初号机 Family\n目前使用的机器, 9.8 更新了一次全应用, 登录了谷歌准备同步内容\n存在问题; 光标闪烁( 主机芯片问题, 可以接受 ); 共享文件夹不稳定(可以接受)\n克隆生成了 Hadoop + Spark 集群\n初号机 - Copy\n9.6 -\u0026gt; 12.1 课堂使用主力机, 拥有全套最新开发工具, 交互界面和经久耐用的性能\n‍\n==\u0026quot;终端\u0026quot;机 Family==\n(成员: 3)\n初始配置后发现难以交互, 无法 CV, 也无法传文件, 立刻在装好之后卸载了\n但是后面发现必须这样, 用 FinalShell 连接克服困难, 现在已经用的很习惯了\n网络云服务器 - 死伤不计其数, 约配了 5 到 6 次, 销毁重装了好几次\n终末 + 清算 -\u0026gt;12.24 彻底清理\n以上统计到 2023 年, 2024 后由于熟练了不再记录\n复盘, 发现 VMware 很可能是导致电脑问题的元凶\n‍\n当时很兴奋, 看到第一天黑窗体的出现, 哪知道这是噩梦的开始\n‍\n# 9 月菜鸟练习 + 被拷打 ‍\n笔记整理完毕, 开始长线练习\n下午艰难安装 Scala 和 VScode 完成另一门课的练习\n直接采用归档安装会失败, 不知道是不是只有我会这样, 需要 rpm 命令安装.\n很生气. VScode 安装 Scala 有点难顶, 一直下不完, 又懒得去配镜像, 只好一直等咯\n总共整理了差不多一个月, 菊花宝典整理完了, 将知识保存到了本地.\n可恶, 把我流量下完了 X _ X\n安装 IDEA 和 VSCode, 测试 Java 和生产环境\n在失败了十次甚至九次之后, 终于完成了生产环境的搭建了.\n下了 Vscode, IDEA, Scala, JDK , 改了 Host , 同步 Github Settings … 晕倒了\n‍\n好像一换到校园网就不能再在虚拟机里联网了\n也罢也罢… 就用自己流量把\n第二天也在主机上测试了一下, 发现除了 UI 不同之外速度都差不多, 那还是用主机的 IDEA 跑吧\n这个时候还不懂什么网卡配置, 计算机网络真的要赶紧个上啊魂淡\n‍\n‍\n# 9.27 装谷歌浏览器-失败 软件安装绕过商店方法尝试:\n事实上这个商店(图形化), 几乎是烂了的样子, 什么都没有\nLinux centos 安装 chromium\nhttps://pkgs.org/download/chromium\n选择 centos7 版本，进入详情页，找到【Download 】下的 binary package，直接下载 rpm 包. 速度很快\n还需要在【Requires 】下载依赖包chromium-common-103.0.5060.114-1.el7.x86_64.rpm 和 nss-mdns-0.14.1-9.el7.x86_64.rpm\n‍\n最后一直报安装失败 放弃\n‍\n‍\n# 10 月集群整队 ‍\n# 10.6IDEA 安装 HW-成功 ‍\n压缩包或可执行文件安装\n例如安装压缩包: idea.tar.gz​ 时候的操作\nmkdir -p /opt/idea \u0026amp;\u0026amp; tar -zxvf ./idea.tar.gz -C /opt/idea 到/opt/idea 启动!\n​./idea.sh​\n‍\n‍\n==配置 IDEA 环境变量==\n目的是无论终端在哪个工作目录，都可以通过./idea.sh 指令启动 IDEA，不用进入到 IDEA 的环境目录了。\n我们先假设我们解压后的目录为 idea-IC-213.6777.52（这个文件名与你下载的 IDEA 版本有关系，可能跟我的不一致，自行替换为自己的目录），查看这个解压目录名称的指令为：\n​ls /opt/idea​\n‍\nidea-IU-232.9921.47\n记录下这个文件名，然后将其添加至环境变量中：\n我们通过 vim 指令对环境变量文件进行编辑：\nvim ~/.bashrc ‍\n然后将如下的内容添加至~/.bashrc​ 文件的最后一行（ ！！！注意替换掉对应的目录名！！！ ）。\nexport IDEA_HOME=/usr/local/src/idea/idea-IU-232.9921.47 export PATH=:$PATH:${IDEA_HOME}/bin 通过:wq​ 进行保存即可\n接着我们让系统重新加载我们修改好的环境变量：\nsource ~/.bashrc 在任意目录下输入idea.sh​ 启动 IDEA 图形化界面了\n‍\n我配出来的这个 Idea 需要跟随终端进行\n‍\n‍\n# 一些安装 bug 记录 ‍\n安装报 ：installing not available\n可以先执行: wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\n再完全更新一下 : yum update\n‍\n安装发现:\n获取秘钥失败\n‍\n我能行的方法:\n第一步安装指令 yum -y install wget --nogpgcheck 第二步联网获取秘钥 cd /etc/pki/rpm-gpg/ wget https://archive.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7 ‍\n‍\n10.6.2023 国庆假期完成笔记本的整理\n10.9 更新笔记本结构, 优化查找速度, 分为索引笔记本(TLB 原理)和完整笔记本(分页存储原理)\n并且针对上课内容开辟新 space.\n‍\n10.17\n在完成 Hadoop 集群配置时候为了保证两门课的隔离性, 同时也是拯救本就捉襟见肘的 C 盘容量\n在 D 盘创建了 3 个新虚拟机, 克隆自 C 盘\n而后又克隆了一个 Linux 课虚拟机, 专门处理 Linux\n剩下三个装配全套分布式实验环境\n总大小预计 45+12 = 60GB\n实验了 Hadoop + Spark 集群配置, 实验报告另附(合并)\n‍\n发现了 VMware 不能实现虚拟机搬家(之后我的容量焦虑症因为这个时不时发作)\n‍\n10 月下\n今日大概是测试,下午打算一波带走 Hadoop 集群配置, 带不走就摆烂了\n课前简单复习了下除了管道以外的其他内容, 做了细化目录整理\nOh My God! 竟然真的考管道\n==“我不理解为什么大家都揪着最难的抽” \u0026ndash;老师原话==\n‍\n完全重构了 Linux 菊花宝典, 查阅笔记命令更加方便了, 性能提升 114.514%倍\n‍\n讲授 IP 地址, 网关, 主机名等内容, 计算机网络的知识我基本自学了(你确定? 你确定? 你确定??? 学了, 但是实际用起来啥都不会那个时候)\n网络配置什么的, 暑假就玩过了, 但是始终配不好, 后来发现是我网卡什么的有 bug, 需要重装解决\n然后我重装不了了(保存的设置太多, 只能明年 1 月考虑)\n后来也确实是 1 月才开干, 被拷打惨了, 具体参阅另一篇\n‍\n# 补充内容: 分布式集群部署信息记录 ‍\u0026ndash;大数据的, 赛博牛马不搞这个\n‍\n2023-11-21 晚 惨淡退场 三人幸终\n‍\n‍\n‍\n# TODO ‍\n询问老师最后一个 Spark 问题 -\u0026gt;JDK 配置? 验证 SSH 传输问题 修改软件包等信息名称 不, 已经, 不用奋斗了\u0026hellip; ‍\n‍\n# 机器名称 ‍\nDS_SK spadek\nDSslave1 spadekfake1\nDSslave2 spadekfake2\n均以 Root 账号登录, 用户界面为 cwx 账号\n‍\n# IP ‍\nDS_SK spadek\n192.168.0.134\n‍\nDSslave1 spadekfake1\n192.168.0.102\n‍\nDSslave2 spadekfake2\n192.168.0.163\n‍\n# 软件包列表 jdk1.8.0_60 -\u0026gt;Installed OpenJDK 1.8.0_382 -\u0026gt; ​ jdk-8u202-linux-x64.tar.gz\nhadoop-3.2.2 \u0026ndash;\u0026gt; hadoop-3.2.4.tar.gz\nscala-2.12.14 -\u0026gt; Installed 2.11.8\nspark-3.1.2 \u0026ndash;\u0026gt; spark-3.2.2-bin-hadoop3.2.tgz\n‍\n变量位置\nvim /etc/profile\nhadoop-3.2.4 spark-3.2.2-bin-hadoop3.2 jdk1.8.0_202 scala 在/etc/profile文件中添加下列内容: export JAVA_HOME=/usr/local/cx/jdk1.8.0_202 export SCALA_HOME=/usr/local/scala export SPARK_HOME=/usr/local/cx/spark-3.2.2-bin-hadoop3.2 export HADOOP_HOME=/usr/local/cx/hadoop-3.2.4 export PATH=$PATH:$JAVA_HOME/bin:$SPARK_HOME/bin:$SCALA_HOME/bin:$HADOOP_HOME/bin export CLASSPATH=.:$JAVA_HOME/lib.dt.jar:$JAVA_HOME/lib/tools.jar ‍\n‍\n# 软件位置 ‍\n除了 scala 放在/usr/local, 其余软件都放在\n/usr/local/cx\n后期调整\u0026hellip;\n‍\n‍\n与讲义上区别:\nhadoop 没有次级 hadoop 目录, 只有 hadoop-..版本号 3.2.4 usr/local/cx, 而不是 usr/cx spark 名称是 spark-3.2.2-bin-hadoop3.2 没有次级目录 Java 名称为 jdk1.8.0_202 ‍\n‍\n# 热操作 ‍\n在实验室不能用校园网, 虚拟机连不上\n‍\n配 Hosts\nvi /etc/hosts\n‍\n环境变量配置生效\nsource /etc/profile\n‍\n变量位置\nvi /etc/profile\n‍\n‍\n‍\n格式化 hadoop 集群\n/usr/local/cx/hadoop-3.2.4/bin/hdfs namenode -format\n‍\n启动 hadoop 集群\n/usr/local/cx/hadoop-3.2.4/sbin/start-all.sh\n关闭\n/usr/local/cx/hadoop-3.2.4/sbin/stop-all.sh\n‍\n启动 spark 集群\n/usr/local/cx/spark-3.2.2-bin-hadoop3.2/sbin/start-all.sh\n关闭\n/usr/local/cx/spark-3.2.2-bin-hadoop3.2/sbin/stop-all.sh\n‍\n‍\n流程\n格式化 hadoop 启动 hadoop 启动 spark ‍\n复制实验报告内容\n‍\n‍\n# BugFix ‍\n记录问题:\n‍\n本机的 IP 地址由于有代理-宿主机打开 VPN - JP1, 每天发生跳变, 每次都需要修改原来的配置(取消!用手机流量来大致保证没有 IP 跳变, 根本原因是自己机子的 IP 设置问题)\n改完环境变量配置记得重启!!! 不然很可能失败\n不能在图形化界面把东西放到自己的家目录, 除非图形化界面的用户是 root, 否则 root 不能直接拿到其它私有用户的内容(改权限?不会)\n刚开始因为屏幕识图出现非法字符导致配置文件爆炸\u0026hellip;低级错误低级错误\n普通用户不用导入, 但是使用 root 用户的时候回回都要导入, 解决方法:\n博客\n/root/.bashrc 文件尾部添加：source /etc/profile\n但是二号奴隶机还是不行\n‍\n# 11 月进阶 Shell 练习 + 服务器拓展 最近在学服务器端的 Linux 配置, 看到网友的帖子说去实习公司配的 Mac 什么的 Linux 系统很难用, 看来这节课真的是学到位了,,,,吧?\n其实我觉得这些东西自学就好了, 没必要老师来教. Python 一样, Java 也是这样, 都是讲一些 API, 扒一下源码就结束了. 这些内容网上多的是.\n‍\n# 11.12 云服务器选型计划 ‍\n# DO 首先是学生包白嫖的 赛博之海 DigitalOcean\n鉴定为会员制\n实际额度已经降到了 50 美元，且仅有一年有效期\n‍\n需要有 Paypal 账号; 实际花费最小为 5dollar, 赚 45dollar\n‍\n# Azure 已经有的微软的各种认证\n注册 Azure\n日本手机号根本没用, 乱写的\n地址是野兽宅\n‍\n开了, 主账号微软, 一年有效期, 100Dollar 额度\n‍\n‍\n# Heroku 教程\n注册账号, 日本, 谷歌邮箱\n但是一直报错, 坏了\n‍\n但是这个不是具体的服务器, 是容器之类的\n‍\n‍\n# New Relic one 链接\n‍\n用 Github 注册了, 之后需要安装应用, 卡在这一步安装不了\n不懂配置代理! 选择的梯子是基础的, 无法手动装配代理\n找到系统- 设置里面的代理配置, 找到网址黏贴进去\n好好, 终于出现应用了- 只有一个应用而已, 失败了根本连不上, 大概需要更高级的 VPN, 等我手头的 2024.9 到期了再装新的\n‍\n‍\n‍\n# 余下 ‍\n双 11,618 国内这类活动挺多\n‍\n后续: 解救大兵服务器计划\n使用自定义代理私网访问服务器免除公网 IP 配置\n‍\n‍\n记录结束. 使用了 Azure-白嫖开始\n‍\n‍\n# 1115 云服务器搭建初体验事件 Finalshell 连接 Azure\n‍\n在观望了多时之后决定入手云服务器\n最后还是从白嫖开始, 因为有 GIthub 学生包, Azure 和 DigitalOcean 分别有 100 和 300(需要赔进去 5$)可以白嫖\n域名本来用 Namecheap 的, 然后竟然说不识别河北大学的学生邮箱?! 这下河砖输麻了\n冷静下来想想暂时不搞域名了, 怕出事.\n目前主要是对付网课开着\n真是杂鱼, 这点能耐就不行了(指虚拟机 CPU 被干满)\n详细搭建见 11.17 文档\n‍\n‍\n# 11.16 实操-FinalShell 连接服务器, 展示个人博客 ‍\n在进行连接时候一直出问题, 不停的找文档, 结果就发生了锁链式的整体构想领悟\n这是一个锁链式的整体构想, 需要 A, 就需要先把 B 做了, -\u0026gt;C-\u0026gt;D ,,,等等等一层层往深处 diveinto, 最后往上一层层抛出\n‍\n# 信息显示 ‍\n版本 20.04Version\nLinux version 5.15.0-1050-azure (buildd@lcy02-amd64-032) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #57~20.04.1-Ubuntu SMP Wed Oct 4 17:09:16 UTC 2023 ‍\n初始化的机子 root 无密码, 直接 sudosuroot\n展示的静态地址\ninet 10.0.0.5 netmask 255.255.255.0 broadcast 10.0.0.255 ‍\n‍\n# 安装 yum apitude 去装 yum\napt-get install aptitude aptitude 与 apt-get 都可以进行安装\naptitude 在处理包依赖问题上更好(不然就会陷入 python 依赖地狱!)\naptitude install yum ‍\n‍\n# 更换自带下载器 apt 的镜像 备份默认的源地址\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.backup 打开修改源地址, 最后更新一下\nsudo apt-get update ‍\n‍\n# Nginx 挂载静态页面 ‍\napt install nginx 安装完毕之后查看 nginx 状态\nsystemctl status nginx 查看 80 端口是否被 nginx 占用，然后在浏览器地址栏直接访问你的公网 ip 地址:80\nnetstat -anpt |grep ssh 访问公网 IP:80 成功!\n‍\n‍\n# 配置防火墙 - 直接爆炸 ‍\n允许流量通过 HTTP（80​）和 HTTPS（443​）端口。\n假设你正在使用UFW​​ 启用 ‘Nginx Full’ profile\nufw allow \u0026#39;Nginx Full\u0026#39; ‍\n验证状态\nufw status 打开\nufw enable ‍\n哦原来防火墙关闭了,打开\n打开了, 查看状态\nFirewall is active and enabled on system startup Nginx Full ALLOW Anywhere Nginx Full (v6) ALLOW Anywhere (v6) ‍\n# 防火墙把我墙了, 重来! (这里巨坑!不能随便开防火墙否则会把自己关在外面)\n‍\n虚拟机:\n\u0026ldquo;啊!? 你要和我分手?!\u0026rdquo;\n\u0026ldquo;好, 那么好\u0026rdquo;\n\u0026ldquo;\u0026ndash;禁止访问, 因为打开了防火墙\u0026rdquo;\n我: \u0026ldquo;啊!\u0026rdquo;\n‍\n找不到方法, 寄了, 重装咯\n重新来过\n实际上只要直接去创建虚拟机就可以了, 不需要预先配接口\n设置静态专有 IP 和公共 IP 地址 SKLinux-ip\n‍\n‍\n‍\n# Nginx 配置文件 nginx.conf\n‍\n重点\nroot 配置根目录，index 配置入口文件\nlocation / { root /usr/local/front_page/dist; index index.html; } ‍\n‍\n/etc/nginx 目录将目录下原有的 nginx.conf 拷贝一份, 自定义上传;\n加载配置文件\n/usr/sbin/nginx -s reload ‍\n# 文件传输 刚开始一直用不好, 总是穿不上还以为坏了呢\n大佬建议 全文链接\n建立 SSH 连接时，就必须使用 root 用户\n若使用普通用户，即使在其中切换至 root 用户，也无法上传。\n所以重新建立一个 root 用户的连接即可\n大无语, 复制当前已经到了 root 的标签页然后在这个新的标签页上传\u0026hellip;\n‍\n哦哦, 还不能传递到没有权限的地方, 害得放到个人用户目录手动复制过去\n其实最后发现可能和 FinalShell 也有关系, 自己的另一个 MobaShell 就没有毛病\u0026hellip;(也许吧\n‍\n‍\n# 打包前端 ‍\n测试将前端文件打包并放到服务器\nnpm run build 打包生成 dist 文件。\n这里我只有一个文件, 于是直接把 HTML 文件丢进去就好了\n‍\n# 代理配置 ‍\n自己电脑 ping 不到 \u0026ndash; 设在日本服务器当然, 需要设置控制台的代理, 我自己的全局代理不行\n使用好的全局代理访问较快, 反应卡顿大概是线路问题 \u0026ndash;\u0026gt; 很可能不是\n事实上这里我忽略了一个逻辑不能自洽的问题: 为什么通过静态页面能访问(这意味着我直接访问了一台国外的服务器 而没有收到 GFW 的影响, 那么我走 22 端口的 SSH 就没有理由说出问题了\n现在 2024-03-27 通过更换 Clash 配置 VPN 发现, 真正的问题可能出在所谓 TUN 模式(也就是全局模式之上的代理全局应用的玩意), 当时没开, 或者坏了, 导致一直是用裸连, 使得连接延迟很厉害. 当然现在我还是选择香港服务器了, 一方面是国内, 同时也是墙外.\n‍\n‍\n# 11.17Azure 初体验文档 11.17 2023\n‍\n搭建文档 全套开发环境创建\n资费管理 微软 Azure 一年免费 VPS避坑指南\n‍\n无需独立部署各个网络附属资源, 虚拟机会自动创建对应资源(IP, 磁盘, 网络组\u0026hellip;)\n订阅资源（Azure for Students）\n1-1 型号+64GB 乞丐白嫖版, 后续可升级为 2-4 型号\n关闭监视中的诊断服务，以及静态 ip改为动态 ip等降低额度消耗\n‍\n设置项\n‍\n重点\n名称 sklinux\n‍\n使用 SSH 公钥\n‍\n公钥\n用户名 SpadeKXRMP\n秘钥对名称 SpadeKey\n‍\n入站端口增加 80 来服务器访问\n‍\n简单\n无需基础结构冗余\n资源组：自定义名称。\n虚拟机名称：自定义名称。\n区域：可以选择东亚，服务器在香港。\n安全类型：可以选择标准。\n映像：这里选择了 ubuntu\n大小：选择经济型的 B1s 简单使用。\n管理员账户：可使用 SSH 身份验证，那么也需要创建一个自定义的密钥对名称。\n入站端口：默认只开放 22，还可开放 80 用于浏览器访问。\n虚拟网络配置为刚才上面的\n‍\n公共 IP 20.222.38.120 端口 22 FinalShell 连接并使用 Nginx 展示静态页面, 在公网显示\n私有 IP 10.0.0.4 端口 22 使用本机 Powershell 连接(操作不便), 只可双方连接\nssh -i C:\\SpadeKey.pem SpadeKXRMP@10.0.0.4 但是连接不上因为是海外服务器, 尝试用代理? 结果不会用\n但是我没有这样的代理, 虽然自己服务器里面显示允许访问了, 但是自己 WindowsPowershell 还是显示连接超时\n这就是肉身撞墙了, 活该!\n因此还是保留这个公网 IP 罢, 2 天花 0.4 美元, 10 天花 4 美元, 250 天 100$用完.\n那么赶紧把网课看了然后把资源释放掉罢.\n‍\n要申请域名, 然后赶紧关闭了, 否则给干爆了等下\n域名一年免费 Namecheap\nspadektlsg.me\n‍\n可恶不让用. 因为不认识这个大专?!\n‍\n再查看完整链接找找\n‍\nTech 域名\nhttps://get.tech/\n‍\nName 域名\nhttps://www.name.com/zh-cn/\n‍\n算了算了之后准备好让人看了再来\n‍\n‍\n‍\n‍\n‍\n# 11.20 硬盘扩容 - 硬盘爆炸事件 打算使用挂载功能完成扩容\n这不是机会来了嘛, 大数据的数据分析课需要更大的空间了, 分配了新的 20GB, 现在尝试挂载到上面去这边真是十万猴急(汗)\n挂载了, 但是格式化一直失败; 败北!\n‍\n错力, 有反转!!\n尝试命令行但是最后报错了, 挂载到机子上然后用图形化界面解决 \u0026ndash; 使用图形化 CentOS7 的磁盘管理器应用\n‍\n最后的结局是, 在实验报告最后附上了这样的战败宣言:\n(我从来没有在大学的实验报告中发出如此败犬的言论\u0026hellip;现在看来还是感到汗流浃背)\n实验在进行了约 2.5h 后彻底失败, 因为本人电脑收到了物理损害; 由于环境都挂载在本地个人电脑, 而环境一直有问题, 实验宣告结束\n‍\n主要原因: 本实验环境是采用 8 月份[配置的]最新驱动和应用依赖的 CentOS7, 而有些软件因为版本依赖问题导致无法启用; 并且当初划分硬盘空间时没有考虑到大小问题, ==只划了 20GB==, 事实上现在已经使用到了差不多 24GB 的空间, 这导致不可避免的硬盘搭载问题以及安全稳定性问题.\n在多方求援无果后决定放弃实验, 也希望老师能够理解. 鞠躬\n‍\n遗憾离场, 硬盘和所有内容都将释放.(60GB 空间)\n挂载完硬盘我的桌面竟然不能动了? 打字都不行了\n我是再也不敢这么搞了…Soorry. 所幸 Linux 课的这台还没被鼓捣坏了\n‍\n三天后 BE LIKE\n‍\n抓到你了! IDEA MAVEN 硬盘爆炸事件的元凶\n你是敌人吧?\n全部揍一顿, 全部给我滚到回收站!\nMADE IN HAVEN\u0026hellip;\n世 界 清 净 了\n大刀阔斧, 砍回到只剩下 4.5GB 空间的样子, 感觉好 HIGH 哟!\n‍\n‍\n# 11.25 外卖项目搭建大爆炸事件 ‍\n11.25, 完成一个网课的服务端(本地虚拟机)配置主从数据库实现前后端页面挂载, 同时搭配缓存 Redis 组件功能单体项目.\n(采用本地 Linux 服务器, 等待时机成熟了再用远程服务器, 因为服务器在日本不好翻)\n‍\n(新的受害者出现了 -\u0026gt; 黑窗口一号)\n当时我也想在本地尝试一下远程服务器的感觉. 于是创了一个 VMWARE 中完全没有图形化界面的玩意, 结果被所谓响铃搞崩溃了, 太不人性化了, 找什么都要自己配.\n1 小时后:\n寄了, 基础的面板完全划不来: 根本就是一整个烂摊子, 字体稀烂, 补全音效炸裂, 体验下得了.\n还是用我自己的自己测试罢, 克隆两台来作, 不影响上课的机子\n反正在我的辣手摧花下, 容量已经由 17GB -\u0026gt; 4GB 了, 电脑里面基本是空的还有 270GB, 虽然我有很严重的容量焦虑症, 但是这点余裕还是有的\n‍\n磕磕绊绊又回来了, 用 FinalShell 来解决这问题\nDay+3 日早上完成初期环境搭建, 准备完成 MySQL 主从复制.(主从最后没报错但是也没有同步实现, 大概是网络问题)\n‍\n确认 SSH 打开了之后,ifconfig 地址\nFinalshell 直接默认端口 22 即可\n用户使用 root, 密码验证要使用对应 root 用户的账户密码而不是 root 登录密码(旧的图形化 Linux 机子测试)\n‍\n‍\n11.25 在 Mysql 密码验证完全败北\n11.28 卷土重来\n我从地狱回来了,老师!\n‍\n# 初见 瑞吉外卖 - 曼哈顿之试炼\n‍\n‍\n# 限界突破 新的 linux 生产工具-适用于生产端已经完全胜过了老式的教学环境机器\n她于旧的躯体中浴火重生 -\u0026gt; 克隆自 2 天前完成大清洗的 SK 图形化机子, 拥有最舒适的体验\n现在, 是时候将课堂所学应用于项目配置了\n因为我, 不再是那个可怜的花京院\n‍\n‍\n很好, 经过大量的翻阅测试, 找到了适合作为生产环境的空目录:\ncd /usr/etc/\n‍\n之后要在这里创建生产 WorkShop, 将 Win 的生产环境应用过来\n(可恶, 目录要全大写啊混淡,我的 Win 电脑怎么成了这个样子?)(由于暂时没有使用对应功能, 有些层级没有显示)\n目录层级:\n/usr/etc/ |- WORKSHOP |- CODE ...(coding) |- DATA ...(files) |- TOOL ...(software) ‍\n之后的生产环境都在此进行, 不得在所谓个人文件夹运行\n这次是第一次测试, 也是简单的网课部署需求, 因此不要求一步到位.\n之后将使用到确确实实的云服务器上..\n‍\n然后装好了就准备安装, 直接提取装到对应地方, 不要再像之前一样还要拉到对应位置了; 现在要求一步到位\n‍\n采用大佬推荐 echo 指令进行快速末尾添加元素\necho \u0026rsquo; XXX \u0026rsquo; \u0026raquo; /etc/profile\n经典打 java -version 还是 OPENJDK, 当初没做好, 但是在 Hadoop 那边的经验是能定位到 JAVAHOME 是 1.8 就没问题\n特别注意：环境变量值的结尾没有任何符号，不同值之间用:隔开（windows 中用;）\n‍\n注意, rpm 操作中后面的具体版本号不用打出来\nrpm -e --nodeps mariadb-libs ‍\n‍\n# Mysql 老是有依赖问题 - 爆炸了 ‍\n还是试试自己的安装方法吗?\n或者是上次的那个清理缓存给我清理坏了?\n不理解了 yum 也没有反应, 镜像问题\n‍\n解决链接尝试\n‍\n1、将/etc/yum.repos.d/epel.repo​ 中的mirrorlist​ 改为baseurl​\n2//etc/resolv.conf​ 文件中增加nameserver 144.144.144.144​\n依然失败\n‍\n博主链接\n‍\n使用 yum 源信息安装\n# repo的安装，执行完成后会在/etc/yum.repos.d/目录下生成两个repo文件mysql-community.repo mysql-community-source.repo rpm -ivh mysql80-community-release-el7-1.noarch.rpm cd /etc/yum.repos.d/ # 注意：必须进入到/etc/yum.repos.d/目录后再使用yum命令进行安装 yum -y install mysql-server # 如果报错误Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY，加上force和nodeps参数即可 # 例如： rpm -ivh mysql-community-server-8.0.25-1.el8.x86_64.rpm --force --nodeps ‍\n大概 yum 是坏了罢\n‍\n那么跳过数据库罢, Nginx 也跳过, 保存文档之后使用即可\n‍\n任务失败一半(NE)\n‍\n新环境存活时间: 11.25 15:30 -\u0026gt;17:00, 其兴也勃乎.\n‍\n‍\n# 11.28 卷土重来事件 ‍\n2023-11-28 16:56:11\n记录, 主机没有网(指的是我这种特殊的没有网时间)的时候 ens33 网卡会完全找不到,只剩下一个 lo\n‍\n好了, 开始安装内容吧, 按照上面的内容进行操作\n‍\n使用 route 命令查看网关是否设置成功，若下面的显示项出现刚才配置的网关已经出现则说明成功，负责则执行 route add default gw 192.168.91.2 命令重新设置。\n‍\n# 一线生机 × 没有活路 ‍\n# Failed1 我又有鬼点子了\n反正是虚拟机, 本地的也可以被 FinalShell 连接, 那么我就算不去安装 VMTOOL, 直接用 FinalShell 来完成文件和复制黏贴同步不就行了吗?\n这样还能规避 Java(指一个报错)风险, 还能继续用黑框体验\n我真是个​~~天才~~​大蠢蛋! 怎么没想到呢\n‍\n2023-11-27 18:46:20\n装配又一台虚拟机, 准备初步测试\n‍\n首先卸载 JDK!\n然后安装环境\n‍\n什么都没有的情况下, 想要 idconfig 都不行, 只能使用 ip addr, 查看 ens33\n结果连网卡都没有, 哦哦, 看了建议是最小安装也要把最小安装右边的几个选项打勾啊, 不然真的什么都没有\n真的被拷打这里, 真的不能脱离前人优秀的建议自己走, 不然真的翻哪个沟里都不知道\n好吧, 受害者++\n‍\n# Failed2 好吧, 这次要一并把静态 IP 配好, 不然确实没有静态太麻烦了\n‍\n开整: 最小安装, 并且删除声卡 USB 打印机等东西, 尽可能无害化安装\n选择了 ens32, 因为是 NAT 模式\n‍\n很好, 找到感觉了, 机子删除, 好像不小心把内存崩溃检测开了(艹)\n明天再来测试(没电了)\n‍\n# Failed3 虽然病了, 但是战斗还在继续\n‍\n终于发现了一切问题的根源: 本机网络不能使用 NAT 模式, 只能用桥接连接本地 WLAN -\u0026gt; 这是因为我的 Intel 网卡坏了\n大概原因是 Windows 更新异常问题-8.27 日\n‍\n没想到啊,竟然会这样\n‍\n本地的桥接的话, IP 地址是\n硬件地址oo:0C:29:2E:C4:DO IPv4地址192.168.0.117 IPv6地址2409:8a04:5381:b384:2a3c:3996:4038:9e6d/64 子网掩码 255.255.255.0 默认路由192.168.0.1 DNS 192.168.0.1 ‍\n在安装选项中可以看到 IPv4 设置 - 自动 DHCP 等, 可以在这里选择静态\n那么我试试罢\n‍\n好, ping 通了 baidu, 接下来来处理万恶的静态 IP 问题\n‍\n万恶淫为首(这是什么?), 我不要伤亡数字, 我只要静态 IP\n参考\n‍\n首先改一下我的主机名好看些\nhostnamectl set-hostname SKSlave 由于是在 skmaster 操作,因此改为 master\n‍\n找网卡配置文件\nvim /etc/sysconfig/network-scripts/ifcfg-ens32 查找 ifcfg 开头的文件：ll ifcfg*​ 两个文件 ifcfg-lo 为本地网卡的配置文件，127.0.0.1\nvim 编辑器编辑 ifcfg-ens33，命令：vim ifcfg-ens33​\n‍\n我把网关放为 2\nBOOTPROTO=“static” #dhcp改为static ONBOOT=“yes” #开机启用本配置 #配置IP地址信息 IPADDR=192.168.0.117 NETMASK=255.255.255.0 GATEWAY=192.168.0.2 DNS1=192.168.0.2#DNS 配置 DNS2=114.114.114.114 HWADDR=00:0C:29:2E:C4:D0 #MAC地址 从虚拟机管理面板获取 重启网络，命令行：\nservice network restart 114 DNS\n114 DNS 源自南京信风 2010 年为中国电信及中国联通两个大省约 2000 万宽带用户提供备份服务的超大型 DNS 系统，同时提供公众 DNS 解析服务及权威 DNS 解析备份服务，114DNS 将为中国的互联网及电子商务提供可靠的基础安全保障。114DNS 为国内云安全 DNS 服务先行者，114DNS 平台由多个基础电信运营商与南京信风共建共享，但由南京信风提供技术支持以确保服务的优质高效。\nIPv4 DNS 地址：114.114.114.114 / 114.114.115.115\n‍\n学习 DNS 服务 链接\n‍\nGoogle 公共 DNS IP 地址\nGoogle 公共 DNS IP 地址 (IPv4) 如下所示：\n8.8.8.8 8.8.4.4 但是这些都不顶用呢, 不是 VPN\n‍\n重启 NetworkManager\nsystemctl restart NetworkManager ‍\n嗯, 怎么不行呢\nFrom 192.168.0.117 icmp_seq=8 Destination Host Unreachable ‍\n‍\n大神救场\n如果是在 VMware 中使用 Linux，并且使用的是桥接网络，还需要进行一些设置：\nVMWARE-编辑-虚拟网络配置器\n‍\n(我的电脑不能用 NAT?)\n之后试试 NAT 罢\n默认只开启了仅主机、NAT，点击“更改设置”，把桥接加进去。\n使用动态 ip 不需要在这里面添加，使用静态 ip 才需要添加。\n‍\n一下子给我跳出了 VMnet0, 自动桥接\n‍\n‍\n如果机器（主要是笔记本）一会儿连公司的网、一会连家里的网、一会儿连学校的网，一会儿连自己的手机热点，一会儿连这个网，一会儿连那个网，连接的网络变了，需要重新配置上面那些地址，否则连不上网。\n那么我还是寄了\n静态 ip 适合一直使用某个网络的情况，比如服务器，一直使用机房的网。\n‍\n我的建议是使用自习室先; (太傻了, 关机就变了啊喂) 调整了一下自己网络的配置, 好\n‍\n‍\n那么再来试试 NAT 模式罢, 不然针的就做不好了\n来, NAT 模式!启动\n子网IP 192.168.91.0 IP 192.168.91.128 掩码 255.255.255.0 广播 192.168.91.255 网关 192.168.91.2 端口 22 位置MAC 00:50:56:24:51:95 ‍\n‍\nens32\nBOOTPROTO=“static” #dhcp改为static ONBOOT=“yes” #开机启用本配置 #配置IP地址信息 IPADDR=192.168.91.128 NETMASK=255.255.255.0 GATEWAY=192.168.91.2 DNS1=192.168.91.2 #DNS 配置 DNS2=114.114.114.114 HWADDR=00:50:56:25:A8:EB #MAC地址 从虚拟机管理面板获取 service network restart 很好, 接下来没问题了, 还是 NAT 好!\n话说回来, NAT 到底是什么啊?? 憨憨挠头\n‍\n‍\n‍\n接下来压力测试: 是否会在关机以及切换网络情况下导致 IP 变化!\n关机重开 换手机流量 ‍\n‍\n?为什么连接不上了\nNAT 配置静态 IP 后 FinalShell 连接不上\n而且还 ping 不了了?\n全部报废?\n那么看来要改一下了, 应该是桥接换成 NAT 的文件问题\n‍\n‍\n之后修改 IPADDR 的值为上面查到的子网 ip 到 255 的子网（即 192.168.64.0~192.168.64.255,不要选 0 和 255，选择中间的任意一个值，0 和 255 有专门的用途）,GATEWAY 查到的对应的网关,DNS 与网关的值一致。\n‍\n这里坏了\n‍\n感觉还是 SSH 的问题?\n要开启 sshd\nservice sshd start 然后又报错\njava.net.NoRouteToHostException: No route to host: connect 哦哦自己电脑网络掉了, 看来还是自己电脑问题\n‍\n我又彻底明白了,必须要安装时候就选择好 NAT 模式, 大概可以这样\n既然知道了路线, 那么就重新开始罢\n‍\n‍\n‍\n# 帝王是我 SpadeK 哒? NOOOOO! ‍\n‍\nNAT 模式!启动\n‍\nens33 网卡\n子网IP 192.168.91.0 IP 192.168.91.129 掩码 255.255.255.0 广播 192.168.91.255 网关 192.168.91.2 端口 22 位置MAC 00:50:56:25:17:A0 默认路由/DNS: 192.168.91.2 ‍\n这下是从图形界面配置了,输入三项然后保存 NAT 配置, 加上虚拟网络配置器\n好,连接上了\n‍\n最后自己的效果(和网上的文件样子不太一样,自动生成的能测试静态通过就不改了)\n能 ping,能连接 91.129\n‍\n(配置选项好像不用加上 255 那个了)\ninet 192.168.91.129 netmask 255.255.255.0 broadcast 192.168.91.255 ONBOOT=\u0026#34;yes\u0026#34; IPADDR=\u0026#34;192.168.91.129\u0026#34; PREFIX=\u0026#34;24\u0026#34; GATEWAY=\u0026#34;192.168.91.2\u0026#34; DNS1=\u0026#34;192.168.91.2\u0026#34; DNS2=\u0026#34;114.114.114.114\u0026#34; 测试*2\n关机后又连不上了\n‍\n尝试回退所谓 static 设置, 重新加载网络 -\u0026gt; 木大木大木大木大木大木大木大木大\n‍\n# 斩断因果 终于找到了, 是自己禁用了服务!\n就是这个关机上不了网问题!\n就是服务不能在开机后就启动!\n在服务设置开启了, 但是拒绝访问\n网络连接窗口总是崩溃, 该死的问题原来真的在 Win10 这里啊!\n原来是 8 月 25 日被自动禁用了服务项的启动, 本来应该是开机延迟启动的.\n原来之前 9 月使用 NAT 连不上网都是这样, 因为内置的 NAT 没法获得网络\n我真想回去给 8.25 的自己抽几个大嘴巴子\n‍\n好,现在可以准备冲击 MYSQL 了, 主要问题就是依赖和安装包的问题\n‍\n‍\n# 11.29 瑞吉斩杀 ‍\n从和当前黑窗子 Linux 正式交互以来的笔记\n‍\n# 打包运行测试 打一个 HelloworldServer 基础 Jar 包给 linux\n‍\nServer.java (by - newbing)\n// 导入必要的类和包 import java.io.*; import java.net.*; // 定义一个类，实现Runnable接口，用于处理客户端的请求 class ServerHandler implements Runnable { // 定义一个Socket对象，用于和客户端通信 private Socket socket; // 定义一个构造方法，接收一个Socket对象作为参数 public ServerHandler(Socket socket) { this.socket = socket; } // 重写run方法，实现业务逻辑 public void run() { try { // 获取输入流，用于读取客户端发送的数据 BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream())); // 获取输出流，用于向客户端发送数据 PrintWriter out = new PrintWriter(socket.getOutputStream(), true); // 读取客户端发送的一行数据 String line = in.readLine(); // 打印客户端发送的数据 System.out.println(\u0026#34;Received from client: \u0026#34; + line); // 向客户端发送HelloWorld out.println(\u0026#34;HelloWorld\u0026#34;); // 关闭输入流、输出流和Socket对象 in.close(); out.close(); socket.close(); } catch (IOException e) { // 处理异常 e.printStackTrace(); } } } // 定义一个主类，用于启动服务器 public class Server { // 定义一个常量，表示服务器端口号 public static final int PORT = 8080; // 定义一个主方法，用于启动服务器 public static void main(String[] args) { try { // 创建一个ServerSocket对象，监听指定的端口号 ServerSocket serverSocket = new ServerSocket(PORT); // 打印服务器启动信息 System.out.println(\u0026#34;Server started at port \u0026#34; + PORT); // 无限循环，等待客户端的连接 while (true) { // 接受客户端的连接，返回一个Socket对象 Socket socket = serverSocket.accept(); // 打印客户端的地址和端口号 System.out.println(\u0026#34;Connected to client: \u0026#34; + socket.getInetAddress() + \u0026#34;:\u0026#34; + socket.getPort()); // 创建一个ServerHandler对象，传入Socket对象 ServerHandler handler = new ServerHandler(socket); // 创建一个线程，执行ServerHandler对象的run方法 Thread thread = new Thread(handler); // 启动线程 thread.start(); } } catch (IOException e) { // 处理异常 e.printStackTrace(); } } } ‍\n然后传到 CODE-TEMP 目录下 执行\njavac Server.java ‍\n生成 class 文件\n-rw-r--r--. 1 root root 1332 11月 29 15:11 Server.class -rw-r--r--. 1 root root 1278 11月 29 15:11 ServerHandler.class -rw-r--r--. 1 root root 2780 11月 29 15:03 Server.java ‍\n然后运行\njar cvf Server.jar Server.class 生成了 jar 包\n将 jar 包运行\njava -jar Server.jar ‍\n报错\n​java -jar Server.jar​ Server.jar 中没有主清单属性\n要解决这个错误，您有两种方法：\n‍\n方法一：您可以手动创建或修改 MANIFEST.MF 文件，添加或修改 Main-Class 属性，指定您的主类的全限定名，例如 Main-Class: com.example.Server。然后，您可以使用压缩工具将这个文件替换或添加到您的 Server.jar 文件中。这样，您就可以使用 java -jar Server.jar 命令来运行您的程序了。\n方法二：您可以使用 Maven 或其他的构建工具来自动创建或修改 MANIFEST.MF 文件，添加或修改 Main-Class 属性，指定您的主类的全限定名，例如 Main-Class: com.example.Server。然后，您可以使用 Maven 或其他的构建工具来重新打包您的 Server.jar 文件。这样，您就可以使用 java -jar Server.jar 命令来运行您的程序了。\n‍\n‍\n其他就是设置后台了, 不能独占屏幕 no hang up\nnohup java -jar boot工程.jar \u0026amp;\u0026gt; hello.log \u0026amp; 后台运行java -jar命令,并将日志输出到hello.log文件 查找进程 ps -ef|grep XXX ‍\n‍\n# Redis 测试 ‍\nRedis 启动两个连接, 第一个开启 Redis\nredis-server ‍\n第二个启用客户端进行连接\nredis-cli ‍\n连接到了本地\n‍\n测试\nkeys \\* 查看当前存储的 keyvalue 对\n成功\n‍\n# MYSQL 主从复制 ‍\n当前装好的 Master 复制\n‍\n新的 IP 怎么和旧的一样? 哦,是一块连接卡片啊, 那么就要手动控制分配了\n主机固定一个 IP, 从机从 129 开始分配比较好吗, 要测试一下\nvim /etc/sysconfig/network-scripts/ifcfg-ens33 ‍\n主网卡配置\nTYPE=\u0026#34;Ethernet\u0026#34; PROXY_METHOD=\u0026#34;none\u0026#34; BROWSER_ONLY=\u0026#34;no\u0026#34; BOOTPROTO=\u0026#34;static\u0026#34; DEFROUTE=\u0026#34;yes\u0026#34; IPV4_FAILURE_FATAL=\u0026#34;no\u0026#34; IPV6INIT=\u0026#34;no\u0026#34; IPV6_AUTOCONF=\u0026#34;yes\u0026#34; IPV6_DEFROUTE=\u0026#34;yes\u0026#34; IPV6_FAILURE_FATAL=\u0026#34;no\u0026#34; IPV6_ADDR_GEN_MODE=\u0026#34;stable-privacy\u0026#34; NAME=\u0026#34;ens33\u0026#34; UUID=\u0026#34;0d6610c3-9310-4ab0-bd2d-e4a3a50f6e34\u0026#34; DEVICE=\u0026#34;ens33\u0026#34; ONBOOT=\u0026#34;yes\u0026#34; IPADDR=\u0026#34;192.168.91.129\u0026#34; PREFIX=\u0026#34;24\u0026#34; GATEWAY=\u0026#34;192.168.91.2\u0026#34; DNS1=\u0026#34;192.168.91.2\u0026#34; DNS2=\u0026#34;114.114.114.114\u0026#34; ZONE=public ‍\nSlave 网卡配置同上, 就是 MAC 地址不同\nIP 改为 130\n好的,连接上了两者\n‍\n修改主库\n修改 MySQL 数据库的配置文件\n/etc/my.cnf ‍\n主机\nlog_bin=mysql-bin #[必须]启用二进制日志 server-id=128 #[必须]服务器唯一ID,只需要确保其id是唯一的就好 ‍\n‍\n# 密码不合规 Failed ‍\n查看需要的规定\nSHOW VARIABLES LIKE \u0026#39;validate_password%\u0026#39;; 修改\nset global validate_password_policy=0; set global validate_password_length=1; ‍\n不行啊, 这里主库没有显示自己是主库, 还是按照黑马的自己教程来吧\n‍\n‍\n2023-11-29 16:55:35 工作暂停\n‍\n‍\n先把主机的状态保存了, 之后项目可以用到\n这样又到了三台机子共存的状态了, 可恶\n‍\n大佬教程\n‍\n网上介绍的方法大都是使用 grant 权限列表 on 数据库 to ‘用户名’@’访问主机’ identified by ‘密码’;这种方式，但实测会出现……near \u0026lsquo;identified by 密码\u0026rsquo; at line 1 这个错误！\n经分析，出错的原因是新版的的 mysql 版本已经将创建账户和赋予权限的方式分开了，所以应该使用上面的方法\n‍\n确实是这样\n那么试试这种配置方式\ncreate user \u0026#39;slave\u0026#39;@\u0026#39;192.168.91.130\u0026#39; identified by \u0026#39;2333\u0026#39;; # 赋予replication slave权限，但在使用从库的数据时，还是要使用有read权限的账号 grant replication slave on *.* to \u0026#39;slave\u0026#39;@\u0026#39;192.168.91.130\u0026#39;; flush privileges; ‍\n又来!\nYour password does not satisfy the current policy requirements 看老子怎么拷打你\nSHOW VARIABLES LIKE \u0026#39;validate_password%\u0026#39;; ‍\n然后调整我们的设置项\nset global validate_password_policy=LOW; set global validate_password_length=3; set global validate_password_mixed_case_count=0; set global validate_password_special_char_count=0; ‍\n这下允许访问了\n‍\n当前可用测试账号\nKyle root\nSlave 2333\n‍\n然后就没有权限了, 两个都需要给与而外的权限给予操作\ngrant process on *.* to 数据库用户名; ‍\n刷新权限\nflush privileges; ‍\n查看权限列表\nshow processlist; ‍\n重启服务\nsystemctl restart mysqld ‍\n还是不行, 看来是授权问题\ngrant replication slave on *.* to \u0026#39;xiaoming\u0026#39;@\u0026#39;%\u0026#39; identified by \u0026#39;root@2333\u0026#39;; ‍\nvalidate_password_policy 取值\n0 or LOW 只验证长度 1 or MEDIUM 验证长度、数字、大小写、特殊字符 2 or STRONG 验证长度、数字、大小写、特殊字符、字典文件 再次执行修改密码语句\nALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;2333\u0026#39;; ‍\nok 最后没有实现的原因是把修改内容修改到 Slave 机子上了\n‍\n结果竟然 mysql 打不开了\n好, mysql 崩溃, 实验结束\n‍\n‍\n# 拍屁股 此次完全完成了两台机子的搭配, 但是最后 mysql 又发电做不了了\n‍\nOK, 那么保存第一台机子主从配置前的状态, 走人了\u0026hellip;后面的等到苍穹结束了有一样的训练过程\n‍\n‍\n查看所有用户\nSELECT User FROM mysql.user 删除中间用户\ndelete from user where User=\u0026#39;test\u0026#39; 保存走人了之后, 溜了溜了\n‍\n‍\n# 阴差阳错 ‍\n绝对的阴差阳错, 上面的绝对的最神奇的报错\n‍\n又来了, 照着黑马打\ngrant replication slave on *.* to \u0026#39;xiaoming\u0026#39;@\u0026#39;%\u0026#39; identified by \u0026#39;root@2333\u0026#39;; 结果是用了删除克隆虚拟机来解决了\n------------------+----------+--------------+------------------+-------------------+ | File | Position | Binlog\\_Do\\_DB | Binlog\\_Ignore\\_DB | Executed\\_Gtid\\_Set | +------------------+----------+--------------+------------------+-------------------+ | mysql-bin.000002 | 441 | | | | 虽然最后也没能完全复现, 就是没报错也没有最后一样的结果, 还是那里错了.\n位置是 441\n必须保证这个时候是开着的\n‍\n‍\n现在去从库, 仍然是修改 etc/my.文件\n然后 mysqld 下面\nserver-id=101 systemctl restart mysqld ‍\n发一条语句, 改两个地方 : 日志位置 和 Position\nchange master to master_host= \u0026#39;192.168.91.129\u0026#39; , master_user= \u0026#39;xiaoming\u0026#39; , master_password=\u0026#39;Root@123456\u0026#39;,master_log_file= \u0026#39;mysql-bin.000002\u0026#39; ,master_log_pos=441; start slave ‍\nshow slave status; ‍\n效果\n‍\nSlave_IO_State | Master_Host | Master_User | Master_Port | Connect_Retry | Master_Log_File | Read_Master_Log_Pos | Relay_Log_File Connecting to master | 192.168.91.129 | xiaoming | 3306 | 60 | mysql-bin.000002 | 441 | SKMaster-relay-bin.000001 ‍\n‍\n完成了! 没有报错, 一切正常(?\n‍\n‍\n# 冀中寄 ‍\n现在导入数据库到服务器主库\n嗯? 无法配置, 明明没有报错了啊\n‍\n网上教程说要手动同步, 这不是没意义了嘛\n同步主库已有数据到从库\n‍\n‍\n# 主从配置总结 ‍\n主库配置\n进入配置文件\nvim /etc/my.cnf 添加两行\nlog-bin=mysql-bin #开启二进制日志\nserver-id=201 #设置 server-id,唯一值，标识主机 重启服务\nservice mysql restart 创建账号密码\n进入 mysql\nmysql -u root -p\n创建用户（IP 为可访问该 master 的 IP，任意 IP 就写\u0026rsquo;%\u0026rsquo;）\nCREATE USER \u0026lsquo;slave*userid\u0026rsquo;@\u0026rsquo;%\u0026rsquo; IDENTIFIED BY \u0026lsquo;slave_pwd\u0026rsquo;;\n查看用户是否创建成功\nselect user,host from mysql.user;\n分配权限（IP 为可访问该 master 的 IP，任意 IP 就写\u0026rsquo;%\u0026rsquo;）\nGRANT REPLICATION SLAVE ON *._ TO \u0026lsquo;slave_userid\u0026rsquo;@\u0026rsquo;%\u0026rsquo;; 刷新权限\nflush privileges; 查看 master 状态，记录二进制文件名 File 和位置 Position,后面配从库要用\nshow master status; ‍\n从库配置\n进入配置文件\nvim /etc/my.cnf 添加一行\nserver-id=202 #设置 server-id,唯一值，标识主机 重启服务\nservice mysql restart 登录进入 mysql，执行同步 sql 语句（主服务器名，用于主从的用户名，密码，二进制文件名，位置）\nmysql -u root -p CHANGE MASTER TO MASTER_HOST=\u0026#39;192.168.0.201\u0026#39;, MASTER_USER=\u0026#39;slave_userid\u0026#39;, MASTER_PASSWORD=\u0026#39;slave_pwd\u0026#39;, MASTER_LOG_FILE=\u0026#39;mysql-bin.000001\u0026#39;, MASTER_LOG_POS=755; 启动 slave 同步进程\nstart slave; 查看 slave 状态，当 Slave_IO_Running 和 Slave_SQL_Running 都为 YES 的时候就表示主从同步设置成功了\nshow slave status\\G 可以改数据验证同步，可以 stop slave;执行看看效果 其他\n不同步哪些数据库\nbinlog-ignore-db = mysql\nbinlog-ignore-db = test\nbinlog-ignore-db = information_schema\n只同步哪些数据库，除此之外，其他不同步\nbinlog-do-db = game ‍\n‍\n# 跑项目 ‍\n确实是可以了, 那么就跳过这一步, 手动同步一下\n‍\n项目跑起来了, 但是找不到 redis, 哦每次都要手动开\n‍\nRedis 启动\nredis-server /usr/etc/WORKSHOP/TOOL/redis-4.0.0/redis.conf ‍\n‍\n# 日志综合 ‍\n我又回来了, 虽然发烧了但是工作仍要继续\n我找到问题的根源了, 我的一个 VMware 服务项被自己禁用掉了(8 月份误操作)\n导致连接出问题\n于是又把打包好的工程拆开, 然后建立 Master 机环境\n‍\n调试 Redis 完毕, 主从同步没有问题配好了但是同步不起来, 手动同步(嘿咻)\n‍\n登录页面\n管理端 + 手机应用端\nhttp://localhost:8080/backend/page/login/login.html\nhttp://localhost:8080/front/page/login.html\n接下来将项目部署到服务器测试\n‍\n14 号整理文件等, 然后 22 号开始跟着做, 22,23,24 三天打完并且记录了(因为有 Linux 和 Git 基础,中间的很快)\n25 今天下午本来能全部都解决的, 结果还是被自己机子的问题给搞麻了.\n虚拟机有问题, 只能等着 1 月份回去了重装后解决了\n或许就就这样鸽了罢\n\u0026hellip;\n3 天,差不多总共 24 小时的工时就可以了.\n余下的记录在笔记本之后参考部署\nPause reason : VMware Fail! MYSQL kept screaming!\nI can\u0026rsquo;t stand it any more\u0026hellip;\nSo I push the delete button to sentence its death\u0026hellip;\n‍\n‍\n# Nginx 跳过 接下来是 Nginx\n不用看了, 后面一起来\n‍\n# 总结 总结环节了\n‍\n真的是, 今天一打开, IP 没问题, 但是 Finalshell 又连不上了\n就是自己电脑垃圾网卡的问题, 网络太差了\u0026hellip;\n每次都要手动开启一下 redis, 连开机自启都不想去配的混蛋!\n没错, 就是这家伙\n‍\n‍\n‍\n# 11.30 苍穹后续拯救 最后想想还是不救了, 后面用云服务器+Docker 自己配\n‍\n‍\n# 12 月项目结合演练 + 拐棍计划 ‍\n# 12.05 NewPublicIP 课堂展示 ‍\n开 IP 用来课程展示\nIP - 动态\n20.43.78.101 希望不要扣钱\n‍\n使用\nwhereis nginx 查找忘记了地方的 nginx 目录\n找到配置文件, 然后定位目录\n转移新的文件过去\n这里层级配置的有问题\nroot /usr/share/nginx/html; location / { root /usr/local/front_page/dist; index index.html; } 只是一个小插曲, 不要在意\n‍\n‍\n# 12.25 服务器拐棍 Linux 装配 Record 12.25(2023) 开始的拐棍计划\n‍\n由于苦恼于本地 VMware 太流氓, 而且 Mysql 又吃资源, 并且后面需要\u0026hellip; redis 也能用 IDEA 访问了\n接下来是暂时在大陆安装一台能访问的虚拟机, 位置选东亚, 准备执行拐棍计划.\n‍\n‍\n# 连接 从我本地 ping 这台机子还是 ping 不上吗, 尝试解决: 哦, 是微软本身为了安全而关闭的\n‍\n既然是拐棍机子, 需要安装两个数据库(redis 和 Mysql), 于是用新学的 Docker 去找合适镜像安装基础生产环境\n博客园参考\n‍\n加入普通用户\nsudo usermod -aG docker $USER 记得设置 root 密码\nsudo passwd root ‍\n# JDK ubantu 配 JDK 环境\n‍\nsudo apt install openjdk-17-jdk ‍\n找到 OpenJDK 17 的安装路径。\n使用 update-alternatives 命令来查找\nsudo update-alternatives --list java 复制对应于 OpenJDK 17 的路径。\nvim ~/.bashrc 在文件末尾添加以下行，但不要忘记将 /path/to/your/openjdk-17 替换为实际的路径。\nexport JAVA_HOME=/path/to/your/openjdk-17 ‍\n# Docker 映像 image 装配\n先装 mysql 与 redis\n‍\n# Redis 个人手册+博客 Link\n‍\n暂时不使用数据券\ndocker pull redis ‍\n# 目录 创建 redis 管理目录，方便后期管理\nmkdir -p /usr/etc/WORKSHOP/TOOL/redis mkdir -p /usr/etc/WORKSHOP/TOOL/redis/data ‍\n# 搭载 注：解析-p 6379:6379，-p 端口：映射端口；为了好看所以做了换行，执行的时候还是需要改成一行，每行一个空格隔开就可以了;\ndocker run -p 6379:6379 --name redis -v /usr/etc/WORKSHOP/TOOL/redis/redis.conf:/etc/redis/redis.conf -v /usr/etc/WORKSHOP/TOOL/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes docker run -p 6379:6379 --name redis -v /usr/etc/WORKSHOP/TOOL/redis/redis.conf:/etc/redis/redis.conf -v /usr/etc/WORKSHOP/TOOL/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes ‍\n参数解释\n-p 6379:6379 #把容器内的6379端口映射到宿主机6379端口 -v /data/redis/redis.conf:/etc/redis/redis.conf#把宿主机配置好的redis.conf放到容器内的这个位置中 -v /data/redis/data:/data#把redis持久化的数据在宿主机内显示，做数据备份 redis-server /etc/redis/redis.conf#这个是关键配置，让redis不是无配置启动，而是按照这个redis.conf的配置启动 –appendonly yes #redis启动后数据持久化 ‍\n# 验证 命令：docker ps ‍\n# 测试 # 进入的时候可以写容器名或者容器ID，redis是我的容器名 docker exec -it redis /bin/bash # 进入redis 容器 redis-cli # 执行客户端命令 127.0.0.1:6379\u0026gt; set test 1 # 存数据测试 OK 127.0.0.1:6379\u0026gt; get test # 取数据测试 \u0026#34;1\u0026#34; ‍\n# 连接 ‍\n修改密码\n设置密码：config set requirepass 2333\n连接 redis，认证：auth 2333\n‍\n本地使用 IDEA 内置插件连接\n‍\n‍\n# Mysql ‍\n创建并运行新 mysql 容器，挂载本地目录\n这里作了简化, 无需手动创建目录, cd 到对应目录之后即可进行创建\n‍\n# 搭载 docker run -d \\ --name mysql \\ -p 3306:3306 \\ -e TZ=Asia/Shanghai \\ -e MYSQL_ROOT_PASSWORD=2333 \\ -v ./mysql/data:/var/lib/mysql \\ -v ./mysql/conf:/etc/mysql/conf.d \\ -v ./mysql/init:/docker-entrypoint-initdb.d \\ mysql ‍\n# 测试 ‍\n进入容器，并通过账号 root 查看 MySQL 服务能否正常连接\ndocker ps docker exec -it mysql /bin/bash mysql -h localhost -u root -p ‍\n‍\n‍\n# 维护 ‍\n需要在 Azure 管理界面开放入站和出站端口 3306\n内存快要吃饱了, 因此只能到此为止: 看来真的是太逊了, 两个开起来就把内存 CPU 吃爆炸了无法响应(还要加上 Docker 的配置), 看来要换 2GB 内存的家伙咯\n‍\n# 快捷调用 ‍\n# 地址 20.255.94.176 ‍\n# redis -default -2333 docker exec -it redis /bin/bash jdbc:redis://20.255.94.176:6379/12 ‍\n‍\n# mysql -root -2333 docker exec -it mysql /bin/bash jdbc:mysql://20.255.94.176:3306/ ‍\n# Docker 管理 ‍\n查看当前状态\ndocker ps ‍\n重启镜像\n停止全部容器 docker stop $(docker ps -aq) 启动所有容器 docker start $(docker ps -aq) docker restart mysql docker restart redis ‍\n# 问题 目前内存占用过大, 需要后面调整内存分配. 要不还是自己配试试内存大小罢\n‍\n‍\n# 12.28 拐棍二号白嫖 - 败北 ‍\n升级链接, 单核的也不行, 经常跑满, 2GB 也可能吃到一半, 还是直接扩充到 2 核 4GB 为好\n5,500 日元 = 38.567057 美元 , 一个月直接吃 40 刀乐, 两个月半直接用光额度, 不行不行, 白嫖失败咯\n还是用免费的然后自己配罢. 就用基础的装配方法, 从头来一遍看看内存占用. 肯定是比 Docker 少的罢\n好像可以设置吃的资源? 等验证不行了再来试试\n使用了扩展功能, 重启一下就能重置大小了, 现在是 2 核 4GB\n没用了之后再转换回来\n‍\n那么接下来重装之后最小手动安装 Mysql 和 Redis 尝试, 降低内存占用\n手动装 Redis 先跑跑, 这个不能装在本地因此必须要装在虚拟机, 看看效果\n版本选择黑马推荐的老版本\n‍\n# IP 爆炸 感觉有问题了\n一直连不上, 使用故障排除?\n啊这, 这稳定性也太差了罢. 香港应该没有什么墙的事情罢\n又得全部删了重来, 大概是公有 IP 必须是自己创建的罢\n对, 必须把原来的公有 IP 删除后立刻填入自己新建的, 让它来不及反应才行\n‍\n# 12.29 拐棍三号 ‍\n# Mysql Ubantu 装这个 Mysql\n‍\napt install mysql-server ‍\n‍\n# Redis sudo apt update sudo apt install redis service redis start 自启动\nsystemctl enable redis-server.service ‍\n进入控制台设置密码\nredis-cli config set requirepass 2333 ‍\n查看自己的用户名\nredis-cli CLIENT LIST ‍\n# 连接问题 天内怎么又连接不上了, 是什么毛病?\n大概是我的梯子问题, 这两天网络和 VPN 问题太大了??\n哦哦, 原来是刚才为了开服务, 打开了网络管理器, 然后它就把基础的 SSH 22 端口 和 HTTP 80 端口给覆盖了, 这下就连接不上了嘛\u0026hellip;\n说到底是自己太呆了\n‍\n‍\n# 找不到远程问题 然后解决找不到远程问题, 是要改配置文件\n那么去改\nwhereis redis.conf 在 vim 命令模式下键入“/protected-mode\u0026quot;回车进行搜索 protected-mode 关键字，按“n\u0026quot;查找下一个\nyes -\u0026gt; no\n‍\n搜索 bind 关键字，找到如图配置项，在 bind 前面加上“#”将当前行注释（或者改为你的主机 ip）\n‍\n修改密码——搜索 requirepass 关键字，找到如下配置，按 i 进入输入模式，requirepass 空格后面就是要设置的密码\nredis-server /etc/redis/redis.conf 然后重启服务即可\n‍\n# 用户名被拒绝问题 公钥又不对了, 该死, 用自己的密码罢\n这个时候修改用户名, 不修改密码也能连上了\n‍\n‍\n# MYSQL 版本 8.0.35 针对性处理 ‍\nmysql-server 和 mysql-client 区别\nmysql-server 是 MySQL 核心程序将安装 MySQL 数据库服务器，用于生成管理多个数据库实例，持久保存数据并为其提供查询接口（SQL），供不同客户端调用。\nmysql-client 是操作数据库实例的工具，允许连接到 MySQL 服务器使用该查询接口。它将为您提供 MySQL 命令行程序。\n如果只需要连接到远程服务器并运行查询，只安装 mysql-client 就可以了。如果是服务器只提供连接服务的只需要安装 mysql-server\n‍\n链接 1\n链接 12\n链接 123\n‍\n自启动\nservice mysql enable ‍\n记录, 这边发现了问题: 只有在使用 root 用户登录的时候才能进入, 否则无法进入\nmysql\u0026gt; use mysql; #开启远程连接 update user set host=\u0026#39;%\u0026#39; where user=\u0026#39;root\u0026#39;; #修改了之后刷新以下权限 flush privileges; #修改数据库密码. ALTER USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; identified with mysql_native_password BY \u0026#39;2333\u0026#39;; #修改了之后刷新以下权限 flush privileges; #退出数据库 quit; ‍\n正常使用 mysql -u root -p 然后输入密码已经可以正常进入 mysql.\n从 root 退出到 spadek 普通用户: 直接 exit\n确认可以, 就是说用默认用户连接进来已经可以了\n‍\n# 连接不上数据库? 解决 Navicat 连接不上数据库的问题\n‍\n配置远程连接\nvi /etc/mysql/mysql.conf.d/mysqld.cnf 找到 bind-address,把 127.0.0.1 修改成 0.0.0.0, 把两个地址全部注释了也行\n‍\n‍\n‍\n# 12.30 新机子小水管拐棍三号-改 - 运转中 使用 Mysql + Redis 手动配置, 因为没有 Docker, 内存没有爆炸.\nCPU 单核小水管, 很慢, 内存只剩下 0.09GB, 也就是 90MB 剩余了, 一旦处理大的环境就需要立刻转移到大架构, 大架构最长支撑 3 个月.\n综合来看, 这个体系能够撑 6 个月时间, 也就是到找实习的时候已经用上了\n重新启动不会把 IP 弄掉, 因此出问题了重启即可\n‍\n‍\n‍\n# 连接参数 ‍\n# Redis 空用户 2333\njdbc:redis://XXX:6379/12 ‍\n# Mysql root 2333\njdbc:mysql://XXX:3306/ ‍\n‍\n‍\n# 3 月复健 ‍\n# 3.26LinuxVMware 教程配置 我不用本地虚拟机了, 因此不使用\n‍\n# 安装 VMware VMware 是业界最好用的虚拟机软件之一。\nwindows 版本的网站\n‍\n特别注意，Windows10 以上版本操作系统需要下载安装 VMware Workstation Pro16 及以上版本，安装方式此处略。\n如果自己电脑上已经有了低版本的 VMware，则需要先卸载，再重新安装。卸载过程比较麻烦\n‍\n‍\n# 卸载旧版 VMware（可选） 首先，在控制面板找到程序和功能选项，找到 VMware，进行卸载操作：\n‍\n卸载完成后，还需要看看 VMware 的安装目录是否有旧数据，一并清理掉。\n比如安装在C 盘的 Program Files(x86) ：\n接下来要清理注册表：\n首先，按住 Windows + R , 在弹出框中输入 \u0026ldquo;regedit\u0026rdquo; 调出注册表：\n进入注册表编辑器，如图：\n打开**HKEY_CURRENT_USER​ 文件夹，找到Software**​ 文件夹并打开\n找到“VMware.Inc”，右键删除：\n‍\n# 安装 Linux 发行版 Centos7 是比较常用的一个 Linux 发行版本\n老外的下载站 新 CentOS7iso 文件网址\nCentoS-7-x86_64-Minimal-2009.iso 我去, 我原来的要 4.1G! 这不狠狠下载!\n‍\n# 组装 在网络页面做下面的几件事情：\n修改主机名为自己喜欢的主机名，不要出现中文和特殊字符，建议用 localhost 点击应用 将网络连接打开 点击配置，设置详细网络信息 接下来的配置要参考：\n点击配置按钮后，我们需要把网卡地址改为静态 IP，这样可以避免每次启动虚拟机 IP 都变化。所有配置照搬你自己截图的网络信息填写，不要照抄我的：\n上图中的四个信息参考之前的以太网(ens33)网卡的截图，不要照搬我的来写。\n‍\n# 设置虚拟机快照 在虚拟机安装完成后，最好立刻设置一个快照，这样一旦将来虚拟机出现问题，可以快速恢复。\n我们先停止虚拟机，点击 VMware 顶部菜单中的暂停​**下拉选框**​，选择关闭客户机​：\n‍\n‍\n# 网络模式 ‍\n# 桥接 在网络网卡上安装了一个桥接协议，让这块网卡处于混杂模式，可以同时连接多个网络的做法。\n桥接下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样放在这个交换机当中，所以所有桥接下网卡与网卡都是交换模式的，相互可以访问而不干扰。\n‍\n# Host-only （仅与主机通信）\n虚拟机使用 VMnet1 网卡与主机单独组网,主机对于虚拟机相当于路由器\n‍\n# NAT 虚拟机使用 VMnet8 网卡与主机单独组网,主机对于虚拟机相当于路由器，VMnet8 网卡通过 NAT 地址转换协议与物理机网卡通信\n‍\n‍\n# 3.28 完全复健后云资源(服务器等)下一步计划 自己的服务器直接用 Docker 快速装配即可, 不用去鼓捣手动装了. 因此不能再用小水管 1 核 1GB 玩意了.\n首先升级当前微软配置, 等到三个月后配额用完了直接趁 618 购买国内服务器提供小水管服务. 而后静态页面等需求我不打算另外的公开博客, 因此对于 GFW 外的服务器暂时没有需求.\nOSS 也一样, 项目开写时直接购买\n‍\nMay. 6th, 2024, hide secret key pairs\n","permalink":"https://spadektlsg.github.io/p/linux%E6%97%A7%E6%97%A5%E4%B8%AA%E4%BA%BA%E7%BB%83%E4%B9%A0%E8%AE%B0%E5%BD%95/","tags":[],"title":"Linux旧日个人练习记录"},{"categories":[],"contents":"\u0026ndash; 精心烘焙的 Linux 指令手册\n‍\n已经导出, 不会进行更新维护\n# Header 主要应付学业使用, 提取内容到独立文档后封存 2024-03-27 原味导出\n改编自\u0026lt;决战 linux 之巅\u0026gt;的总结, 原文CSDN\n‍\n什么, 问我为什么要加上\u0026quot;原味抹茶珍珠\u0026quot;? 这是因为文章是原味的(个人笔记原装, 还热乎), 内容是抹茶味的(我吃吃吃!), 我读起来是要掉小珍珠的(太惨了, OTZ 被利尼克斯拷打的太惨了) ‍\n# 知识 ‍\n# 版本 ‍\n# 内核版本 内核(kernel)是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层。\nLinux 内核版本又分为稳定版和开发版，两种版本是相互关联，相互循环：\n‍\n稳定版：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些 bug 或加入一些新的驱动程序。\n开发版：由于要试验各种解决方案，所以变化很快。\n内核源码网址：http://www.kernel.org 所有来自全世界的对 Linux 源码的修改最终都会汇总到这个网站，由 Linus 领导的开源社区对其进行甄别和修改最终决定是否进入到 Linux 主线内核源码中。\n‍\n# 发行版本 Linux 发行版 (也被叫做 GNU/Linux 发行版) 通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件。\n目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、 SolusOS 等。\n‍\n‍\n# Linux 目录 ‍\n/ -\u0026gt; /root -\u0026gt; /bin -\u0026gt; /boot .... ​​\n/：根目录，一般根目录下只存放目录，在 Linux 下有且只有一个根目录。所有的东西都是从这里开始。当你在终端里输入“/home”，你其实是在告诉电脑，先从/（根目录）开始，再进入到 home 目录。\n‍\n/bin: /usr/bin: 可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等。\n/boot：放置 linux 系统启动时用到的一些文件，如 Linux 的内核文件：/boot/vmlinuz，系统引导管理器：/boot/grub。\n/dev：存放 linux 系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱 mount /dev/cdrom /mnt。\n/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d。\n‍\n/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，~​ 表示当前用户的家目录~， ~​~edu​ 表示用户 edu 的家目录。\n/lib: /usr/lib: /usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。\n/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下。\n‍\n/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载。\n/opt：给主机额外安装软件所摆放的目录。\n/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等。\n‍\n/root：系统管理员 root 的家目录。\n/sbin: /usr/sbin: /usr/local/sbin：放置系统管理员使用的可执行命令，如 fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root 使用的命令，一般用户只能\u0026quot;查看\u0026quot;而不能设置和使用。\n/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下。\n/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内。\n‍\n/usr：应用程序存放目录，/usr/bin 存放应用程序，/usr/share 存放共享数据，/usr/lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local: 存放软件升级包。/usr/share/doc: 系统说明文件存放目录。/usr/share/man: 程序说明文件存放目录。\n/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件 /var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其 PID 存放在该目录下。\n‍\nbin：存放常见可执行命令，链接指向usr/bin sbin：系统级的可执行命令。root可使用的命令，链接指向usr/sbin lib：系统所需要的共享库文件，相当于win中的dll lib64：64位相关的库文件 boot：系统启动引导内容 dev：硬件设备管理文件 etc：系统管理所需要的配置文件和其子目录 home：每个用户子目录的存放点 root：系统管理员（root用户）的主目录 opt：可选目录，给第三方软件提供的位置，第三方软件安装位置 media：识别一些可移动媒体设备（u盘，光驱） mnt：移动化存储设备的另一个挂载点，和media相似 proc：进程目录，存放进程的映射 run：存放到目前为止的所有运行信息 srv：存放和系统服务相关的内容 sys：系统硬件信息相关的文件 tmp：临时目录，随意存放 usr：存放了应用程序和用户相关的数据和文件 var：可变目录，经常会修改的内容（日志等） ‍\n# 用户目录 位于/home/user，称之为用户工作目录或家目录,表示方式：\n/home/user ~ ‍\n每个目录下都有.和..\n. 表示当前目录\n.. 表示上一级目录，即父目录\n根目录下的.和..都表示当前目录\n‍\n文件的颜色 含义 蓝色 目录 绿色 可执行文件 红色 压缩文件 浅蓝色 链接文件 灰色 其他文件 ‍\n# 启动过程 ‍\n内核的引导 运行 init 系统初始化 建立终端 用户登录系统 ‍\n‍\n# 加载内核 ‍\n当计算机打开电源后，首先是 BIOS 开机自检，按照 BIOS 中设置的启动设备（通常是硬盘）来启动。\n操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。\n‍\n# 启动初始化进程 init ‍\n内核文件加载以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境\ninit 程序首先是需要读取配置文件/etc/inittab\n‍\nCentOS 各版本 init 配置文件的位置：\nSysV: init, CentOS 5 之前, 配置文件： /etc/inittab。\nUpstart: init,CentOS 6, 配置文件： /etc/inittab, /etc/init/*.conf。\nSystemd： systemd, CentOS 7,配置文件： /usr/lib/systemd/system、 /etc/systemd/system。\n‍\n# 确定运行级别 ‍\n许多程序需要开机启动。它们在 Windows 叫做\u0026quot;服务\u0026quot;（service），在 Linux 就叫做\u0026quot;守护进程\u0026quot;（daemon）\ninit 进程的一大任务，就是去运行这些开机启动的程序\n但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动 Apache，用作桌面就不需要\nLinux 允许为不同的场合，分配不同的开机启动程序，这就叫做\u0026quot;运行级别\u0026quot;（runlevel）。也就是说，启动时根据\u0026quot;运\n行级别\u0026quot;，确定要运行哪些程序。\n‍\nLinux 系统有 7 个运行级别(runlevel)：\n运行级别 0：系统停机状态，系统默认运行级别不能设为 0，否则不能正常启动\n运行级别 1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆\n运行级别 2：多用户状态(没有 NFS)\n运行级别 3：完全的多用户状态(有 NFS)，登陆后进入控制台命令行模式\n运行级别 4：系统未使用，保留\n运行级别 5：X11 控制台，登陆后进入图形 GUI 模式\n运行级别 6：系统正常关闭并重启，默认运行级别不能设为 6，否则不能正常启动\n‍\n# 加载开机启动程序 在 init 的配置文件中有这么一行： si::sysinit:/etc/rc.d/rc.sysinit 它调用执行了/etc/rc.d/rc.sysinit，而\nrc.sysinit 是一个 bash shell 的脚本，它主要是完成一些系统初始化的工作，rc.sysinit 是每一个运行级别都要首先运行\n的重要脚本。\n它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务\n‍\n// 下面内容太深了, 暂时打住\n‍\n# 用户登录 ‍\n一般来说，用户的登录方式有三种：\n（1）命令行登录\n（2）ssh 登录\n（3）图形界面登录\n‍\n对于运行级别为 5 的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。\n而本文主要讲的还是文本方式登录的情况：当我们看到 mingetty 的登录界面时，我们就可以输入用户名和密码来登录系统了。\nLinux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。\n然后 login 会对用户名进行分析：如果用户名不是 root，且存在 /etc/nologin 文件，login 将输出 nologin 文件的内容，然后退出。\n这通常用来系统维护时防止非 root 用户登录。只有/etc/securetty 中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。\n/etc/usertty 文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。\n‍\n# login shell shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的 shell，就叫做 login shell。\n‍\n（1）命令行登录：首先读入 /etc/profile，这是对所有用户都有效的配置；然后依次寻找下面三个文件，这是针对当\n前用户的配置。\n需要注意的是，这三个文件只要有一个存在，就不再读入后面的文件了。比如，要是 ~/.bash_profile 存在，就不会再\n读入后面两个文件了。\n（2）ssh 登录：与第一种情况完全相同。\n（3）图形界面登录：只加载 /etc/profile 和 ~/.profile。也就是说，~/.bash_profile 不管有没有，都不会运行。\n‍\n‍\n​​\n‍\n# 用户账号系统文件 完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。\n与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group 等。\n‍\n# /etc/passwd 文件是用户管理工作涉及的最重要的一个文件 ‍\nLinux 系统中的每个用户都在/etc/passwd 文件中有一个对应的记录行，它记录了这个用户的一些基本属性。\n这个文件对所有用户都是可读的。它的内容类似下面的例子：\n＃ cat /etc/passwd root:x:0:0:Superuser:/: daemon:x:1:1:System daemons:/etc: bin:x:2:2:Owner of system commands:/bin: sys:x:3:3:Owner of system files:/usr/sys: adm:x:4:4:System accounting:/usr/adm: uucp:x:5:5:UUCP administrator:/usr/lib/uucp: auth:x:7:21:Authentication administrator:/tcb/files/auth: cron:x:9:16:Cron daemon:/usr/spool/cron: listen:x:37:4:Network daemon:/usr/net/nls: lp:x:71:18:Printer administrator:/usr/spool/lp: sam:x:200:50:Sam san:/home/sam:/bin/sh ‍\n从上面的例子我们可以看到，/etc/passwd 中一行记录对应着一个用户，每行记录又被冒号(:)分隔为 7 个字段，其格式和具体含义如下：\n用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell ‍\n# \u0026ldquo;用户名\u0026quot;是代表用户账号的字符串 通常长度不超过 8 个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。\n为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。\n‍\n‍\n# “口令”一些系统中，存放着加密后的用户口令字 虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd 文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多 Linux 系统（如 SVR4）都使用了 shadow 技术，把真正的加密后的用户口令字存放到/etc/shadow 文件中，而在/etc/passwd 文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”\n‍\n# “用户标识号”是一个整数，系统内部用它来标识用户 一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录 Shell 等。\n通常用户标识号的取值范围是 0 ～ 65 535。0 是超级用户 root 的标识号，1 ～ 99 由系统保留，作为管理账号，普通用户的标识号从 100 开始。在 Linux 系统中，这个界限是 500。\n‍\n# “组标识号”字段记录的是用户所属的用户组。 它对应着/etc/group 文件中的一条记录。\n‍\n‍\n# “注释性描述”字段记录着用户的一些个人情况。 ‍\n例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的 Linux 系统中，这个字段的格式并没有统一。在许多 Linux 系统中，这个字段存放的是一段任意的注释性描述文字，用做 finger 命令的输出。\n‍\n‍\n# “主目录”，也就是用户的起始工作目录。 它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。\n‍\n# Shell 用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即 Shell。\nShell 是用户与 Linux 系统之间的接口。Linux 的 Shell 有许多种，每种都有不同的特点。常用的有 sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。\n系统管理员可以根据系统情况和用户习惯为用户指定某个 Shell。如果不指定 Shell，那么系统使用 sh 为默认的登录 Shell，即这个字段的值为/bin/sh。\n用户的登录 Shell 也可以指定为某个特定的程序（此程序不是一个命令解释器）。\n利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些 Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。\n‍\n# 伪用户（pseudo users） 这些用户在/etc/passwd 文件中也占有一条记录，但是不能登录，因为它们的登录 Shell 为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。\n常见的伪用户如下所示：\n伪 用 户 含 义 bin 拥有可执行的用户命令文件 sys 拥有系统文件 adm 拥有帐户文件 uucp UUCP使用 lp lp或lpd子系统使用 nobody NFS使用 ‍\n# 拥有帐户文件 ‍\n1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet 等，它们也都各自为相关的进程和文件所需要。\n由于/etc/passwd 文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的 Linux 系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow 文件。 有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。\n‍\n2、/etc/shadow 中的记录行与/etc/passwd 中的一一对应，它由 pwconv 命令根据/etc/passwd 中的数据自动产生\n它的文件格式与/etc/passwd 类似，由若干个字段组成，字段之间用\u0026rdquo;:\u0026ldquo;隔开。这些字段是：\n登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志 \u0026ldquo;登录名\u0026quot;是与/etc/passwd 文件中的登录名相一致的用户账号 \u0026ldquo;口令\u0026quot;字段存放的是加密后的用户口令字，长度为 13 个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。 \u0026ldquo;最后一次修改时间\u0026quot;表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在 SCO Linux 中，这个时间起点是 1970 年 1 月 1 日。 \u0026ldquo;最小时间间隔\u0026quot;指的是两次修改口令之间所需的最小天数。 \u0026ldquo;最大时间间隔\u0026quot;指的是口令保持有效的最大天数。 \u0026ldquo;警告时间\u0026quot;字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。 \u0026ldquo;不活动时间\u0026quot;表示的是用户没有登录活动但账号仍能保持有效的最大天数。 \u0026ldquo;失效时间\u0026quot;字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。 下面是/etc/shadow 的一个例子：\n＃ cat /etc/shadow root:Dnakfw28zf38w:8764:0:168:7::: daemon:*::0:0:::: bin:*::0:0:::: sys:*::0:0:::: adm:*::0:0:::: uucp:*::0:0:::: nuucp:*::0:0:::: auth:*::0:0:::: cron:*::0:0:::: listen:*::0:0:::: lp:*::0:0:::: sam:EkdiSECLWPdSa:9740:0:0:::: ‍\n# 用户组的所有信息都存放在/etc/group 文件中。 将用户分组是 Linux 系统中对用户进行管理及控制访问权限的一种手段。\n每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。\n当一个用户同时是多个组中的成员时，在/etc/passwd 文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。\n用户要访问属于附加组的文件时，必须首先使用 newgrp 命令使自己成为所要访问的组中的成员。\n用户组的所有信息都存放在/etc/group 文件中。此文件的格式也类似于/etc/passwd 文件，由冒号(:)隔开若干个字段，这些字段有：\n组名:口令:组标识号:组内用户列表 \u0026ldquo;组名\u0026quot;是用户组的名称，由字母或数字构成。与/etc/passwd 中的登录名一样，组名不应重复。 \u0026ldquo;口令\u0026quot;字段存放的是用户组加密后的口令字。一般 Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。 \u0026ldquo;组标识号\u0026quot;与用户标识号类似，也是一个整数，被系统内部用来标识组。 \u0026ldquo;组内用户列表\u0026quot;是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。 ‍\n/etc/group 文件的一个例子如下：\nroot::0:root bin::2:root,bin sys::3:root,uucp adm::4:root,adm daemon::5:root,daemon lp::7:root,lp users::20:root,sam ‍\n# 批量添加用户 添加和删除用户对每位 Linux 系统管理员都是轻而易举的事，比较棘手的是如果要添加几十个、上百个甚至上千个用户时，我们不太可能还使用 useradd 一个一个地添加，必然要找一种简便的创建大量用户的方法。Linux 系统提供了创建大量用户的工具，可以让您立即创建大量用户，方法如下：\n‍\n# （1）先编辑一个文本用户文件。 每一列按照/etc/passwd​ 密码文件的格式书写，要注意每个用户的用户名、UID、宿主目录都不可以相同，其中密码栏可以留做空白或输入 x 号。一个范例文件 user.txt 内容如下：\nuser001::600:100:user:/home/user001:/bin/bash user002::601:100:user:/home/user002:/bin/bash user003::602:100:user:/home/user003:/bin/bash user004::603:100:user:/home/user004:/bin/bash user005::604:100:user:/home/user005:/bin/bash user006::605:100:user:/home/user006:/bin/bash ‍\n# （2）以 root 身份执行命令 ​/usr/sbin/newusers​​​​，从刚创建的用户文件user.txt​​​​ 中导入数据，创建用户： # newusers \u0026lt; user.txt 然后可以执行命令 vipw​ 或 vi /etc/passwd​ 检查 /etc/passwd​ 文件是否已经出现这些用户的数据，并且用户的宿主目录是否已经创建。\n‍\n# （3）执行命令/usr/sbin/pwunconv。 将 /etc/shadow​ 产生的 shadow​ 密码解码，然后回写到 /etc/passwd​ 中，并将/etc/shadow​ 的shadow​ 密码栏删掉。这是为了方便下一步的密码转换工作，即先取消 shadow password​ 功能。\n# pwunconv ‍\n# （4）编辑每个用户的密码对照文件。 格式为：\n用户名:密码 实例文件 passwd.txt​ 内容如下：\nuser001:123456 user002:123456 user003:123456 user004:123456 user005:123456 user006:123456 ‍\n# （5）以 root 身份执行命令 /usr/sbin/chpasswd​​​。 创建用户密码，chpasswd​ 会将经过 /usr/bin/passwd​ 命令编码过的密码写入 /etc/passwd​ 的密码栏。\n# chpasswd \u0026lt; passwd.txt ‍\n# （6）确定密码经编码写入/etc/passwd 的密码栏后。 执行命令 /usr/sbin/pwconv​ 将密码编码为 shadow password​，并将结果写入 /etc/shadow​。\n# pwconv 这样就完成了大量用户的创建了，之后您可以到/home 下检查这些用户宿主目录的权限设置是否都正确，并登录验证用户密码是否正确。\n‍\n‍\n# 链接 ‍\nLinux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln 命令产生硬链接。\n‍\n硬连接\n硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。\n硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。\n‍\n软连接\n另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。\n‍\n# 图形桌面快捷方式 ‍\n# 软连接 这种方法不能设置快捷方式的图标\n在命令行中利用 ln 命令，在桌面目录下创建一个软连接，使其指向某个应用程序，桌面上就会有一个这个应用程序的快捷方式。\n以软件 sublime text 为例，其应用程序是/opt/sublime_text/sublime_text，桌面目录是/home/xjh/Desktop，则创建快捷方式如下：\n‍\nxjh@ubuntu:~$ ln -s /opt/sublime_text/sublime_text /home/xjh/Desktop/subl xjh@ubuntu:~$ #应用程序的路径 #桌面目录下的快捷方式名称 ‍\n‍\n# 复制快捷方式 通过软件包管理工具安装软件后，一般会在/usr/share/applications 目录下生成快捷方式文件，在桌面环境下表现为一个图标。\n直接去对应目录获取即可\n‍\n‍\n# 文件快捷方式 ‍\n例如在桌面制造 IDEA 链接\n创建一个文件, 输入以下内容 (已经修改为我的版本)\n[Desktop Entry] Type=Application Version=232.9921.47 Name=IDEA Comment=Run IDEA Icon=/opt/idea/idea-IU-232.9921.47/bin/idea.png Exec=/opt/idea/idea-IU-232.9921.47/bin/idea.sh Terminal=false Path= StartupNotify=false 保存后，再次对这个文件重命名，修改为IDEA.desktop​\n‍\n‍\n‍\n‍\n# Shell 了解脚本语言(核心要素: 脚本)\n了解 Shell 脚本的基本语法与使用方式\n(注意执行权限问题)\n‍\n# ShellHelloWorld 完成基本 Shell 脚本的编写\n任务目标\n输出文字 HelloLinux 交互式完成计算器加法- 计算双数之和 完成交互式树洞选择结构: 输入 y/n. 其他的选择 I don\u0026rsquo;t Know 函数, 用作循环测试: 输入 n 个数, 计算这些数的平方和 函数(方法)调用 Bash, 任意方法 查看并展示每个文件具体内容并演示效果-\u0026gt;DDL Fri ‍\n现在请帮助完成基本LinuxCentOS系统中Shell脚本的编写, 完成以下任务: 1. 输出文字HelloLinux ; 2, 完成交互式的计算器加法- 计算双数之和;3. 完成交互式内容随机输出功能, 需要有一个选择结构: 用户输入y/n来确定是否继续输出. 如果用户输入了其他的选择则输出I don\u0026#39;t Know; 4. 编写函数用作循环功能测试: 让用户输入n个数, 计算这些数的平方和 5. 测试函数调用, 编写任意方法后调用; 请完成上述目标并展示完成目标所需的操作步骤 您好，这是Bing。我可以尝试帮助您完成基本Linux CentOS系统中Shell脚本的编写。以下是一个可能的脚本，您可以根据您的需要进行修改或优化。 #!/bin/bash # 1. 输出文字HelloLinux echo \u0026#34;HelloLinux\u0026#34; # 2. 完成交互式的计算器加法- 计算双数之和 echo \u0026#34;请输入两个数，用空格隔开：\u0026#34; read a b # 读取用户输入的两个数 sum=$((a+b)) # 计算两数之和 echo \u0026#34;两数之和为：$sum\u0026#34; # 3. 完成交互式内容随机输出功能, 需要有一个选择结构: 用户输入y/n来确定是否继续输出. 如果用户输入了其他的选择则输出I don\u0026#39;t Know while true # 无限循环 do echo \u0026#34;请输入y或n：\u0026#34; read choice # 读取用户输入的选择 if [ \u0026#34;$choice\u0026#34; = \u0026#34;y\u0026#34; ] # 如果用户输入y then echo \u0026#34;随机输出一个内容：\u0026#34; shuf -n 1 content.txt # 从content.txt文件中随机选取一行输出 elif [ \u0026#34;$choice\u0026#34; = \u0026#34;n\u0026#34; ] # 如果用户输入n then echo \u0026#34;退出程序\u0026#34; break # 跳出循环 else # 如果用户输入其他 echo \u0026#34;I don\u0026#39;t Know\u0026#34; fi done # 4. 编写函数用作循环功能测试: 让用户输入n个数, 计算这些数的平方和 function square_sum # 定义函数 { sum=0 # 初始化平方和为0 for num in $@ # 遍历函数的所有参数 do sum=$((sum+num*num)) # 计算平方和 done echo \u0026#34;平方和为：$sum\u0026#34; # 输出平方和 } # 5. 测试函数调用, 编写任意方法后调用 echo \u0026#34;请输入n个数，用空格隔开：\u0026#34; read -a array # 读取用户输入的数组 square_sum ${array[@]} # 调用函数，传入数组作为参数 ‍\n首先，您需要选择一个文本编辑器来编写您的脚本代码。您可以使用默认的文本编辑器，也可以使用 Vim、Nano、Emacs 等其他终端或图形界面的文本编辑器。 然后，您需要创建一个扩展名为 .sh 的文本文件，并在其中输入您想要执行的命令和语句。您可以使用 touch 命令来创建一个空文件，或者使用 cat 命令来直接输入内容。 接下来，您需要在脚本的第一行添加一个 shebang 行，它告诉系统您想要使用哪种 shell 来解释执行您的脚本。例如，如果您想要使用 bash shell，您可以在第一行写 #!/bin/bash 。 然后，您需要给您的脚本文件添加可执行权限，以便您可以运行它。您可以使用 chmod 命令来做到这一点，例如 chmod u+x hello.sh 。 最后，您可以使用两种方法之一来运行您的脚本。一种是在脚本文件名前加上 bash 命令，例如 bash hello.sh 。另一种是在脚本文件名前加上 ./ ，例如 ./hello.sh 。如果您想要从任何目录运行您的脚本，您还需要将您的脚本文件所在的目录添加到 PATH 变量中，您可以使用 export 命令来做到这一点，例如 export PATH=$PATH:/home/ay2021/scripts 。 https://www.runoob.com/linux/linux-shell.html\n见实验报告\n‍\n# 重定向命令 ‍\n重定向命令列表如下：\n命令 说明 command \u0026gt; file 将输出重定向到 file。 command \u0026lt; file 将输入重定向到 file。 command \u0026raquo; file 将输出以追加的方式重定向到 file。 n \u0026gt; file 将文件描述符为 n 的文件重定向到 file。 n \u0026raquo; file 将文件描述符为 n 的文件以追加的方式重定向到 file。 n \u0026gt;\u0026amp; m 将输出文件 m 和 n 合并。 n \u0026lt;\u0026amp; m 将输入文件 m 和 n 合并。 \u0026laquo; tag 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）\n‍\n# 输出重定向 重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:\ncommand1 \u0026gt; file1 上面这个命令执行 command1 然后将输出的内容存入 file1。\n注意任何 file1 内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用\u0026raquo;操作符。\n‍\n# 输入重定向 和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：\ncommand1 \u0026lt; file1 ‍\n这样，本来需要从键盘获取输入的命令会转移到文件读取内容。\n注意：输出重定向是大于号(\u0026gt;)，输入重定向是小于号(\u0026lt;)。\n‍\n接着以上实例，我们需要统计 users 文件的行数,执行以下命令：\n$ wc -l users 2 users 也可以将输入重定向到 users 文件：\n$ wc -l \u0026lt; users 2 注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。\ncommand1 \u0026lt; infile \u0026gt; outfile 同时替换输入和输出，执行 command1，从文件 infile 读取内容，然后将输出写入到 outfile 中。\n‍\n# 重定向深入讲解 一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：\n标准输入文件(stdin)：stdin 的文件描述符为 0，Unix 程序默认从 stdin 读取数据。 标准输出文件(stdout)：stdout 的文件描述符为 1，Unix 程序默认向 stdout 输出数据。 标准错误文件(stderr)：stderr 的文件描述符为 2，Unix 程序会向 stderr 流中写入错误信息。 默认情况下，command \u0026gt; file 将 stdout 重定向到 file，command \u0026lt; file 将 stdin 重定向到 file。\n如果希望 stderr 重定向到 file，可以这样写：\n$ command 2\u0026gt;file 如果希望 stderr 追加到 file 文件末尾，可以这样写：\n$ command 2\u0026gt;\u0026gt;file 2 表示标准错误文件(stderr)。\n如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：\n$ command \u0026gt; file 2\u0026gt;\u0026amp;1 或者 $ command \u0026gt;\u0026gt; file 2\u0026gt;\u0026amp;1 如果希望对 stdin 和 stdout 都重定向，可以这样写：\n$ command \u0026lt; file1 \u0026gt;file2 command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。\n# Here Document Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。\n它的基本的形式如下：\ncommand \u0026lt;\u0026lt; delimiter document delimiter 它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。\n注意：\n结尾的 delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。 开始的 delimiter 前后的空格会被忽略掉。 ‍\n# 实例 在命令行中通过 wc -l 命令计算 Here Document 的行数：\nwc -l \u0026lt;\u0026lt; EOF 欢迎来到 河北小学 EOF ‍\n我们也可以将 Here Document 用在脚本中，例如：\n#!/bin/bash cat \u0026lt;\u0026lt; EOF 欢迎来到 河北小学 EOF 执行\n‍\n# /dev/null 文件 如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：\n$ command \u0026gt; /dev/null /dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到\u0026quot;禁止输出\u0026quot;的效果。\n如果希望屏蔽 stdout 和 stderr，可以这样写：\n$ command \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 注意： 0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。\n这里的 2 和 \u0026gt; 之间不可以有空格，2\u0026gt; 是一体的时候才表示错误输出。\n‍\n‍\n‍\n# 环境 指虚拟机运行环境\n‍\n‍\n# 网络模式 ‍\n# 桥接 在网络网卡上安装了一个桥接协议，让这块网卡处于混杂模式，可以同时连接多个网络的做法。\n桥接下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样放在这个交换机当中，所以所有桥接下网卡与网卡都是交换模式的，相互可以访问而不干扰。\n‍\n# Host-only （仅与主机通信）\n虚拟机使用 VMnet1 网卡与主机单独组网,主机对于虚拟机相当于路由器\n‍\n# NAT 虚拟机使用 VMnet8 网卡与主机单独组网,主机对于虚拟机相当于路由器，VMnet8 网卡通过 NAT 地址转换协议与物理机网卡通信\n‍\n‍\n# 指令 ‍\n# 直属 ‍\n‍\n# 通用 ‍\nLinux 命令格式： []代表可选\ncommand [-options] [parameter1] … command: 命令名；\n[-options]：选项,可用来对命令进行控制，也可以省略，\nparameter1 …：传给命令的参数：可以是零个一个或多个\n‍\n# 终端操作 ‍\n# 帮助 ‍\n**help ** 一般是 linux 命令自带的帮助信息\n如：ls --help ‍\nman(manual)\nman 是 linux 提供的一个手册，包含了绝大部分的命令、函数使用说明; 手册分成很多章节（section），使用 man 时可以指定不同的章节来浏览。\n例：man ls ; man 2 printf\n‍\nman 中各个 section 意义如下：\nStandard commands（标准命令） System calls（系统调用，如 open,write） Library functions（库函数，如 printf,fopen） Special devices（设备文件的说明，/dev 下各种设备） File formats（文件格式，如 passwd） Games and toys（游戏和娱乐） Miscellaneous（杂项、惯例与协定等，例如 Linux 档案系统、网络协定、ASCII 码；environ 全局变量） Administrative Commands（管理员命令，如 ifconfig） ‍\nman 是按照手册的章节号的顺序进行搜索的。\nman 设置了如下的功能键：\n注意：实际上，我们不用指定第几个章节也用查看，如，man ls\n功能键 功能 空格键 显示手册页的下一屏 Enter 键 一次滚动手册页的一行 b 回滚一屏 f 前滚一屏 q 退出 man 命令 h 列出所有功能键 /word 搜索 word 字符串 ‍\n‍\n# 历史记录 当系统执行过一些命令后，可按上下键翻看以前的命令，history 将执行过的命令列举出来\nhistory 保留了最近执行的命令记录，默认可以保留 1000。历史清单从 0 开始编号到最大值。\n历史清单从 0 开始编号到最大值。\nhistory N 显示最近N条命令 history -c 清除所有的历史记录 history -w xxx.txt 保存历史记录到文本xxx.txt ‍\n# Ctrl 组合键 ‍\nCtrl+c 结束正在运行的程序 Ctrl+d 结束输入或退出 shell Ctrl+s 暂停屏幕输出【锁住终端】 Ctrl+q 恢复屏幕输出【解锁终端】 Ctrl+L 清屏，等同于 Clear ‍\nctrl+a 当前光标到行首 ctrl+e 当前光标到行尾 ctrl+u 删除当前光标到行首 ctrl+k 删除当前光标到行尾 ‍\nCtrl+y 在光标处粘贴剪切的内容 Ctrl+r 查找历史命令【输入关键字，就能调出以前执行过的命令】 Ctrl+t 调换光标所在处与其之前字符位置，并把光标移到下个字符 Ctrl+x+u 撤销操作 Ctrl+z 转入后台运行 ‍\n‍\n‍\n# 权限管理 ‍\n用户能够控制一个给定的文件或目录的访问程度，一个文件或目录可能有读、写及执行权限：\n通常，Unix/Linux 系统只允许文件的属主(所有者)或超级用户改变文件的读写权限。\n‍\n读权限（r） ：对于文件，具有读取文件内容的权限；对于目录，具有浏览目录的权限。 写权限（w） ：对于文件，具有修改文件内容的权限；对于目录，具有删除、移动目录内文件的权限。 可执行权限（x）： 对于文件，具有执行文件的权限；对于目录，该用户具有进入目录的权限。 ‍\n# 显示 ‍\n# stat ‍\n显示 inode 的内容\n‍\n# lsattr 查看特殊权限\n# lsattr /etc/passwd ‍\n# 改变 ‍\n# chmod ‍\n修改文件权限\n两种使用格式：字母法与数字法\n字母法：chmod u/g/o/a +/-/= rwx 文件\n‍\n[ u/g/o/a ]\nu user 所有者 g group 用户组 o other 表示其他以外的人 a all 表示这三者皆是 ‍\n[ + - = ]\n+增加权限 -撤销权限 =设定权限 ‍\nrwx\nr read 表示可读取，没有意味着不能通过 ls 查看这个目录的内容 w write 表示可写入，没有意味着不能在目录下创建新的文件 x excute 表示可执行，没有意味着不能通过 cd 进入这个目录 ‍\n数字法：“rwx” 这些权限也可以用数字来代替\nr 读取权限 \u0026ldquo;4\u0026rdquo; w 写入权限 \u0026ldquo;2\u0026rdquo; x 执行权限 \u0026ldquo;1\u0026rdquo; 无权限 \u0026quot;0\u0026quot; ‍\n如执行：chmod u=rwx,g=rx,o=r filename 就等同于：chmod u=7,g=5,o=4 filename chmod 777 file：所有用户拥有读、写、执行权限 如果想递归所有目录加上相同权限，需要加上参数“ -R ” chmod 777 test/ -R 递归 test 目录下所有文件加 777 权限 ‍\n# chown 修改文件所有者\n‍\n‍\n# chgrp 修改文件所属组\n‍\n# chattr 设置特殊权限\n凌驾于 r、w、x、suid、sgid 之上的权限。\n‍\n-i 锁定文件，不能编辑，不能修改，不能删除，不能移动，可以执行 -a 仅可以追加文件，不能编辑，不能删除，不能移动，可以执行 ‍\n# 特殊 ‍\nlinux 共 12 位权限，除了 9 位基础权限还有 3 个特殊权限\n‍\n# setUID(suid) ‍\n命令功能： 临时使用命令的属主权限执行该命令。即如果文件有 suid 权限时，那么普通用户去执行该文件时，会以该文件的所属用户的身份去执行。\nSetUID（简写 suid）：会在属主权限位的执行权限上写个 s。 如果该属主权限位上有执行权限，则会在属主权限位的执行权限上写个 s（小写）； 如果该属主权限位上没有执行权限，则会在属主权限位的执行权限上写个 S（大写）\n‍\n由于 passwd 具有 s 权限，普通用户使用该命令的时候，就会以该命令的属主身份 root 执行该命令，于是能够顺利修改\n‍\n普通用户不具备修改权限的 /etc/shadow 文件\n希望普通用户 user1 可以删除某个自己没有权限删除的文件的操作方法：\nsudo 给 user1 授权 rm 权限 rm 设置 suid 修改被删除文件上级目录的权限 ‍\n总结\n让普通用户对可执行的二进制文件，临时拥有二进制文件的属主权限 如果设置的二进制文件没有执行权限，那么 suid 的权限显示就是 S（大写字母 S） 特殊权限 suid 仅对二进制可执行程序有效，其他文件或目录则无效 suid 极其危险，如果给 vim 或者 rm 命令设置了 setUID，那么任何文件都能编辑或者删除了，相当于有 root 权限了 ‍\n‍\n# setGID(sgid) ‍\n命使得多个用户之间共享一个目录的所有文件变得简单。\n当某个目录设置了 sgid 后，在该目录中新建的文件不在是创建该文件的默认所属组。\n‍\n如果该属组权限位上有执行权限，则会在属组主权限位的执行权限上写个 s（小写字母）； 如果该属组权限位上没有执行权限，则会在属组主权限位的执行权限上写个 S（大写字母 S）。\n‍\n‍\n‍\n‍\n# 预设 ‍\n# sticky(sbit) 粘滞位\n‍\n只对目录有效，对某目录设置粘滞位后，普通用户就算有 w 权限也只能删除该目录下自己建立的文件，而不能删除其他用户建立的文件\n如果该其他用户权限位上有执行权限，则会在其他用户权限位的执行权限上写个 t（小写）；如果该其它用户权限位上没有执行权限，则会在其他用户权限位的执行权限上写个 T（大写）\n系统中存在的/tmp 目录是经典的粘滞位目录，谁都有写权限，因此安全成问题，常常是木马第一手跳板。\n‍\n# umask 掩码\n用于设置用户在创建文件时的默认权限，当我们在系统中创建目录或文件时，目录或文件所具有的默认权限就是由 umask 值决定的。\n对于 root 用户，系统默认的 umask 值是 0022；对于普通用户，系统默认的 umask 值是 0002。执行 umask 命令可以查看当前用户的 umask 值。\n‍\n改变新文件的权限\numask 值一共有 4 组数字，其中第 1 组数字用于定义特殊权限，一般不予考虑，与一般权限有关的是后 3 组数字。\n默认情况下，对于目录，用户所能拥有的最大权限是 777；对于文件，用户所能拥有的最大权限是目录的最大权限去掉执行权限，即 666。因为 x 执行权限对于目录是必须的，没有执行权限就无法进入目录，而对于文件则不必默认赋予 x 执行权限。\n对于 root 用户，他的 umask 值是 022。当 root 用户创建目录时，默认的权限就是用最大权限 777 去掉相应位置的 umask 值权限，即对于所有者不必去掉任何权限，对于所属组要去掉 w 权限，对于其他用户也要去掉 w 权限，所以目录的默认权限就是 755；当 root 用户创建文件时，默认的权限则是用最大权限 666 去掉相应位置的 umask 值，即文件的默认权限是 644。\n通过 umask 命令可以修改 umask 值，比如将 umask 值设为 0077\n‍\n永久修改 umask\numask 命令只能临时修改 umask 值，系统重启之后 umask 将还原成默认值。如果要永久修改 umask 值，可修\n改 /etc/bashrc 或 /etc/profile 文件。\n例如要将默认 umask 值设置为 027，那么可以在文件中增加一行 umask 027\n‍\n‍\n# 文件管理 ‍\ncat 由第一行开始显示文件内容 tac 从最后一行开始显示 nl 显示的时候，顺道输出行号 more 一页一页的显示文件内容 less 与 more 类似，但可以往前翻页 head 只看头几行 tail 只看尾巴几行 ‍\n# 显示 ‍\n# cat-tac 基本显示\ncat [-AbEnTv] /tac 刚好相反\n‍\n-A ： 相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已； -v ： 列出一些看不出来的特殊字符 -E ： 将结尾的断行字节 $ 显示出来； -T ： 将 [tab] 按键以 ^I 显示出来； -b ： 列出行号，空白行不标行号 -n ： 列出行号，连同空白行也会有行号 ‍\n‍\n‍\n# 分页 ‍\n# nl 显示行号\nnl [-bnw] 文件 ‍\n-b ： 指定行号指定的方式，主要有两种：\n-b a ： 表示不论是否为空行，也同样列出行号(类似 cat -n)；\n-b t ： 如果有空行，空的那一行不要列出行号(默认值)； -n ： 列出行号表示的方法，主要有三种：\n-n ln ： 行号在荧幕的最左方显示；\n-n rn ： 行号在自己栏位的最右方显示，且不加 0 ；\n-n rz ： 行号在自己栏位的最右方显示，且加 0 ； -w ： 行号栏位的占用的位数。 ‍\n# more-less 分屏显示\n‍\nMore\nSpace 向下翻一页； Enter 向下翻『一行』； /字串 在这个显示的内容当中，向下搜寻『字串』这个关键字； :f 立刻显示出档名以及目前显示的行数； q 离开 b 或 [ctrl]-b 代表往回翻页，不过这动作只对文件有用，对管线无用。 ‍\nLess\n空白键 向下翻动一页； [pagedown] 向下翻动一页； [pageup] 向上翻动一页； /字串 向下搜寻『字串』的功能； ?字串 向上搜寻『字串』的功能； n 重复前一个搜寻 (与 / 或 ? 有关！) N 反向的重复前一个搜寻 (与 / 或 ? 有关！) q 离开 ‍\n‍\n# head-tail 取首/尾 n 行\n‍\nhead [-n number] 文件 -n ： 后面接数字，代表显示几行 ‍\ntail [-n number] 文件 -n ：后面接数字，代表显示几行的意思 -f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c 才会结束 tail 的侦测 ‍\n‍\n# 创建 ‍\n使用 touch 命令 使用 vi 和 vim 命令 使用\u0026gt;、\u0026raquo;命令 使用 cp 命令 使用 cat 命令间接 ‍\n# touch ‍\n同时创建两个\n​touch XXX, XXX​\n‍\n批量创建文件\n​touch test{01..10}.sh​\n‍\n更改文件 test.sh 时间为当前时间（test.sh 已存在）\n​touch test.sh​\n‍\n‍\n# vi/vim 使用编辑器打开\nvi test.sh vim test.sh ‍\n‍\n# ls + \u0026gt;、\u0026gt;\u0026gt; 输出重定向将结果写入文件\n可将本应显示在终端上的内容保存到指定文件中。 如：ls \u0026gt; test.txt ( test.txt 如果不存在，则创建，存在则覆盖其内容 )\n‍\n单箭头输出重定向会覆盖原来的内容，\u0026raquo;输出重定向则会追加到文件的尾部。\n‍\n‍\n# grep 将结果写入文件\nps -ef | grep java \u0026gt; test.sh ps -ef | grep java \u0026gt;\u0026gt; test.sh ‍\n‍\n# echo 将结果写入文件\necho $PATH \u0026gt; test.sh echo $PATH \u0026gt;\u0026gt; test.sh ‍\n# ln 建立链接文件\n软链接：ln -s 源文件 链接文件\n硬链接：ln 源文件 链接文件\n‍\n软链接(常用)类似于 Windows 下的快捷方式，如果软链接文件和源文件不在同一个目录，源文件要使用绝对路径，不能使用相对路径\n硬链接只能链接普通文件不能链接目录。 两个文件占用相同大小的硬盘空间，即使删除了源文件，链接文件还是存在\n‍\n‍\n# 目录 ‍\n绝对路径：\n路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。 相对路径：\n路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法。 ‍\nls（英文全拼：list files）: 列出目录及文件名 cd（英文全拼：change directory）：切换目录 pwd（英文全拼：print work directory）：显示目前的目录 mkdir（英文全拼：make directory）：创建一个新的目录 rmdir（英文全拼：remove directory）：删除一个空的目录 cp（英文全拼：copy file）: 复制文件或目录 rm（英文全拼：remove）: 删除文件或目录 mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称 ‍\n‍\n# ls 列出目录的内容\n‍\nLinux 文件或者目录名称最长可以有 265 个字符,“.”代表当前目录，“..”代表上一级目录,以“.”开头的文件为隐藏文件需要用 -a 参数才能显示。\nls [-aAdfFhilnrRSt] 目录名称 ls [--color={never,auto,always}] 目录名称 ls [--full-time] 目录名称 ‍\n选项与参数：\n-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用) -d ：仅列出目录本身，而不是列出目录内的文件数据(常用) -l ：长数据串列出，包含文件的属性与权限等等数据(常用) 直接用 ll ‍\n将目录下的所有文件列出来(含属性与隐藏档)\n[root@www ~]# ls -al ~ ‍\n‍\n列出的信息的含义\n一行: 文件类型(1) + 权限 3 组(9) + 目录/链接个数 + 所有者以及组 + 大小 + 修改日期 + 名称 + (*)\n‍\n含义:\n‍\n第 1 个字母代表文件的类型\n“d” 代表文件夹 “-” 代表普通文件 “c” 代表硬件字符设备 “b” 代表硬件块设备 “s” 表示管道文件 “l” 代表软链接文件。 ‍\n后 9 个字母分别代表三组权限：\n第一段表示文件创建者/所有者对该文件所具有的权限，第二段表示创建者/所有者所在的组的其他用户所具有的权限，第三段表示其他组的其他用户所具有的权限。\n‍\nr（Read，读取权限）：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限。\nw（Write，写入权限）：对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。\nx（eXecute，执行权限）：对文件而言，具有执行文件的权限；对目录来说，该用户具有进入目录的权限。\n另外，这里还有 2 个很特殊的属性，平时不怎么常见，这里也顺带解释一下：\ns 或 S（SUID,Set UID）：可执行的文件搭配这个权限，便能得到特权，任意存取该文件的所有者能使用的全部系统资源。请注意具备 SUID 权限的文件，黑客经常利用这种权限，以 SUID 配上 root 帐号拥有者，无声无息地在系统中开扇后门，供日后进出使用。\nt 或 T（Sticky）：/tmp 和 /var/tmp 目录供所有用户暂时存取文件，亦即每位用户皆拥有完整的权限进入该目录，去浏览、删除和移动文件。\n综合起来可得，对于 back_init 文件，其创建者/所有者具有可读可写可执行的权限，其创建者/所有者所在的组的其他用户具有可读可写可执行的权限，其他组的其他用户则具有可读可执行但不可写的权限。\n‍\n再然后一个是目录/链接个数\n对于目录文件，表示它的第一级子目录的个数。注意此处看到的值要减 2才等于该目录下的子目录的实际个数(要加上.目录和..目录)\n‍\n之后一对\n所有者及组\n文件的所有者/创建者（owner）及其所在的组（group）\n‍\n数值\n文件大小,单位为字节。\n如果是目录，则表示该目录符所占的大小，并不表示该目录下所有文件的大小\n‍\n修改日期\n最后修改的日期时间\n‍\n文件名称 字体颜色\n在大多数的 linux shell 窗口中，还能用颜色来区分不同文件的属性：\n灰白色表示普通文件；\n亮绿色表示可执行文件；\n亮红色表示压缩文件；\n灰蓝色表示目录；\n亮蓝色表示链接文件；\n亮黄色表示设备文件；\n‍\n另\n凡是文件名后面带了一个星号（*）的，都是在说明这是一个可执行文件\n‍\n‍\n通配符 含义 * 所有字符 ? 任意字符 X* */** X 查找\u0026hellip;开头/结尾的 X?/?X 查找..位置字符任意,\u0026hellip;开头结尾的 [ ] 匹配字符组中的任意一个 里面配合 - 来表示范围 \\ 转义字符 ‍\n‍\n# cd (切换目录)\nChange Directory\n​Linux所有的目录和文件名大小写敏感​\ncd [相对路径或绝对路径] cd == cd ~ cd ~ 切换到当前用户的主目录(/home/用户目录) cd . 切换到当前目录 cd .. 切换到上级目录 cd - 进入上次所在的目录 ‍\n#使用 mkdir 命令创建 runoob 目录 [root@www ~]# mkdir runoob #使用绝对路径切换到 runoob 目录 [root@www ~]# cd /root/runoob/ #使用相对路径切换到 runoob 目录 [root@www ~]# cd ./runoob/ # 表示回到自己的家目录，亦即是 /root 这个目录 [root@www runoob]# cd ~ # 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思； [root@www ~]# cd .. ‍\n# pwd (显示目前所在的目录)显示当前路径\nPrint Working Directory 显示目前所在目录的命令。\n[root@www ~]# pwd [-P] ‍\n选项与参数：\n-P ：显示出确实的路径，而非使用链接 (link) 路径。 ‍\n实例：单纯显示出目前的工作目录：\n[root@www ~]# pwd /root \u0026lt;== 显示出目录啦～ ‍\n实例显示出实际的工作目录，而非链接档本身的目录名而已。\n[root@www ~]# cd /var/mail \u0026lt;==注意，/var/mail是一个链接档 [root@www mail]# pwd /var/mail \u0026lt;==列出目前的工作目录 [root@www mail]# pwd -P /var/spool/mail \u0026lt;==怎么回事？有没有加 -P 差很多～ [root@www mail]# ls -ld /var/mail lrwxrwxrwx 1 root root 10 Sep 4 17:54 /var/mail -\u0026gt; spool/mail # 看到这里应该知道为啥了吧？因为 /var/mail 是链接档，链接到 /var/spool/mail # 所以，加上 pwd -P 的选项后，会不以链接档的数据显示，而是显示正确的完整路径啊！ ‍\n‍\n# mkdir make directory 创建目录\n‍\nmkdir [-mp] 目录名称 ‍\n新建目录的名称不能与当前目录中已有的目录或文件同名，并且目录创建者必须对当前目录具有写权限\n‍\n-m ： 指定被创建目录的权限，而不是根据默认权限 (umask) 设定 -p ： 递归创建所需要的目录 ‍\n//递归创建实例: mkdir -p test1/test2/test3/test4 //指定被创建目录的权限 mkdir t2 -m 711 ‍\n# rm 删除文件或目录\n‍\n使用 rm 命令要小心，因为文件删除后不能恢复。为了防止文件误删，可以在 rm 后使用-i 参数以逐个确认要删除的文件\nrm -fr 包治百病 ‍\n-i 以进行交互式方式执行 -f 强制删除，忽略不存在的文件，无需提示 -r 递归地删除目录下的内容，删除文件夹时必须加此参数 ‍\n# rmdir 删除空目录\nrmdir [-p] 目录名称 ‍\n-p ： 从该目录起，一次删除多级空目录 ‍\n将 mkdir 实例中创建的目录(/tmp 底下)删除掉！\n[root@www tmp]# ls -l \u0026lt;==看看有多少目录存在？ drwxr-xr-x 3 root root 4096 Jul 18 12:50 test drwxr-xr-x 3 root root 4096 Jul 18 12:53 test1 drwx--x--x 2 root root 4096 Jul 18 12:54 test2 [root@www tmp]# rmdir test \u0026lt;==可直接删除掉，没问题 [root@www tmp]# rmdir test1 \u0026lt;==因为尚有内容，所以无法删除！ rmdir: `test1\u0026#39;: Directory not empty [root@www tmp]# rmdir -p test1/test2/test3/test4 [root@www tmp]# ls -l \u0026lt;==您看看，底下的输出中test与test1不见了！ drwx--x--x 2 root root 4096 Jul 18 12:54 test2 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除。\n不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。\n‍\n‍\n# cp (复制文件或目录)\n# cp [-adfilprsu] 来源档(source) 目标档(destination) # cp [options] source1 source2 source3 .... directory ‍\n选项与参数：\n**-a ** 该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。 **-d ** 若来源档为链接档的属性(link file)，则复制链接档属性而非文件本身； **-f ** 为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次； **-i ** 交互式复制，在覆盖目标文件之前将给出提示要求用户确认 **-l ** 进行硬式链接(hard link)的链接档创建，而非复制文件本身； **-p ** 连同文件的属性一起复制过去，而非使用默认属性(备份常用)； **-r ** 递归持续复制，用於目录的复制行为；(常用) **-s ** 复制成为符号链接档 (symbolic link)，亦即批量创建快捷方式 **-u ** 若 destination 比 source 旧才升级 destination ！ **-v ** 显示拷贝进度 ‍\n‍\n用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc\n[root@www ~]# cp ~/.bashrc /tmp/bashrc [root@www ~]# cp -i ~/.bashrc /tmp/bashrc cp: overwrite `/tmp/bashrc\u0026#39;? n \u0026lt;==n不覆盖，y为覆盖 ‍\n‍\n# mv 移动文件\n移动文件或目录，也可以给文件或目录重命名\n‍\n‍\n-f 禁止交互式操作，如有覆盖也不会给出提示 -i 确认交互方式操作，如果 mv 操作将导致对已存在的目标文件的覆盖，系统会询问是否重写，要求用户\n答以避免误覆盖文件 -v 显示移动进度 -u 若目标文件已经存在，且 source 比较新，才会升级 (update) ‍\n复制一文件，创建一目录，将文件移动到目录中\n[root@www ~]# cd /tmp [root@www tmp]# cp ~/.bashrc bashrc [root@www tmp]# mkdir mvtest [root@www tmp]# mv bashrc mvtest 将某个文件移动到某个目录去，就是这样做！\n将刚刚的目录名称更名为 mvtest2\n[root@www tmp]# mv mvtest mvtest2 ‍\n# 搜索 # grep 文本搜索\n强大的文本搜索工具，允许对文本文件进行模式查找。如果找到匹配模式，grep 打印包含模式的所有行\n‍\ngrep [-选项] \u0026#39;搜索内容串\u0026#39; 文件名 ‍\n-r 递归的方式查找 -v 打印出不符合条件行的内容 ‍\ngrep 命令中输入字符串参数时，最好引号或双引号括起来。例如： grep \u0026lsquo;a\u0026rsquo; 1.txt 。\n‍\n在当前目录中，查找前缀有test字样的文件中包含 test 字符串的文件，并打印出该字符串的行： grep test test* 以递归的方式查找符合条件的文件: 查找指定目录/etc/acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串\u0026#34;update\u0026#34;的文件，并打印出该字符串所在行的内容 grep -r update /etc/acpi #以递归的方式查找“etc/acpi” 查找文件名中包含 test 的文件中不包含test 的行: grep -v test* ‍\n‍\n# find 查找文件\n‍\n在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件并且将查找到的子目录和文件全部显示 ‍\nfind path -option [ -print ] [ -exec -ok command ] {} \\; ‍\n-perm xxxx 权限为 xxxx 的文件或目录\n-user 按照文件属主来查找文件。\n-size n n 单位,b:512 位元组的区块,c:字元数,k:kilo bytes,w:二个位元组\n-mount, -xdev 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件\n-amin n 在过去 n 分钟内被读取过\n-anewer file 比文件 file 更晚被读取过的文件\n-atime n 在过去 n 天内被读取过的文件\n-cmin n 在过去 n 分钟内被修改过\n-cnewer file 比文件 file 更新的文件\n-ctime n 在过去 n 天内被修改过的文件\n-empty 空的文件\n-gid n or -group name gid 是 n 或是 group 名称是 name\n-ipath p, -path p 路径名称符合 p 的文件，ipath 会忽略大小写\n-name name, -iname name 文件名称符合 name 的文件。iname 会忽略大小写\n-type 查找某一类型的文件：\nb - 块设备文件\nd - 目录\nc - 字符设备文件\np - 管道文件\nl - 符号链接文件\nf - 普通文件\n-exec 命令名{} \\ (注意：“}”和“\\”之间有空格)\n‍\n实例\n显示当前目录中大于20字节并以.c结尾的文件名 find . -name \u0026#34;*.c\u0026#34; -size +20c 将目前目录其其下子目录中所有一般文件列出 find . -type f 将目前目录及其子目录下所有最近 20 天内更新过的文件列出 find . -ctime -20 查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们： find /var/log -type f -mtime +7 -ok rm {} \\; 查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件： find . -type f -perm 644 -exec ls -l {} \\; 查找系统中所有文件长度为0的普通文件，并列出它们的完整路径： find / -type f -size 0 -exec ls -l {} \\; 从根目录查找类型为符号链接的文件，并将其删除： find / -type l -exec rm -rf {} \\ 从当前目录查找用户tom的所有文件并显示在屏幕上 find . -user tom 在当前目录中查找所有文件以.doc结尾，且更改时间在3天以上的文件，找到后删除，并且给出删除提示 find . -name *.doc -mtime +3 -ok rm {} \\; 在当前目录下查找所有链接文件，并且以长格式显示文件的基本信息 find . -type l -exec ls -l {} \\; 在当前目录下查找文件名有一个小写字母、一个大写字母、两个数字组成，且扩展名为.doc的文件 find . -name \u0026#39;[a-z][A-Z][0-9][0-9].doc\u0026#39; ‍\n# locate 查找\n‍\nlocate 命令会去保存文档和目录名称的数据库内，查找文件或目录。\n一般情况我们只需要输入 locate your_file_name 即可查找指定文件\n‍\n-d 或\u0026ndash;database= 配置 locate 指令使用的数据库。locate 指令预设的数据库位于/var/lib/mlocate 目录里，文档名为 mlocate.db\n‍\nlocate 与 find 的区别: find 是去硬盘找，locate 只在/var/lib/slocate 资料库中找。\n‍\nlocate 的速度比 find 快，它并不是真的查找，而是查数据库，一般文件数据库在/var/lib/mlocate/mlocate.db 中，所\n以 locate 的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库(updatedb)\n‍\n# 归档 ‍\n# tar 归档管理\n把一系列文件归档到一个大文件中，也可以把档案文件解开以恢复数据。\n‍\ntar [参数] 打包文件名 文件 tar 命令参数很特殊，其参数前面可以使用“-”，也可以不使用\n注意：除了 f 需要放在参数的最后，其它参数的顺序任意\n‍\n-c 生成档案文件，创建打包文件 -v 列出归档解档的详细过程，显示进度 -f 指定档案文件名称，f 后面一定是.tar 文件，所以必须放选项最后 -t 列出档案中包含的文件 -x 解开档案文件 -z 调用 gzip 实现压缩 ‍\ntar 命令中-z 选项可以调用 gzip 实现了一个压缩的功能，实行一个先打包后压缩的过程\n压缩用法：tar [zcvf] 压缩包包名 文件1 文件2 ... 解压用法： tar [zxvf] 压缩包包名 例如： tar zcvf test.tar.gz 1.c 2.c 3.c 4.c把 1.c 2.c 3.c 4.c 压缩成 test.tar.gz ‍\n解压到指定目录：-C （解压时可以不指定-z 选项）\ntar xvf test.tar.gz -C number/ ‍\n# gzip bzip2\n文件压缩解压\n‍\ntar与gzip命令结合使用实现文件打包、压缩。 tar只负责打包文件，但不压缩，用gzip压缩tar打包后的文件，其扩展名一般用xxxx.tar.gz ‍\ngzip [选项] 被压缩文件 ‍\n-d 解压文件 -r 压缩文件 ‍\nbzip2 命令跟 gzip 用法类似\n‍\n压缩用法：tar jcvf 压缩包包名 文件...(tar jcvf bk.tar.bz2 *.c) 解压用法：tar jxvf 压缩包包名 (tar jxvf bk.tar.bz2) ‍\n‍\n# zip unzip\n文件压缩解压\n‍\n通过 zip 压缩文件的目标文件不需要指定扩展名，默认扩展名为 zip\n压缩文件：zip [-r] 目标文件(没有扩展名) 源文件\n解压文件：unzip -d 解压后目录文件 压缩文件\n‍\n# 管道 |\n管道命令是\u0026rsquo;|\u0026rsquo;，一个命令的输出可以通过管道做为另一个命令的输入, |的左右分为两端，从左端写入到右端通过它可以对数据进行连续处理\n管道命令仅处理标准输出，对于标准错误输出，将忽略\n管道命令右边命令，必须能够接收标准输入流命令才行，否则传递过程中数据会抛弃。\n常用来作为接收数据管道命令有： less,more,head,tail，而 ls, cp, mv 就不行\n‍\n# 综合 ‍\n使用 ls、grep 和 wc 这三个命令来统计某个路径下文件或者文件夹的数量。例如：\n统计当前目录下文件的个数（不包括目录）：ls -l | grep \u0026ldquo;^-\u0026rdquo; | wc -l 统计当前目录下文件的个数（包括子目录）：ls -lR| grep \u0026ldquo;^-\u0026rdquo; | wc -l 查看某目录下文件夹 (目录)的个数（包括子目录）：ls -lR | grep \u0026ldquo;^d\u0026rdquo; | wc -l 统计当前文件夹下叫某某的文件的数量：find . -name filename | wc -l 统计当前文件夹下指定类型的文件的数量：find -name \u0026ldquo;*.js\u0026rdquo; | wc -l ‍\n使用 find 命令获取所有文件，然后使用 wc 命令计算数量。例如：\n统计某个目录中的文件数（包括子目录）：find directory_path -type f | wc -l 递归统计出文件夹下所有文件的数目：find /path/to/folder -name \u0026ldquo;*.java\u0026rdquo; | wc -l 递归统计出文件夹下所有子文件夹的数目：find /path/to/folder -type d | wc -l ‍\n‍\n# wc 统计字数\n‍\n可以计算文件的 Byte 数、字数、或是列数，若不指定文件名称、或是所给予的文件名为\u0026rdquo;-\u0026quot;，则 wc 指令会从标准输入设\n备读取数据\n‍\nwc [-lwm] [filename],[filename2],... -l: 统计行数 -w： 统计英文单词 -m： 统计字符数 默认的情况下，wc 将计算指定文件的行数、字数，以及字节数\n‍\n示例\n$ wc testfile # testfile文件的统计信息 3 92 598 testfile # testfile文件的行数为3、单词数92、字节数598 ‍\n# cut 列选取命令\n‍\n-d ： 后面接分隔字符。与 -f 一起使用； -f ： 依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思； -c ： 以字符 (characters) 的单位取出固定字符区间 cut 以行为单位，根据分隔符把行分成若干列，这样就可以指定选取哪些列了\n‍\n示例\ncut -d \u0026#39;分隔字符\u0026#39; -f 选取的列数 echo $PATH|cut -d \u0026#39;:\u0026#39; -f 2 --选取第2列 echo $PATH|cut -d \u0026#39;:\u0026#39; -f 3,5 --选取第3列和第5列 echo $PATH|cut -d \u0026#39;:\u0026#39; -f 3-5 --选取第3列到第5列 echo $PATH|cut -d \u0026#39;:\u0026#39; -f 3- --选取第3列到最后1列 echo $PATH|cut -d \u0026#39;:\u0026#39; -f 1-3,5 --选取第1到第3列还有第5列 ‍\n# grep 行选取命令\n‍\ngrep [-cinv] \u0026#39;查找的字符串\u0026#39; filename 在 grep 命令中输入字符串参数时，最好引号或双引号括起来。例如： grep \u0026lsquo;a\u0026rsquo; 1.txt\n‍\n-v 显示不包含匹配文本的所有行（相当于求反） -n 显示匹配行及行号 -i 忽略大小写 -c 计算找到的行数 grep 搜索内容串可以是正则表达式(略)\n‍\n实例：\n显示所有以“h”结尾的行\n​grep h$​\n匹配所有以“a”开头且以“e”结尾的，中间包含 2 个字符的单词\n​grep '\u0026lt;a..e\u0026gt;'​\n‍\n# sort 排序\n‍\nsort [-fbMnrtuk] [file or stdin] ‍\n-f ： 忽略大小写的差异，例如 A 与 a 视为编码相同； -b ： 忽略最前面的空格符部分； -M ： 以月份的名字来排序，例如 JAN, DEC 等等的排序方法； -n ： 使用『纯数字』进行排序(默认是以文字型态来排序的)； -r ： 反向排序； -u ： 就是 uniq ，相同的数据中，仅出现一行代表； -t ： 分隔符，默认是用 [tab] 键来分隔； -k ： 以哪个区间 (field) 来进行排序 ‍\n默认是以第一个字符升序排序:\n# cat /etc/passwd | sort 以第 3 列排序：\ncat /etc/passwd | sort -t \u0026#39;:\u0026#39; -k 3 使用数字排序：\ncat /etc/passwd | sort -t \u0026#39;:\u0026#39; -k 3n 倒序排序：\ncat /etc/passwd | sort -t \u0026#39;:\u0026#39; -k 3nr ‍\n# uniq 去重\n‍\n-i ： 忽略大小写字符的不同； -c ： 进行计数 -u ： 只显示唯一的行 该命令用于排完序之后，对排序结果进行去重\n‍\n$ last | cut -d \u0026#39; \u0026#39; -f 1 | sort | uniq ‍\n示例\n排序之后删除了重复行，同时在行首位置输出该行重复的次数： #sort testfile | uniq -c 仅显示存在重复的行，并在行首显示该行重复的次数： #sort testfile | uniq -dc ‍\n# tee 同时输出多个文件\n从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。\n‍\n一般情况下用重定向实现，需要同时输出多个文件时可以使用该命令。\n‍\n-a 或\u0026ndash;append 附加到既有文件的后面，而非覆盖它\n‍\n# tr 替换指定的字符\n不指定参数时，即表示替换指定的字符为另一个字符，支持指定的字符集合\n‍\n-d, \u0026ndash;delete：删除指定的字符 -s, \u0026ndash;squeeze-repeats：缩减连续重复的字符成指定的单个字符 ‍\n示例\n将文件testfile中的小写字母全部转换成大写字母 cat testfile |tr a-z A-Z 或 cat testfile |tr [:lower:] [:upper:] 删除指定的字符： $ cat t|tr -d \u0026#39;dv\u0026#39; ‍\n# join 文件按行连接\n‍\n将两个文件中指定栏位相同的行连接起来。即按照两个文件中共同拥有的某一列，将对应的行拼接成一行\n注意：在使用 join 之前所处理的文件要事先经过排序\n‍\n‍\n# paste 将多个文件对应行链接在一起\npaste [-s][-d \u0026lt;间隔字符\u0026gt;][文件...] ‍\n-d\u0026lt;间隔字符\u0026gt;或\u0026ndash;delimiters=\u0026lt;间隔字符\u0026gt; 用指定的间隔字符取代跳格字符。\n-s 或\u0026ndash;serial 串列进行而非平行处理。\n[文件…] 指定操作的文件路径\n‍\n# split 文件切割\n‍\n该指令将大文件分割成较小的文件，在默认情况下将按照每 1000 行切割成一个小文件\n‍\n-\u0026lt;行数\u0026gt; : 指定每多少行切成一个小文件 -b\u0026lt;字节\u0026gt; : 指定每多少字节切成一个小文件 -C\u0026lt;字节\u0026gt; : 与参数\u0026rdquo;-b\u0026quot;相似，但是在切 割时将尽量维持每行的完整性 [输出文件名] : 设置切割后文件的前置文件名， split 会自动在前置文件名后再加上编号 ‍\n# xargs 参数代换\n‍\n不是所有的命令都支持管道，如 ls，对于不支持管道的命令，可以通过 xargs 让其有管道命令的效果\nxargs 用作替换工具，读取输入数据重新格式化后输出\n‍\n‍\n# 特殊 ‍\n‍\n‍\n‍\n‍\n# 用户管理 ‍\n用户管理包括用户与组账号的管理。\n在 Unix/Linux 系统中，不论是由本机或是远程登录系统，每个系统都必须拥有一个账号，并且对于不同的系统资源拥有不同的使用权限。\nUnix/Linux 系统中的 root 账号通常用于系统的维护和管理，它对 Unix/Linux 操作系统的所有部分具有不受限制的访问权限。\n在 Unix/Linux 安装的过程中，系统会自动创建许多用户账号，而这些默认的用户就称为“标准用户”。\n在大多数版本的 Unix/Linux 中，都不推荐直接使用 root 账号登录系统。\n‍\n实现用户账号的管理，要完成的工作主要有如下几个方面：\n用户账号的添加、删除与修改。 用户口令的管理。 用户组的管理。 ‍\n# 用户 ‍\n# whoami 查看当前用户\n查看当前系统当前账号的用户名。可通过 cat /etc/passwd 查看系统用户信息\n‍\n# who 查看登录用户\n‍\nwho 命令用于查看当前所有登录系统的用户信息\n‍\n-m 或 am I 只显示运行 who 命令的用户名、登录终端和登录时间 -q 或\u0026ndash;count 只显示用户的登录账号和登录用户的数量 -u 在登录时间后显示该用户最后一次操作到当前的时间间隔 -u 或\u0026ndash;heading 显示列标题 ‍\n‍\n# exit 退出登录账户\n如果是图形界面，退出当前终端； 如果是使用ssh远程登录，退出登陆账户； 如果是切换后的登陆用户，退出则返回上一个登陆账号。 ‍\n# useradd 添加用户账号\n‍\n在 Unix/Linux 中添加用户账号可以使用 adduser 或 useradd 命令，因为 adduser 命令是指向 useradd 命令的一个链接，因此，这两个命令的使用格式完全一样。\nuseradd [参数] 新建用户账号 ‍\n-c comment 指定一段注释性描述。 -d 目录 指定用户主目录，如果此目录不存在，则同时使用-m 选项，可以创建主目录。 -g 用户组 指定用户所属的用户组。 -G 用户组，用户组 指定用户所属的附加组。 -s Shell 文件 指定用户的登录 Shell。 -u 用户号 指定用户的用户号，如果同时有-o 选项，则可以重复使用其他用户的标识号。 ‍\n相关说明：\nLinux 每个用户都要有一个主目录，主目录就是第一次登陆系统，用户的默认当前目录(/home/用户)；\n每一个用户必须有一个主目录，所以用 useradd 创建用户的时候，一定给用户指定一个主目录；\n如果创建用户的时候，不指定组名，那么系统会自动创建一个和用户名一样的组名。\n若创建用户时未指定家目录，后期可通过 usermod -d /home/abc abc 指定\n‍\nuseradd -d /home/abc abc -m 创建abc用户，如果/home/abc目录不存在，就自动创建这个目录，同时用户属于abc组 useradd -d /home/a a -g test -m 创建一个用户名字叫a，主目录在/home/a，如果主目录不存在，就自动创建主目录，同时用户属于test组 cat /etc/passwd 查看系统当前用户名 useradd -s /bin/sh -g group –G adm,root gem 此命令新建了一个用户gem，该用户的登录Shell是 `/bin/sh`，它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。 这里可能新建组：`#groupadd group及groupadd adm` 增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。 Linux 提供了集成的系统管理工具 userconf，它可以用来对用户账号进行统一管理。\n‍\n‍\n# usermod 修改用户\n‍\n常用的选项包括 -c, -d, -m, -g, -G, -s, -u 以及-o 等 ，这些选项的意义与 useradd 命令中的选项一样，可以为用户指定新的资源值\n‍\nusermod -g 用户组 用户名 修改用户所在组 usermod -d 家目录 用户名 改用户的家目录位置 ‍\n另外，有些系统可以使用选项：-l 新用户名\n这个选项指定一个新的账号，即将原来的用户名改为新的用户名。\n例如：\n# usermod -s /bin/ksh -d /home/z –g developer sam 此命令将用户 sam 的登录 Shell 修改为 ksh，主目录改为/home/z，用户组改为 developer。\n‍\n# userdel 删除用户: 将/etc/passwd 等系统文件中的该用户记录删除，必要时还删除用户的主目录。\n删除 abc 用户，但不会自动删除用户的主目录\n‍\nuserdel [-r] 用户名 -r 用户名 删除用户，同时删除用户的主目录\n‍\n‍\n# passwd 设置用户密码\n超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令\npasswd [选项] 用户名 ‍\n-l 锁定口令，即禁用账号。 -u 口令解锁。 -d 使账号无口令。这样用户下一次就不再允许了 -f 强迫用户下次登录时修改口令。 ‍\n普通用户修改自己的口令时，passwd 命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。\n‍\n‍\n‍\n‍\n# su 切换用户\n‍\nsu 切换到 root 用户 su root 切换到 root 用户 su - 切换到 root 用户，同时切换目录到/root su - root 切换到 root 用户，同时切换目录到/root su 普通用户 切换到普通用户 su - 普通用户 切换到普通用户，同时切换普通用户所在的目录 ‍\nsu 后面可以加“-”会将当前的工作目录自动转换到切换后的用户主目录\n‍\n‍\n# sudo 以 root 身份执行指令\nsudo 命令可以临时获取 root 权限\n使用权限：在 /etc/sudoers 中有出现的使用者\n‍\nsudoers 文件配置语法\nuser MACHINE=COMMANDS 用户 登录的主机=（可以变换的身份） 可以执行的命令 ‍\n# 组管理 ‍\n# groupadd 添加、删除组账号\n‍\ncat /etc/group 查看用户组\n‍\n# groupmod 修改用户组的属性\ngroupmod [选项] 用户组 ‍\n-g GID 为用户组指定新的组标识号。\n-o 与-g 选项同时使用，用户组的新 GID 可以与系统已有用户组的 GID 相同。\n-n 新用户组 将用户组的名字改为新名字\n‍\n示例\n将组group2的组标识号修改为102： groupmod -g 102 group2 将组group2的标识号改为10000，组名修改为group3： groupmod –g 10000 -n group3 group2 此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。 groupadd group1 ‍\n‍\n# newgrp ‍\n如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。\n用户可以在登录后，使用命令 newgrp 切换到其他用户组，这个命令的参数就是目的用户组\nnewgrp root 这条命令将当前用户切换到 root 用户组，前提条件是 root 用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成\n‍\n‍\n# groupdel 删除一个已有的用户组\ngroupdel 用户组 ‍\n‍\n# 系统管理 ‍\n# 日期 ‍\n# cal 查看当前日历\n-y 显示整年日历\n‍\n# date 显示或设置时间\n设置时间格式（需要管理员权限）\ndate [MMDDhhmm[[CC]YY][.ss]] +format MM 为月，DD 为天，hh 为小时，mm 为分钟；CC 为年前两位，YY 为年的后两位，ss 为秒\n显示时间格式（date \u0026lsquo;+%y,%m,%d,%H,%M,%S\u0026rsquo;）\n‍\n‍\n# 进程 ‍\n# ps 查看进程信息\n-a 显示终端上的所有进程，包括其他用户的进程 -u 显示进程的详细状态 -x 显示没有控制终端的进程 -w 显示加宽，以便显示更多的信息 -r 只显示正在运行的进程 ‍\n常见用法\nps -e 查看所有进程信息（瞬时的） ps -u root -N 查看所有不是 root 运行的进程 ps ax 显示所有进程状态状态 ps -ef |grep xxx 显示含有 xxx 的进程 ‍\n更多命令选项\nps a 显示现行终端机下的所有程序，包括其他用户的程序。 ps -A 显示所有程序。 ps c 列出程序时，显示每个程序真正的指令名称，而不包含路 径，参数或常驻服务的标示。 ps -e 此参数的效果和指定\u0026quot;A\u0026quot;参数相同。 ps e 列出程序时，显示每个程序所使用的环境变量。 ps f 用 ASCII 字符显示树状结构，表达程序间的相互关系。 ps -H 显示树状结构，表示程序间的相互关系。 ps -N 显示所有的程序，除了执行 ps 指令终端机下的程序之外。 ps s 采用程序信号的格式显示程序状况。 ps u 以用户为主的格式来显示程序状况。 ps x 显示所有程序，不以终端机来区分。 ‍\npstree\n以树状图显示进程关系\n‍\n特别表明在运行的进程：\npstree -apnh //显示进程间的关系\n‍\n同时显示用户名称：\npstree -u //显示用户名称\n‍\n# top 动态显示进程\n能够在运行后，在指定的时间间隔更新显示信息。-d 参数可以指定显示信息更新的时间间隔\n‍\n在 top 命令执行后，可以按下按键得到对显示的结果进行排序\n‍\nM 根据内存使用量来排序 P 根据 CPU 占有率来排序 T 根据进程运行时间的长短来排序 U 可以根据后面输入的用户名来筛选进程 K 可以根据后面输入的 PID 来杀死进程。 q 退出 h 获得帮助 更高级的命令是 htop，但需要安装\n‍\n# kill 终止进程\n指定进程号的进程，需要配合 ps 使用\n信号值从 0 到 15，其中 9 为绝对终止，可以处理一般信号无法终止的进程\n‍\nkill [-signal] pid ‍\n‍\n# 电源 ‍\n# reboot,shutdown,init ‍\nreboot 重新启动操作系统\nshutdown –r now 重新启动操作系统，shutdown 会给别的用户提示\nshutdown -h now 立刻关机，其中 now 相当于时间为 0 的状态\nshutdown -h XXX 系统在今天的 XXX 会关机\nshutdown -h +10 系统再过十分钟后自动关机\ninit 0 关机\ninit 6 重启\n‍\n# 环境 ‍\n# which 查找$PATH 中设置命令及安装文件目录所在位置\n‍\n# export 设置或显示环境变量\n在 shell 中执行程序时，shell 会提供一组环境变量。export 可新增，修改或删除环境变量，供后续执行的程序使用。\nexport 的效力仅限于该次登陆操作\n‍\nexport [-fnp][变量名称]=[变量设置值] -f 代表[变量名称]中为函数名称。 -n 删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。 -p 列出所有的 shell 赋予程序的环境变量。 ‍\n# 磁盘管理 ‍\nLinux 磁盘管理常用三个命令为 df、du 和 fdisk\ndf（英文全称：disk free）：列出文件系统的整体磁盘使用量 du（英文全称：disk used）：检查磁盘空间使用量 fdisk：用于磁盘分区 ‍\n# 空间查看 ‍\n# df 检测磁盘空间, 可以显示所有文件系统对节点和磁盘块的使用情况\ndf [-ahikHTm] [目录或文件名] ‍\n-a 列出所有的文件系统，包括系统特有的 /proc 等文件系统； -k 以 KBytes 的容量显示各文件系统； -m 以 MBytes 的容量显示各文件系统； -h 以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示； -H 以 M=1000K 取代 M=1024K 的进位方式； -T 显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出； -i 不用硬盘容量，而以 inode 的数量来显示 ‍\n实例 1\n将系统内所有的文件系统列出来！\n[root@www ~]# df Filesystem 1K-blocks Used Available Use% Mounted on /dev/hdc2 9920624 3823112 5585444 41% / /dev/hdc3 4956316 141376 4559108 4% /home /dev/hdc1 101086 11126 84741 12% /boot tmpfs 371332 0 371332 0% /dev/shm 在 Linux 底下如果 df 没有加任何选项，那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！\n‍\n实例 2\n将容量结果以易读的容量格式显示出来\n[root@www ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/hdc2 9.5G 3.7G 5.4G 41% / /dev/hdc3 4.8G 139M 4.4G 4% /home /dev/hdc1 99M 11M 83M 12% /boot tmpfs 363M 0 363M 0% /dev/shm ‍\n实例 3\n将系统内的所有特殊文件格式及名称都列出来\n[root@www ~]# df -aT Filesystem Type 1K-blocks Used Available Use% Mounted on /dev/hdc2 ext3 9920624 3823112 5585444 41% / proc proc 0 0 0 - /proc sysfs sysfs 0 0 0 - /sys devpts devpts 0 0 0 - /dev/pts /dev/hdc3 ext3 4956316 141376 4559108 4% /home /dev/hdc1 ext3 101086 11126 84741 12% /boot tmpfs tmpfs 371332 0 371332 0% /dev/shm none binfmt_misc 0 0 0 - /proc/sys/fs/binfmt_misc sunrpc rpc_pipefs 0 0 0 - /var/lib/nfs/rpc_pipefs ‍\n实例 4\n将 /etc 底下的可用的磁盘容量以易读的容量格式显示\n[root@www ~]# df -h /etc Filesystem Size Used Avail Use% Mounted on /dev/hdc2 9.5G 3.7G 5.4G 41% / ‍\n‍\n‍\n# du 检测目录所占磁盘空间\n统计目录或文件所占磁盘空间的大小，该命令的执行结果与 df 类似，du 更侧重于磁盘的使用状况\ndu [-ahskm] 目录或文件名 ‍\ndu 没有加任何选项时，只列出当前目录下的所有文件夹容量（包括隐藏文件夹）\n-a 列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。 -h 以人们较易读的容量格式 (G/M) 显示； -s 列出总量而已，而不列出每个各别的目录占用容量； -S 不包括子目录下的总计，与 -s 有点差别。 -k 以 KBytes 列出容量显示； -m 以 MBytes 列出容量显示； ‍\n实例 1\n只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:\n[root@www ~]# du 8 ./test4 \u0026lt;==每个目录都会列出来 8 ./test2 ....中间省略.... 12 ./.gconfd \u0026lt;==包括隐藏文件的目录 220 . \u0026lt;==这个目录(.)所占用的总量 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。\n‍\n‍\n实例 2\n将文件的容量也列出来\n[root@www ~]# du -a 12 ./install.log.syslog \u0026lt;==有文件的列表了 8 ./.bash_logout 8 ./test4 8 ./test2 ....中间省略.... 12 ./.gconfd 220 . ‍\n‍\n实例 3\n检查根目录底下每个目录所占用的容量\n[root@www ~]# du -sm /* 7 /bin 6 /boot .....中间省略.... 0 /proc .....中间省略.... 1 /tmp 3859 /usr \u0026lt;==系统初期最大就是他了啦！ 77 /var 通配符 * 来代表每个目录。\n与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。\n‍\n‍\n# 分区 # fdisk ‍\n磁盘分区表操作工具\nfdisk [-l] 装置名称 ‍\n-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来\n‍\n离开 fdisk 时按下 q ，那么所有的动作都不会生效！相反的， 按下 w 就是动作生效的意思\n使用 p 可以列出目前这颗磁盘的分割表信息，这个信息的上半部在显示整体磁盘的状态\n‍\n实例 1\n列出所有分区信息 fdisk -l\n‍\n‍\n实例 2\n找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息\n[root@www ~]# df / \u0026lt;==注意：重点在找出磁盘文件名而已 Filesystem 1K-blocks Used Available Use% Mounted on /dev/hdc2 9920624 3823168 5585388 41% / [root@www ~]# fdisk /dev/hdc \u0026lt;==仔细看，不要加上数字喔！ Command (m for help): \u0026lt;==等待你的输入！ ‍\n输入 m 后，就会看到底下这些命令介绍\nCommand (m for help): m \u0026lt;== 输入 m 后，就会看到底下这些命令介绍 Command action a toggle a bootable flag b edit bsd disklabel c toggle the dos compatibility flag d delete a partition \u0026lt;==删除一个partition l list known partition types m print this menu n add a new partition \u0026lt;==新增一个partition o create a new empty DOS partition table p print the partition table \u0026lt;==在屏幕上显示分割表 q quit without saving changes \u0026lt;==不储存离开fdisk程序 s create a new empty Sun disklabel t change a partition\u0026#39;s system id u change display/entry units v verify the partition table w write table to disk and exit \u0026lt;==将刚刚的动作写入分割表 x extra functionality (experts only) ‍\n# 维护 # mkfs 磁盘格式化（make filesystem）\nmkfs [-t 文件系统格式] 装置文件名 -t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)\n查看 mkfs 支持的文件格式：mkfs [tab]\n‍\n实例 1\n查看 mkfs 支持的文件格式\n[root@www ~]# mkfs[tab][tab] mkfs mkfs.cramfs mkfs.ext2 mkfs.ext3 mkfs.msdos mkfs.vfat 按下两个[tab]，会发现 mkfs 支持的文件格式如上所示。\n‍\n实例 2\n将分区 /dev/hdc6（可指定你自己的分区） 格式化为 ext3 文件系统：\n[root@www ~]# mkfs -t ext3 /dev/hdc6 mke2fs 1.39 (29-May-2006) Filesystem label= \u0026lt;==这里指的是分割槽的名称(label) OS type: Linux Block size=4096 (log=2) \u0026lt;==block 的大小配置为 4K Fragment size=4096 (log=2) 251392 inodes, 502023 blocks \u0026lt;==由此配置决定的inode/block数量 25101 blocks (5.00%) reserved for the super user First data block=0 Maximum filesystem blocks=515899392 16 block groups 32768 blocks per group, 32768 fragments per group 15712 inodes per group Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912 Writing inode tables: done Creating journal (8192 blocks): done \u0026lt;==有日志记录 Writing superblocks and filesystem accounting information: done This filesystem will be automatically checked every 34 mounts or 180 days, whichever comes first. Use tune2fs -c or -i to override. # 这样就创建起来我们所需要的 Ext3 文件系统了！简单明了！ ‍\n‍\n# fsck 磁盘检验\n‍\nfile system check 用来检查和维护不一致的文件系统\n若系统掉电或磁盘发生问题，可利用 fsck 命令对文件系统进行检查。\n‍\nfsck [-t 文件系统] [-ACay] 装置名称 选项与参数：\n-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数 -s : 依序一个一个地执行 fsck 的指令来检查 -A : 对/etc/fstab 中所有列出来的 分区（partition）做检查 -C : 显示完整的检查进度 -d : 打印出 e2fsck 的 debug 结果 -p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行 -R : 同时有 -A 条件时，省略 / 不检查 -V : 详细显示模式 -a : 如果检查有错则自动修复 -r : 如果检查有错则由使用者回答是否修复 -y : 选项指定检测每个文件是自动输入 yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。 ‍\n实例 1\n查看系统有多少文件系统支持的 fsck 命令：\n[root@www ~]# fsck[tab][tab] fsck fsck.cramfs fsck.ext2 fsck.ext3 fsck.msdos fsck.vfat ‍\n实例 2\n强制检测 /dev/hdc6 分区:\n[root@www ~]# fsck -C -f -t ext3 /dev/hdc6 fsck 1.39 (29-May-2006) e2fsck 1.39 (29-May-2006) Pass 1: Checking inodes, blocks, and sizes Pass 2: Checking directory structure Pass 3: Checking directory connectivity Pass 4: Checking reference counts Pass 5: Checking group summary information vbird_logical: 11/251968 files (9.1% non-contiguous), 36926/1004046 blocks 如果没有加上 -f 的选项，则由于这个文件系统不曾出现问题，检查的经过非常快速！若加上 -f 强制检查，才会一项一项的显示过程。\n‍\n# mount 磁盘挂载与卸除 umount\n‍\nmount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点 -f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下\n-n ：不升级 /etc/mtab 情况下卸除\n‍\n实例 1\n用默认的方式，将刚刚创建的 /dev/hdc6 挂载到 /mnt/hdc6 上面！\n[root@www ~]# mkdir /mnt/hdc6 [root@www ~]# mount /dev/hdc6 /mnt/hdc6 [root@www ~]# df Filesystem 1K-blocks Used Available Use% Mounted on .....中间省略..... /dev/hdc6 1976312 42072 1833836 3% /mnt/hdc6 ‍\n磁盘卸载命令 umount​ 语法：\numount [-fn] 装置文件名或挂载点 选项与参数：\n-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下； -n ：不升级 /etc/mtab 情况下卸除。 卸载/dev/hdc6\n[root@www ~]# umount /dev/hdc6 ‍\n‍\n# 多机交互 ‍\n‍\n# 防火墙 ‍\n# firewall firewall-cmd 是 Linux 中专门用于控制防火墙的命令\n‍\n开放指定 8080+80+3306+端口\nfirewall-cmd \u0026ndash;zone=public \u0026ndash;add-port=6379/tcp \u0026ndash;permanent 关闭指定端口\nfirewall-cmd \u0026ndash;zone=public \u0026ndash;remove-port=8080/tcp \u0026ndash;permanent 立即生效\nfirewall-cmd \u0026ndash;reload 查看开放的端口\nfirewall-cmd \u0026ndash;zone=public \u0026ndash;list-ports ‍\n# systemctl systemctl 是管理 Linux 中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作\n‍\n查看防火墙状态\nsystemctl status firewalld、 firewall-cmd \u0026ndash;state 暂时关闭防火墙\nsystemctl stop firewalld 永久关闭防火墙\nsystemctl disable firewalld 开启防火墙\nsystemctl start firewalld ‍\n‍\n# 网络 ‍\n# netstat 查看网络状态\nnetstat [-acCeFghilMnNoprstuvVwx][-A\u0026lt;网络类型\u0026gt;][--ip] ‍\n-a 或\u0026ndash;all 显示所有连线中的 Socket。 -A\u0026lt;网络类型\u0026gt;或\u0026ndash;\u0026lt;网络类型\u0026gt; 列出该网络类型连线中的相关地址。 -c 或\u0026ndash;continuous 持续列出网络状态。 -C 或\u0026ndash;cache 显示路由器配置的快取信息。 -e 或\u0026ndash;extend 显示网络其他相关信息。 -F 或\u0026ndash;fib 显示 FIB。 -g 或\u0026ndash;groups 显示多重广播功能群组组员名单。 -h 或\u0026ndash;help 在线帮助。 -i 或\u0026ndash;interfaces 显示网络界面信息表单。 -l 或\u0026ndash;listening 显示监控中的服务器的 Socket。 -M 或\u0026ndash;masquerade 显示伪装的网络连线。 -n 或\u0026ndash;numeric 直接使用 IP 地址，而不通过域名服务器。 -N 或\u0026ndash;netlink 或\u0026ndash;symbolic 显示网络硬件外围设备的符号连接名称。 -o 或\u0026ndash;timers 显示计时器。 -p 或\u0026ndash;programs 显示正在使用 Socket 的程序识别码和程序名称。 -r 或\u0026ndash;route 显示 Routing Table。 -s 或\u0026ndash;statistice 显示网络工作信息统计表。 -t 或\u0026ndash;tcp 显示 TCP 传输协议的连线状况。 -u 或\u0026ndash;udp 显示 UDP 传输协议的连线状况。 -v 或\u0026ndash;verbose 显示指令执行过程。 -V 或\u0026ndash;version 显示版本信息。 -w 或\u0026ndash;raw 显示 RAW 传输协议的连线状况。 -x 或\u0026ndash;unix 此参数的效果和指定\u0026rdquo;-A unix\u0026quot;参数相同。 \u0026ndash;ip 或\u0026ndash;inet 此参数的效果和指定\u0026rdquo;-A inet\u0026quot;参数相同。 ‍\n‍\n# ifconfig 查看或配置网卡信息\n‍\n‍\n# ping 测试远程主机/网络连通性\n‍\n# hostname 修改主机名\u0026amp;ip 地址\n显示主机名：hostname 临时修改：hostname xxx 永久修改: 对于centos系统 vim /etc/sysconfig/network 修改 IP 地址\nifconfig eth0 192.168.12.22(重启后无效)\n‍\n‍\n# 远程连接 ‍\n‍\n# ssh 远程免密登陆\n假如 A 要登陆 B, 在 A 上操作：\n首先生成密钥对, 再将 A 自己的公钥拷贝并追加到 B 的授权列表文件 authorized_keys 中\nssh-keygen (提示时，直接回车即可) ssh-copy-id B ‍\n# scp 远程文件复制\n‍\n用于 Linux 之间复制文件和目录，scp 是 secure copy 的缩写是 linux 系统下基于 ssh 登陆进行安全的远程文件\n拷贝命令\nscp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。\n使用 scp 命令要确保使用的用户具有可读取远程服务器相应文件的权限，否则 scp 命令是无法起作用的。\n‍\n-P 参数来设置命令的端口号：\n#scp 命令使用端口号 4588 scp -P 4588 remote@xiaoxiaoming.xyz:/usr/local/sin.sh /home/administrator ‍\n从本地复制到远程命令格式：\n复制文件 scp local_file remote_username@remote_ip:remote_folder 或者 scp local_file remote_username@remote_ip:remote_file 或者 scp local_file remote_ip:remote_folder 或者 scp local_file remote_ip:remote_file 复制文件夹 scp -r local_folder remote_username@remote_ip:remote_folder 或者 scp -r local_folder remote_ip:remote_folder ‍\n从远程复制到本地：\nscp root@xiaoxiaoming.xyz:/home/root/others/music /home/space/music/1.mp3 scp -r xiaoxiaoming.xyz:/home/root/others/ /home/space/music/ ‍\n‍\n‍\n‍\n‍\n‍\n# 软件 ‍\n# 类型 ‍\n# 源码包 ‍\n优点：\n开源：如果有足够能力，可以修改源代码\n可以自由选择所需的功能\n软件是编译安装，所以更加适合自己的系统，更加稳定也效率高\n卸载方便：直接删除文件夹\n缺点：\n安装过程步骤较多，尤其是安装较大的软件集合（如：LAMP 环境搭建），容易出现拼写\n错误\n编译时间较长，安装比二进制安装时间长\n因为是编译安装，安装过程中一旦报错新手很难解决\n# rpm 包 二进制包：与源代码区别就是源代码包经过编译成为机器能直接识别的二进制包\n优点：\n包管理系统简单，只需要几个命令就可以实现包的安装、升级、查询和卸载\n安装速度比源码包快\n缺点：\n经过编译，不可以看到源代码\n功能选择不如源代包灵活\n依赖性\n‍\n# 依赖性 查询依赖（www.rpmfind.net）\n‍\n默认安装位置\n‍\n‍\n# 管理 ‍\n# 依赖性问题 推荐下载低版本的\n‍\n‍\n# 查询软件是否安装 使用： rpm -q 包名 选项： -q（query）\t查询 -a（all）\t所有 ‍\n‍\n# YUM 小黄狗\nyum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。\n基于 RPM 包管理，能够从指定的服务器(YUM 服务器, 也就是软件集合, 有软件包索引和依赖关系数据)\n自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。\nyum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。\n方便便捷，依赖自动解决(不用自己去配了)\n‍\n‍\n‍\n‍\n# 管理 ‍\n‍\n# 查询可用软件列表 ‍\n​​yum list\nyum search 关键字\n‍\n‍\n# 更新 国内 yum 源\n‍\n网易（163）yum 源是国内最好的 yum 源之一 ，无论是速度还是软件版本，都非常的不错。\n将 yum 源设置为 163 yum，可以提升软件包安装和更新的速度，同时避免一些常见软件版本无法找到。\n‍\n首先备份/etc/yum.repos.d/CentOS-Base.repo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载对应版本 repo 文件, 放入 /etc/yum.repos.d/ CentOS7 ：http://mirrors.163.com/.help/CentOS7-Base-163.repo wget http://mirrors.163.com/.help/CentOS7-Base-163.repo mv CentOS7-Base-163.repo /etc/yum.repos.d/CentOS-Base.repo ‍\n运行以下命令生成缓存\nyum clean all yum makecache ‍\n‍\n除了网易之外，国内还有其他不错的 yum 源，比如中科大和搜狐。\n中科大的 yum 源，安装方法查看：https://lug.ustc.edu.cn/wiki/mirrors/help/centos\nsohu 的 yum 源安装方法查看: http://mirrors.sohu.com/help/centos.html\n‍\n优先选择哪个 YUM 源?(选做)\n‍\n‍\n# 命令 ‍\n# yum ‍\nyum [options] [command] [package ...] ‍\noptions：可选，选项包括-h（帮助），-y（当安装过程提示选择全部为\u0026quot;yes\u0026rdquo;），-q（不显示安装的过程）等\n等。 command：要进行的操作。 package：操作的对象。 ‍\n‍\n实例：\n‍\n列出所有可更新的软件清单命令： yum check-update\n更新所有软件命令： yum update\n仅安装指定的软件命令： yum install \u0026lt;package_name\u0026gt;\n仅更新指定的软件命令： yum update \u0026lt;package_name\u0026gt;\n显示包信息： yum info \u0026lt;package_name\u0026gt;\n列出所有可安裝的软件清单命令： yum list\n删除软件包命令： yum remove \u0026lt;package_name\u0026gt; (会同时卸载依赖)\n查找软件包 命令： yum search 清除缓存命令:\nyum clean packages: 清除缓存目录下的软件包\nyum clean headers: 清除缓存目录下的 headers\nyum clean oldheaders: 清除缓存目录下旧的 headers\nyum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的 headers\n‍\n# 安装 ==yum 会自动安装依赖，很方便==\nyum -y install 包名 选项： install\t安装 -y\t自动回答yes ‍\n# 升级 此时注意如果不加包名：会出现把所有软件包都升级包括 Linux 内核，但是 Linux 升级完成后需要在本地进行配置，如果是远程服务器管理的话，你会出现==服务器永远启动不了==\nyum -y updata 包名 选项： updata\t升级 -y\t自动回答yes ‍\n‍\n# 卸载 ==yum 卸载会把依赖也卸载，要注意==\nyum -y remove 包名 选项： remove\t卸载 -y\t自动回答yes ‍\n‍\n‍\n# RPM Red Hat 公司随 Redhat Linux 推出了一个软件包管理器，通过它能够更加轻松容易地实现软件的安装\n可以看到 软件名-版本号-适应硬件架构​\n‍\nnoarch 适合任何版本 X86/64 ‍\n‍\nRPM 默认安装路径：\nRPM 包默认安装路径 文件含义 /etc 配置文件安装目录 /usr/bin 可执行的命令安装目录 /usr/lib 程序所使用的函数库保存位置 /usr/share/doc 基本的软件使用手册保存位置 usr/share/man 帮助文件保存位置 ‍\n‍\n# 管理 ‍\n‍\n‍\n# 命令 ‍\nrpm -ivh \u0026lt;rpm 包名\u0026gt; 安装软件 rpm -e \u0026lt;rpm 包名\u0026gt; 卸载安装 rpm -qi \u0026lt;rpm 包名\u0026gt; 显示软件安装信息 rpm -qa | grep xxx 查询软件是否安装（包括相关依赖） rpm -Uvh \u0026lt;rpm 包名\u0026gt; 升级一个 rpm ‍\n具体参数详解：\n-i, \u0026ndash;install 安装包\n-v, \u0026ndash;verbose 列出更多详细信息，安装进度\n-h, \u0026ndash;hash 安装时列出 hash 标记 (与 -v 连用)\n-e, \u0026ndash;erase 卸载安装包\n-U, \u0026ndash;upgrade=+ 升级包\n\u0026ndash;replacepkge 无论软件包是否已被安装，都强行安装软件包 \u0026ndash;test 安装测试，并不实际安装 \u0026ndash;nodeps 忽略软件包的依赖关系强行安装(其他也可用) \u0026ndash;force 忽略软件包及文件的冲突 -q, \u0026ndash;query 查询\n-a, \u0026ndash;all 查询/校验所有的安装包 -p, \u0026ndash;package 查询/校验一个安装文件 -l, \u0026ndash;list 列出安装文件 -d, \u0026ndash;docfiles 列出所有文档文件 -f, \u0026ndash;file 查询/校验安装包中所包含的文件 ‍\n‍\n# 压缩包 ‍\n‍\n# 管理 ‍\n# 解压后直接使用 解压完最好先看 README.md\n使用对应压缩命令，把软件解压后直接使用\n‍\n# 命令 ‍\n# 示例 ‍\n安装源码包前一定要有==gcc 编译器==\n阅读下面 yum 安装 gcc 很方便。\n一起输入命令，回车执行命令\n\u0026gt;1 .tar压缩格式 压缩： tar 选项[-zcf] [压缩后文件名] [目录] -c\t打包 -v\t显示详细信息 -f\t指定文件名 -z\t打包同时压缩 解压： tar -zxvf 包名 -x\t解包 -v\t显示详细信息 -f\t指定解压文件 -z\t解压缩 \u0026gt;2 .zip压缩格式 压缩： zip 选项[-r] [压缩后文件名] [文件或目录] -r\t压缩目录 解压： 基本格式：unzip [选项] file[.zip] -Z　以形如 ls -l 的格式显示目标文件内容 -Z1　仅显示压缩文件内容的文件名 -l　显示压缩文件中包括时间、占用空间和文件名等信息 -t　在内存中解压文件并进行文件的完整性校验(CRC校验) -f　将磁盘上已经存在且内容新于对应磁盘文件的压缩内容解压出来 -n　解压缩时不覆盖已存在的文件(而是跳过) -q　安静模式，仅解压缩而不输出详细信息 -d dir　将文件解压至dir指定的文件夹中 \u0026gt;3 .bz2压缩格式 压缩： bzip2 选项[-k] [文件] -k\t产生压缩文件后保留原文件 解压： bzip2 选项[-k] [文件] 指令选项：(默认功能为压缩) -k\t产生压缩文件后 -c\t将输出写至标准输出 -d\t进行解压操作 -v\t输出压缩/解压的文件名和压缩比等信息 -k\t在压缩/解压过程中保留原文件 -digit\tdigit部分为数字(1-9)，代表压缩速度，digit越小， 则压缩速度越快，但压缩效果越差，digit越大， 则压缩速度越慢，压缩效果越好。默认为6. \u0026gt;4 .gz压缩格式 基础格式: gzip [Options] file1 file2 file3 指令选项：(默认功能为压缩) -c\t将输出写至标准输出，并保持原文件不变 -d\t进行解压操作 -v\t输出压缩/解压的文件名和压缩比等信息 -digit\tdigit部分为数字(1-9)，代表压缩速度，digit越小， 则压缩速度越快，但压缩效果越差， digit越大，则压缩速度越慢，压缩效果越好。 默认为6. ‍\n‍\n# IDEA 安装 HW ‍\n压缩包或可执行文件安装\n例如安装压缩包: idea.tar.gz​ 时候的操作\nmkdir -p /opt/idea \u0026amp;\u0026amp; tar -zxvf ./idea.tar.gz -C /opt/idea ‍\n到/opt/idea 启动!\n​./idea.sh​\n‍\n‍\n==配置 IDEA 环境变量==\n目的是无论终端在哪个工作目录，都可以通过./idea.sh 指令启动 IDEA，不用进入到 IDEA 的环境目录了。\n我们先假设我们解压后的目录为 idea-IC-213.6777.52（这个文件名与你下载的 IDEA 版本有关系，可能跟我的不一致，自行替换为自己的目录），查看这个解压目录名称的指令为：\n​ls /opt/idea​\n‍\nidea-IU-232.9921.47\n记录下这个文件名，然后将其添加至环境变量中：\n我们通过 vim 指令对环境变量文件进行编辑：\nvim ~/.bashrc ‍\n然后将如下的内容添加至~/.bashrc​ 文件的最后一行（ ！！！注意替换掉对应的目录名！！！ ）。\nexport IDEA_HOME=/usr/local/src/idea/idea-IU-232.9921.47 export PATH=:$PATH:${IDEA_HOME}/bin ‍\n通过:wq​ 进行保存即可\n接着我们让系统重新加载我们修改好的环境变量：\nsource ~/.bashrc 在任意目录下输入idea.sh​ 启动 IDEA 图形化界面了\n‍\n看来 Idea 需要跟随终端进行啊\n‍\n# VIM ‍\n‍\n# 注意 惊叹号 (!) 常常具有『强制』的意思\n首先，不要相信 vim 是地表最强编辑器之类的鬼话。vim 在控制台应用里有一定应用，但其产生的 swp 文件可能造成信息泄露，所以不管是在开发环境还是在生产环境大量使用 vim 都是强烈不建议的，投入大量时间研究其插件体系也是极大的浪费。\n‍\n‍\n# 模式 ‍\n命令模式 command-mode 用于输入指令，如：保存、运行、切换标签、切割屏幕等\n插入模式 insert-mode 也即编辑模式，用于编辑文本\n可视模式 visual-mode 相当于高亮选取文本后的正常模式\n正常模式 normal-mode 用于查看文本，也可复制、粘贴、撤销、重做等, 也可称为底线命令模式（Last line mode）\n‍\n‍\n命令\n‍\n用户刚刚启动 vi/vim，便进入了命令模式。 任何时候，不管用户处于何种模式，只要按一下 ESC 键，即可使 Vi 进入命令模式；\n此状态下敲击键盘动作会被 Vim 识别为命令，输入 : 可切换到底线命令模式，以在最底一行输入命令。\n若想要编辑文本：按下 i，切换到输入模式\n‍\n输入\n‍\n在命令模式下输入插入命令 i、附加命令 a 、打开命令 o、修改命令 c、取代命令 r 或替换命令 s 都可以进入文本输入模式。\n在该模式下，用户输入的任何字符都被 Vi 当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按键 ESC 即可。\n‍\n底行\n‍\n在命令模式下按下:（英文冒号）就进入了底行命令模式。\n‍\n==按:冒号即可进入 last line mode==\n:set nu 列出行号 :set nonu 取消行号 :#7 跳到文件中的第7行 /keyword 查找字符 按n向下 ?keyword 查找字符 按N向下 :n1,n2/word1/word2/gc 替换指定范围单词，c表示提示 :w 保存文件 :w filename 以指定的文件名另存 :n1,n2 w [filename] 将 n1 到 n2行另存 :r [filename] 读入另一个文件加到光标所在行后面 :! ls /home 在vi当中察看ls输出信息！ :q 离开vi :wq 和 :ZZ 和 :x 保存并退出vi ! 强制执行 :% s/^/#/g 来在全部内容的行首添加 # 号注释 :1,10 s/^/#/g 在1~10 行首添加 # 号注释 ‍\n==从 command mode 进入 Insert mode==\n按i在当前位置编辑 按a在当前位置的下一个字符编辑 按o插入新行，从行首开始编辑 按R(Replace mode)：R会一直取代光标所在的文字，直到按下 ESC为止；(常用) ‍\n==按 ESC 键退回 command mode==\nh←j↓k↑l→ 前面加数字移动指定的行数或字符数\n‍\n‍\n# 直属 ‍\n翻页 bu 上下整页，ud 上下半页\nctrl+b：上移一页\nctrl+f：下移一页\nctrl+u：上移半页\nctrl+d：下移半页\n‍\n行定位\nXgg 或 XG：定位第 X 行首字符\nG：移动到文章的最后\n7H:当前屏幕的第 7 行行首\nM：当前屏幕中间行的行首\n7L:当前屏幕的倒数第 7 行行首\n‍\n当前行定位\n$：移动到光标所在行的“行尾”\n0 或^：移动到光标所在行的“行首”\nw：光标跳到下个单词的开头\ne：光标跳到下个单词的字尾\nb：光标回到上个单词的开头\n‍\n编辑\nx：剪切当前字符\n7x：剪切从当前位置起 7 个字符\n大写的 X，表示从前面一个字符开始往前计算\ndd：剪切光标所在行。\n7dd：从光标所在行开始剪切 7 行\nd7G 删除光标所在到第 7 行的所有数据\nyw：复制当前单词\n7yw：复制从当前位置起 7 个单词\nyy：复制当前行\n6yy：从当前行起向下复制 6 行\ny7G 复制游标所在列到第 7 列的所有数据\np：粘贴\nu：撤销\nctrl+r：取消撤销\ncw：删除当前单词(从光标位置开始计算)，并进入插入模式\nc7w：删除 7 个单词并进入插入模式\n‍\n多行编辑\n按 ctrl+V 进入块模式，上下键选中快，按大写 G 选择到末尾，上下左右键移动选择位置\n按大写 I 进去编辑模式，输入要插入的字符，编辑完成按 ESC 退出\n选中要替换的字符后，按 c 键全部会删除，然后输入要插入的字符，编辑完成按 ESC 退出\n按 shift+V 可进入行模式，对指定行操作\n‍\n‍\n‍\n# 文件 ‍\nvim filename 打开或新建一个文件，并将光标置于第一行的首部\nvim -r filename 恢复上次 vim 打开时崩溃的文件\nvim -R filename 把指定的文件以只读方式放入 Vim 编辑器中\nvim + filename 打开文件，并将光标置于最后一行的首部\nvi +n filename 打开文件，并将光标置于第 n 行的首部\nvi +/pattern filename 打幵文件，并将光标置于第一个与 pattern 匹配的位置\nvi -c command filename 在对文件进行编辑前，先执行指定的命令\n‍\n‍\n# 插入模式 ‍\ni 在当前光标所在位置插入，光标后的文本相应向右移动\nI 在光标所在行的行首插入，行首是该行的第一个非空白字符，相当于光标移动到行首执行 i 命令\no 在光标所在行的下插入新的一行。光标停在空行首，等待输入文本\nO 在光标所在行的上插入新的一行。光标停在空行的行首，等待输入文本\na 在当前光标所在位置之后插入\nA 在光标所在行的行尾插入，相当于光标移动到行尾再执行 a 命令\nesc 键 退出编辑模式\nr 替换只会取代光标所在的那一个字符一次\nR 替换会一直取代光标所在的文字，直到按下 ESC 为止\n‍\n‍\n# 命令模式 ‍\n# 编辑命令 ‍\n快捷键 功能描述 ↑ 或 ctr + p 上一条命令 ↓ 或 ctr + n 下一条命令 ctr + b 移动到命令行开头 ctr + e 移动到命令行结尾 ctr + ← 向左一个单词 ctr + → 向右一个单词 ‍\n# 移动光标 ‍\nh 或 向左箭头键(←) 光标向左移动一个字符\nj 或 向下箭头键(↓) 光标向下移动一个字符\nk 或 向上箭头键(↑) 光标向上移动一个字符\nl 或 向右箭头键(→) 光标向右移动一个字符\n向下移动 30 行 \u0026ldquo;30j\u0026rdquo; 或 \u0026ldquo;30↓\u0026rdquo; 的组合按键\n[Ctrl] + [f] 屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)\n[Ctrl] + [b] 屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)\n[Ctrl] + [d] 屏幕『向下』移动半页\n[Ctrl] + [u] 屏幕『向上』移动半页\n​+​ 光标移动到非空格符的下一行\n​-​ 光标移动到非空格符的上一行\nn 表示空格光标向右移动这一行的 n 个字符\n0 或功能键[Home] 这是数字『 0 』：移动到这一行的最前面字符处 (常用)\n$ 或功能键[End] 移动到这一行的最后面字符处(常用)\nH 光标移动到这个屏幕的最上方那一行的第一个字符\nM 光标移动到这个屏幕的中央那一行的第一个字符\nL 光标移动到这个屏幕的最下方那一行的第一个字符\nG 移动到这个文档的最后一行(常用)\nnG n 为数字。移动到这个文件的第 n 行(可配合 :set nu)\ngg 移动到这个文档的第一行，相当于 1G\nn n 为数字。光标向下移动 n 行(常用)\n‍\njkhl 基本上下左右\ngg 光标移动到文档首行\nG 光标移动到文档尾行\n‍\n^或* 光标移动到行首第一个非空字符\nhome 键或 0 或者 g0 光标移动到行首第一个字符\ng* 光标移动到行尾最后一个非空字符\nend 或或者 g 或者 g 或者 g 光标移动到行尾最后一个字符\ngm 光标移动到当前行中间处\n‍\nb/B 光标向前移动一个单词（大写忽略/-等等特殊字符）\nw/W 光标向后移动一个单词（大写忽略/-等等特殊字符）\ne/E 移到单词结尾（大写忽略/-等等特殊字符）\n‍\nctrl+b 或 pageUp 键 翻屏操作，向上翻\nctrl+f 或 pageDn 键 翻屏操作，向下翻\n‍\n数字+G 快速将光标移动到指定行\n`. 移动到上次编辑处\n‍\n数字+上下方向键 以当前光标为准，向上/下移动 n 行\n数字+左右方向键 以当前光标为准，向左/右移动 n 个字符\n‍\nH 移动到屏幕顶部\nM 移动到屏幕中间\nL 移动到屏幕尾部\n‍\nz+Enter 键 当前行在屏幕顶部\nz+ . 当前行在屏幕中间\nz+ - 当前行在屏幕底部\nshift+6 光标移动到行首\nshift+4 光标移动到行尾\n​-​ 移动到上一行第一个非空字符\n​+​ 移动到下一行第一个非空字符\n‍\n) 向前移动一个句子\n( 向后移动一个句子\n} 向前移动一个段落\n{ 向前移动一个段落\n‍\ncount l 移动到 count 列\ncounth 向左移动 count 字符\ncountl 向右移动 count 字符\ncountgo 移动到 count 字符\n‍\n‍\n# 选中内容 v 进行字符选中 V 或 shift+v 进行行选中 gv 选中上一次选择的内容 o 光标移动到选中内容另一处结尾 O 光标移动到选中内容另一处角落 ctr + V 进行块选中 ‍\n‍\n‍\n# 字符转换 ‍\n~ 转换大小写 u 变成小写 U 变成大写 ‍\n‍\n# 删除 ‍\nx, X x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace])\nnx n 为数字，连续向后删除 n 个字符。例如 10x 表示连续删除 10 个字符\ndd 删除光标所在的一整行(常用)\nD 删除光标位置到行尾的内容，删除之后，下一行不上移\nndd n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行\nd1G 删除光标所在行到首行的所有数据\ndG 删除光标所在行到最后一行的所有数据\nd$ 删除光标所在位置到该行的最后一个字符\nd0 删除光标所在位置到该行的最前面一个字符\n:a1,a2d 删除从 a1 行到 a2 行的文本内容\n‍\n‍\n# 撤销\u0026amp;复原\u0026amp;重复 ‍\nu 撤销操作，相对于普通编辑器里面的 ctrl+z Ctrl+r 恢复操作，相对于普通编辑器里面的 ctrl+y . 就是小数点！可重复前一个动作 U(大写) 撤销所有编辑 ‍\n‍\n# 剪切\u0026amp;复制\u0026amp;粘贴 ‍\nyy 复制光标所在行\nnyy n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行 y1G 复制光标所在行到第一行的所有数据\nyG 复制光标所在行到最后一行的所有数据\ny0 复制光标所在的那个字符到该行行首的所有数据\ny$ 复制光标所在的那个字符到该行行尾的所有数据 p, P p 为将已复制的数据在光标下一行贴上，P 则为贴在光标上一行！ dd 剪切光标所在行\n数字+dd 以光标所在行为准（包含当前行），向下剪切指定行数\nD 剪切光标所在行 ‍\n‍\n合成行\n‍\nJ: 将光标所在行与下一行的数据结合成同一行\n‍\n‍\n搜索\n‍\n/word 向光标之下寻找一个名称为 word 的字符串。\n?word 向光标之上寻找一个字符串名称为 word 的字符串。\nn 代表重复前一个搜寻的动作，根据前面输入的/word 还是?word 向下或向上搜索下一个匹配的字符串。\nN 表示反向搜索，与 n 的搜索方向相反。\n‍\n‍\n替换\n‍\n:n1,n2s/word1/word2/g 在第 n1 与 n2 行之间寻找 word1 并替换为 word2\n:1,$s/word1/word2/g $表示最后一行，%s 表示所有行。\n或\n:%s/word1/word2/g\ng -\u0026gt; gc gc 中的 c 表示取代前显示提示字符给用户确认 (confirm) ！\n‍\n‍\n# ==末行模式== ‍\n‍\n‍\n# 文件 ‍\n:w 保存编辑数据\n:w! 若文件属性为『只读』时，强制写入该文件(和权限有关)\n:q 离开\n:q! 若曾修改过文件，又不想储存，使用 ! 为强制离开不储存文件\n:wq 储存后离开\n:wq! 强制储存后离开\nZZ 若文件没有更动，则不储存离开，若文件已经被更动过，则储存后离开！\n:w [filename] 另存为到 filename 文件\n:r [filename] 将另一个文件『filename』的数据加到光标所在行后面\nx！ 保存文本，并退出 Vim 编辑器\n:n1,n2 w [filename] 将 n1 到 n2 行的内容储存成 filename 这个文件。\n:! command 暂时离开 vi 到指令行模式下执行 command 的显示结果！\n:set nu 会在每一行的前缀显示该行的行号\n:set nonu 取 取消行号显示\n查看当前已经打开的所有文件：:files​​(%a 表示激活状态，#表示上一个打开的文件)\n切换到指定文件：:open 文件名​​\n切换到上一个文(back previous)：:bp​​\n切换到下一个文件(back next)：:bn​​\n‍\n‍\n# 查找 “/关键词”\n用N​、n​ 可以切换上下结果；输入nohl​，可以取消高亮\n快捷键 功能描述 /abc 从光标所在位置向前查找字符串 abc /^abc 查找以 abc 为行首的行 /abc$ 查找以 abc 为行尾的行 ?abc 从光标所在位置向后查找字符串 abc n 或； 向同一方向重复上次的查找指令 N 或, 向相反方向重复上次的查找指定 ‍\n# 替换 r 替换光标所在位置的字符\nR 从光标所在位置开始替换字符，其输入内容会覆盖掉后面等长的文本内容，按“Esc”可以结束\n:s/a1/a2 替换当前光标所在行第一处符合条件的内容\n:s/a1/a2/g 替换当前光标所在行所有的 a1 都用 a2 替换\n:%s/a1/a2 替换所有行中，第一处符合条件的内容\n:%s/a1/a2/g 替换所有行中，所有符合条件的内容\n:n1,n2 s/a1/a2 将文件中 n1 到 n2 行中第一处 a1 都用 a2 替换\n:n1,n2 s/a1/a2/g 将文件中 n1 到 n2 行中所有 a1 都用 a2 替换\n‍\n‍\n# 可视模式 ‍\n可视模式下，选中的区域是由两个端点来界定的（一个在左上角，一个在右下角），在默认情况下只可以控制右下角的端点，而使用 o 按键则可以在左上角和右下角之间切换控制端点\n‍\nv 进入字符可视化模式： 文本选择是以字符为单位的。\nV 进入行可视化模式： 文本选择是以行为单位的。\nCtrl+v 进入块可视化模式 ： 选择一个矩形内的文本。\n‍\nA 在选定的部分后面插入内容\nI 在选定的部分前面插入内容\nd 删除选定的部分\nc 删除选定的部分并进入插入模式（有批量替换效果）\nr 把选定的部分全部替换为指定的单个字符\n\u0026gt;\u0026gt;​ 向右缩进一个单位，更适合行可视化模式\n\u0026lt;\u0026lt;​ 向左缩进一个单位，更适合行可视化模式\ngu 选中区域转为小写\ngU 选中区域转为大写\ng~ 大小写互调\n‍\n# 拓展操作 ‍\n# 代码颜色显示 ：syntax on/off\n‍\n# 内置计算器 a.进入编辑模式\nb.按“ctrl+r，光标变成引号，，输入=，光标转到最后一行\nc.输入需要计算的内容，按下 enter 后，计算结果回替代上一步中的引号，光标恢复\n‍\n# 配置 a.文件打开时，末行模式下输入的配置为临时配置，关闭文件后配置无效\nb.修改个人配置文件，可以永久保存个人配置（~/.vimrc，如果没有可以自行创建）\nc.修改全局配置文件，对每个用户生效（vim 自带，/etc/vimrc）\n注：个人配置文件优先级更高，当个人配置和全局配置发生冲突时，系统以当前用户的个人配置文件为准\n‍\n# 异常退出 在编辑文件后，未正常保存退出时，会产生异常退出交换文件（.原文件名.swp）\n将交换文件删除后，再次打开文件时，无提示：“#rm -f .原文件名.swp”\n‍\n# 别名机制 自定义指令\nLinux 中，存在一个别名映射文件： ~/.bashrc\n修改文件内容，可以自定义指令，重新登录账号后生效\n‍\n# 文件快捷方式 对于深层文件，可以创建文件快捷方式，便于后续操作：#ln -s 源路径 新路径\n‍\n# 退出方式 （1）在 vim 中退出文件编辑模式，可以使用:q 或者:wq\n（2）建议使用:x：使用效果等同于 wq，如果文件有改动则先保存后退出；但是如果文件没有做修改，会直接退出，不会修改文件更新时间，避免用户混淆文件的修改时间\n‍\n","permalink":"https://spadektlsg.github.io/p/linux%E4%B8%AA%E4%BA%BA%E8%AF%BE%E5%A0%82%E6%90%9C%E9%9B%86%E5%AE%9D%E5%85%B8%E6%97%A7%E5%BC%8F%E5%8E%9F%E5%91%B3%E6%8A%B9%E8%8C%B6%E7%8F%8D%E7%8F%A0/","tags":[],"title":"Linux个人课堂搜集宝典旧式原味抹茶珍珠"},{"categories":[],"contents":" # 前言 谈到比赛这个话题, 我是一直有话说的, 因为自己在上大学时候确实有过狠狠参加竞赛的打算, 当然, 是计算机类的竞赛. 一开始我是不打算参加其他那些 \u0026ldquo;没意义\u0026quot;的竞赛的.\n但是, 生活所迫, 到了危急关头我不得不这么做. (指最后一次比赛 - 大创), 当然我输的很惨, 可以说的一无所有了\n# 起因 我表哥推荐我去参加微信小程序设计大赛, 我调查了一番确实不错, 相较于那些算法竞赛 (ACM 受创后遗症) 来说, 开发一个东西并展示确实更加适合我.\n于是就准备好了, 开始学习小程序开发的内容.\n# 技术力 那时是 2023 年的春节假期, 我才上大二下, 而我还没有正式进入 Java 开发的流程, 仅仅只有一套 Python 和 Cpp 的基础技术, 单论技术水平来说还远远达不到要求.\n那怎么办? 加班加点的学啊? NONONO, 现在回想起来, 如果 2023 一开始就直接开始学习, 是真的不行的, 我的生产力还是落后于大伙.\n那我是怎么做的呢? 没错! 奇迹武器! (这个在另外的文章说) 我在 2023.6 成功掌握 Java 后端 SpringBoot SSM 拿一整套框架的基础开发 (注意, 基础开发, 能 CRUD), 并且能够制作基本前端, 到 2024 年找工作秋招时候, 已经是 SSM 的 1 年零 3 个月开发了\n# ,目标 既然要做小程序, 做什么主题呢? 我父亲喜欢养花, 我经常接触到相关内容, 发现对于家里人而言 \u0026ldquo;怎么进行维护\u0026rdquo; 才算最重要, 最热点的问题. 大部分情况下指的是给花浇水这个行为.\n那么好, 什么时候浇水基本能订好, 什么量基本定不好, 摸不准. 现在当然有土壤湿度处理器, 这个没问题, 但是就没有更好的解决方案吗?\n本人在购物网站搜索过, 好一点的处理器传感器都是工业的, 一套 600+, 绝对不可能放在我们实际. 基础的传感器, 一个 6 元, 但是只有基础的逻辑内容.\n我就想到了, 诶! 我做一个 app, 把这些一个个插到花盆里的传感器一个个都接入终端, 然后在 App 里面提示该给花浇水了不好吗?\n# 实现 说起来容易, 做起来难.\n传感器和外围没有 USB 接口, 有, 我也找不到 前端页面没人帮忙开发, 没啥实践团队 技术栈如果采用微信那一套的话, 会对后来的学习造成影响(浪费时间害怕) 官方迟迟不开放赛事, 让人一直打问号 以上问题困扰了许久.\n如果没有 USB 接口, 就只能去定做了, 或者叫搞硬件的接入, 开个后门给我 如果前端没人开发再找人, 团队必须拉起来. 然而一直没人愿意参加 (毕竟比赛始终没开放) 个人也是怕比赛最后不开放了, 一直等待 结果啊, 真就不开放了, 真就取消了!!! 我苦等了 6 个月啊! 从 2 月一直等到 8 月, 暑假都结束了, 我放置的 demo 工程都长毛了!\nTencent! U SUCK!\n# 结果 大三了, 也就是 2023.9 了, 我去参加了百度之星算法竞赛, 这个自然就放下了, 因为我在算法竞赛吃了第二次裤头\u0026hellip; 当你的手指头痛了, 就要把另一边的手砍下来, 这样就不痛了, 对吧.\n因为那是确实是自己的问题, 你赖不了别人和环境, 我自己算法就是拉跨, 当时给了我很大打击.\n好在后来也是都走出来了\n同时也从任务驱动方面让我学到了切实的本领, 坚定了我秋招的信心!\n作于 2023.10\n修改于 2024\n","permalink":"https://spadektlsg.github.io/p/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%A4%A7%E8%B5%9B2023%E5%9B%9E%E5%BF%86%E5%BD%95/","tags":[],"title":"微信小程序开发大赛2023回忆录"},{"categories":[],"contents":"‍ACM 社团, 当初参加的计算机社团的其中一个, 也是坚持时间最久的一个 (啊呸, 参加时间最长的一个)\n# 缘起 报名前就听说很辛苦了, 当时其实对算法比赛的了解很浅薄, 不知道哪种类型适合自己. 舍友都一起报了这个\n# 日常 讲授一些算法 + 数据结构的知识, 并带我们进行练习.\n事实上有些操之过急了, 因为当时我们还没有掌握更加高级(smart)的语言, 只会用 cpp 手动实现, 所以使用起来各种导库很是麻烦, 这是我当初感觉的一点, 与算法相关的东西太少了, 反而是要去关注一些算法之外的东西.\n并且, 练习时候使用的题目过于基础简单了, 就是你能够写出一个栈的 CRUD 就行, 刚开始就是这样当然无所谓, 可是由于 我们没有更加高级的 \u0026ldquo;数据结构\u0026rdquo; 和 \u0026ldquo;算法\u0026quot;课程的基础, 导致课堂大部分时间竟然要花在给我们补习算法数构和 Cpp 的语法上面\n# 推进 我 Cpp 提前练过, 实在不会我自己去找找 python 的实现, 最后能掌握个七七八八; 但是同社生就不一定了, 刚开始来了有 45 人多(同级), 陆陆续续就退出了一大部分\n由于大一刚进来实力不行, 先不安排组队竞赛, 先安排小组带练. 同时每周要求发送一篇自己的学习博客到 CSDN 上, 坚持一年以及以上. 这就是我博客的由来了 (你看到的是我的独立博客, 在 CSDN 里面现在看不到我那时候写的文章, 因为都是些 Python 和 Cpp 学习过程中很基础的内容, 我觉得没什技术力, 太低创了, 不满足于此于是删除了后来 2023 年初)\n在坚持的过程中也结识了一系列优秀的人才, 之后也一起交流算法经验.\n# 结局 大家说, 算法随便拿个奖就能扬名立万, 我觉得这不可靠. 因为我自认为不是考试型人才, 我不喜欢应试, 考试时候也从来不能发挥出自己想要的成绩来.\n当然, 比拼坚持我一定会胜利\n最后坚持每天都来的只有我和另一个舍友两人了, 同级的新生坚持下来的总共只有 11 人.\n然而就在我们开始向往着明年下半年的 ACM 比赛时候, 意外发生了: 社长保研了不干了!\n很明显, 团队失去了主心骨. 在仅仅两周后各个带领者就逐渐涣散了, 周报啥的也开始不检查, 训练的啥的消息也开始腐败.\n期末结束到了下学期, 社团基本就成了一个空壳, 每次上线只能看到陈年的消息\n之后我没有自己进行后续的训练, 因为\n找不到好的训练团队 缺少时间, 河大课太多了 缺少一名搭档 没有大佬提供路径, 当时对 ACM 还是存在幻想 自己对算法比赛的不喜欢与迷茫 所以荒废了差不多 3 个月, 等到我转移到以 Python 为核心的时候我发现我过去学的东西完全不能称得上是 \u0026ldquo;算法\u0026rdquo; 只能算是 \u0026ldquo;基础 Cpp 入门\u0026rdquo;. 天国的大门在我踏入之前就关闭了.\n# 离场 那又有什么办法? ACM 的正式题目给我一万道也做不出来(除了简单题, 我指 LeetCode), 最后也是含恨放弃了.\n对, 当时心里是很不满意的, 打算未来重整旗鼓.\n所以之后吃了更大的苦头, 见百度之星算法竞赛, 就在那一年之后的秋天\n所以, 机会一开始就不存在的对吗, 大一上浪费了这么多时间, 还拿不下一道中等题, 就已经可以放弃了, 别干算法训练了, 后端开发不需要太厉害的算法.\n自己的沉没成本太大了: 由于缺乏科学的训练, 当初自己的训练路线就是错的, 太多关注于 Python 和 Cpp 的语言特性, 去学习语法糖和具体的写法, 而不去精进自己的\u0026quot;算法理解\u0026rdquo;, 这在后来让我花了很长一段时间才走出依赖\n真是大梦一场.\n","permalink":"https://spadektlsg.github.io/p/acm%E8%AE%AD%E7%BB%83%E8%90%A5%E5%9B%9E%E5%BF%86%E5%BD%95/","tags":[],"title":"ACM训练营回忆录"},{"categories":[],"contents":"‍\n\u0026ndash;苦涩的失败者 PLUSPLUSPLUS, 但是这次是自己太飞舞\n‍\n‍\n打卡区\n很多高端和刷过的都跳过了, 没思路的赶紧看一看, 一天干 10h, 看完晕过去, 晕过去再看\n‍\n{ tooltip: { trigger: \u0026#34;axis\u0026#34; }, legend: { data: [\u0026#34;Leetcode Arrival\u0026#34;] }, toolbox: { show: true, feature: { mark: { show: true }, dataView: { show: true, readOnly: true }, magicType: { show: false, type: [\u0026#34;line\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;stack\u0026#34;, \u0026#34;tiled\u0026#34;] }, restore: { show: true }, saveAsImage: { show: true } } }, calculable: true, xAxis: [ { type: \u0026#34;category\u0026#34;, boundaryGap: false, data: [\u0026#34;9.10\u0026#34;, \u0026#34;9.11\u0026#34;, \u0026#34;9.12\u0026#34;, \u0026#34;9.13\u0026#34;, \u0026#34;9.14\u0026#34;, \u0026#34;9.15\u0026#34;, \u0026#34;9.16\u0026#34;] } ], yAxis: [ { type: \u0026#34;value\u0026#34; } ], series: [ { name: \u0026#34;Leetcode Arrival\u0026#34;, type: \u0026#34;line\u0026#34;, stack: \u0026#34;总量\u0026#34;, itemStyle: { normal: { areaStyle: { type: \u0026#34;default\u0026#34; } } }, data: [93, 114, 115, 175, 260, 414, 500] } ] } ‍\n‍\n# 时间线 8.16 日 道听途说\n当时在家里很摆, 简单刷了一点题算了\n‍\n9.3 日 誓师出征, 剩余 20d\n‍\n‍\nPycharm 整合插件进行刷题, 主要参考博主的思路. 以此之后 10 天整理个人算法笔记\n使用 Python3, 编写方法返回即可\n当时直接用刚刚拿下期末设计余威正盛的 Python 而不是 Java, 所以其实你可以说我也是 Python 程序员(API 选手)\n‍\n规划: 之后针对不同题库进行刷题; DP 等高难度的可以划划水, 基础题要求 100%\n规划: 做 50%以上的 AC\n最多刷到 17 号左右, 剩下时间 7 天整理笔记\n实际上杀红了眼, 杀到前一天还在杀, 没有怎么整理, 就是趁热打铁\n‍\n*发现 leetcode 竟然有付费题目, 怎么会是呢?\n‍\n简单刷题日志\n8.16 开始探讨可行性\n其实当初我是很怀疑自己需不需要参加的, 虽然这个难度相较于那些蓝桥和 ACM 算是挺低的了, 但是奈何自己并不是那种反应快的聪明人, 之前就是数学苦手, 哪怕大学后觉悟了数学能力找回来了, 但是算法相关的解题能力实在是不算好, 只能说是平均水平, 智力没有在这里加持.\n获奖概率高, 有搞头, 同时前辈也推荐去试试, 就报名了. 现在马后炮一看确实是比较小丑的行为, 如果把一个月拿来处理技术栈的问题的话能处理很多了.\n当然, 其实自己很不喜欢这类竞赛, 认为是无意义的内卷, 算法能用就行, 不想去比拼. 这种心情在准备比赛的第一天就被主动屏蔽了, 但是比赛一结束, 混合着悲伤的气氛, 所谓的厌恶之情顿时喷薄而出\n8.18 确定报名, 开始整理算法本地资源\n8.22 规划学习路线\n8.28 Python 热手\n可以说 Python 才是我的主语言, 至少是那个时候. 我高考结束后一个月就下到了 Pycharm 来照着编程教程学习基础 Python 的语法和一些编程知识. 之后学了 Cpp 之后才算编程入门, 但是至少在大一没学 Java 之前我是完全对现在的主语言 Java 有许多掌握 (如果你说见过 Java 的话还真有, 我小学三年级时候玩我的世界要自己装 JRE, 就是 Java8 那个时候, 我影响深刻是说\u0026quot;轻便化的可以运行在机顶盒, 收音机里的程序\u0026quot;. 大一下就继续用 python 刷一些算法和了解 Python 语法糖, 成为一行代码大师\u0026hellip;大二上才开始狠狠学 Java, 这时候我已经有了 Cpp 和 Python 两个语言的基础了, 于是掌握的很快.另外在这时候也用 Python 做了很多的小应用, 例如大数据分析, 例如爬虫, 例如 AI 相关, 还有游戏, 因此那个时候我还是决定用 python 上场.\n9.3 项目 STW 20days\n9.4 周一第一次上课, 打卡首冲!\n首日战果: 1(丢人)\n9.5 黑色星期二: 上课\n黑色星期二指的是那天全是课, 烦死了\n9.6 战果: 10+3(自己 5 题, 且有多重解法)(晚上加班)\n9.7 到 39 题, 平均 4 天一日 10 题 赢!\n9.8 到 56 题, 增加到 17 题一日, 之前 14 题\n9.9 (周末) -\u0026gt;74\n9.10(周末) -\u0026gt;93 平均一日 16 题, 赢!\n9.11 -\u0026gt;114 (21 题) 继续冲!\n9.12(BusyDay) 勉强 1 题 (哈哈)\n9.13 -\u0026gt;123 (AM) -\u0026gt;172(PM) =175(进位) 一日 60 题\n9.14 -\u0026gt;213 (PM) -\u0026gt;260 (NT) 一日 85 题 平均一日 25 题,\n一天工作 8 小时来看. 一小时 3 题\u0026hellip;\n差不多是顶峰了, 接下来要开始针对性处理了\n9.15 -\u0026gt;371(PM) -\u0026gt; 414(NT) (实际上 24 道题)\n9.16(周末) (第一题 100%速度击破) -\u0026gt; 开始准备转知识整理 (一日 86 题)\n-\u0026gt; 448(AM) -\u0026gt; 500(half PM) -\u0026gt; 结束; 12 天内完成 150 题, 平均一日 12 题, 各知识点均覆盖到. 从头到 500, AC60%以上的基本都尝试过去了\n9.16 晚 笔记整理: Python\n9.17 - 9.18: 数构 + 算法 初级整理\n9.19 : have classessss\n9.20 :前往编程秘籍网站练习 * 2\n9.21 : 拉拉题解 刷题 20 题, 5 日第一次\n9.22 : 拉拉题解 看不完了了了+ 刷题 12\n9.23 (周末) 再, 练算法热门题 (刷 10 题) + 准备 + 长线算法操练计划安排大成功 + 休息, 被拷打麻了\n9.24 (End) 要被拷打, 写出 2 题就收工(虽然肯定写不出, 但是我的目的已经达到了)\n真小丑啊, 赛前说\u0026quot;写两题收工, 会赢的\u0026quot;, 赛后一题都没写出来\n占座什么的只能说凑合, 早上早 8 状态不是很好, 很困感觉. 也许是昨天的疲惫堆积到今日了吧.\n一切完成后, 明天询问自习室的事情吧, 7 教实在是没什么生存空间了. 其他地方不知道 今天下雨\n自习室还好, 中途小状况是坚定了我校外学习的决心;;; 其他的准备非常充分, 确实是最佳水平. 但是, 真的刚开始草台(余下心得见手机笔记本) 被罚时太多了因为刚开始不熟悉流程(竟然是真的输入而不是 leetcode 的传参数模式), 然后不停提示人脸不符, 提交运行效率极慢(30s), 后面才发通知. 看了一遍大概能 3 题加上希儿那道, 结果真正能写出来也就两道\u0026hellip; 动态排名 2700 名, 70% (哈哈, 一题都没有还有排名吗)\n竟然学校里还有人参加, 总共 AC1 道, 我一道没有\u0026hellip;.\n甚至不如福州理工! 太耻辱了, 我变成自习室里一滩淤泥\n‍\n9.25 结束任务, 开始物色自习室(下转 - 自习室回忆录 2023)\n‍\n‍\n# 小丑时刻精选 大部分只有对应的索引, 具体在个人 Github 账号登录可以看到对应的提交记录\n# 第6题新材料 简单模拟即可 # 2023. 9.24 绝唱 # (下一题)希儿啊, 之前天天看你跳舞, 怎么今天我就这么不争气呢... if __name__ == \u0026#39;__main__\u0026#39;: # 基础暴力解法: A = [] # N = int(input(\u0026#34;几个元素\u0026#34;)) # K = int(input(\u0026#34;反应区间\u0026#34;)) dummy = input() N, K = dummy.split(\u0026#39; \u0026#39;) N = int(N) K = int(K) for i in range(N): A.append(int(input(\u0026#34;元素i\u0026#34;))) res = [] # start for i in range(len(A)): for j in range(i+1,i+K+1): if i+K \u0026lt;len(A): if A[i] == A[j]: # print(A[i], A[j]) res.append(i+1) res.append(j+1) else: break print(sum(set(res))) 15 - 双数之和\n「双指针」，当我们需要枚举数组中的两个元素时，如果我们发现随着第一个元素的递增，第二个元素是递减的，那么就可以使用双指针的方法，将枚举的时间复杂度从 O(N2 ) 减少至 O(N)。为什么是 O(N) 呢？这是因为在枚举的过程每一步中，「左指针」会向右移动一个位置（也就是题目中的 b），而「右指针」会向左移动若干个位置，这个与数组的元素有关，但我们知道它一共会移动的位置数为 O(N)，均摊下来，每次也向左移动一个位置，因此时间复杂度为 O(N)。\n19 - 快慢针\n39 - 剪枝操作\n122 动态规划大入门, 看我的提交\n148 链表排序 基础要练!\n204 质数计算\n不, 还不够快!\ndef isPrime(self, number): # 选用了一种加强的判断质数的方法; 输入: 一个正数 if number \u0026gt; 1: if number == 2: return True if number % 2 == 0: # 这个直接排除了一半的数 return False for current in range(3, int(math.sqrt(number) + 1), 2): # 这个直接排除了另一半的数 if number % current == 0: return False return True return False 厄拉多塞筛法. 比如说求 20 以内质数的个数,首先 0,1 不是质数.2 是第一个质数,然后把 20 以内所有 2 的倍数划去.2 后面紧跟的数即为下一个质数 3,然后把 3 所有的倍数划去.3 后面紧跟的数即为下一个质数 5,再把 5 所有的倍数划去.以此类推.\ndef countPrimes(self, n: int) -\u0026gt; int: if n \u0026lt; 3: return 0 # 厄拉多塞筛法 else: output = [1] * n # 首先生成了一个全部为1的列表,长度为n output[0], output[1] = 0, 0 # 因为0和1不是质数,所以列表的前两个位置赋值为0 # 此时从index = 2开始遍历,output[2]==1,即表明第一个质数为2,然后将2的倍数对应的索引 # 全部赋值为0. 此时output[3] == 1,即表明下一个质数为3,同样划去3的倍数.以此类推. for i in range(2, int(n ** 0.5) + 1): if output[i] == 1: output[i * i:n:i] = [0] * len(output[i * i:n:i]) # 最后output中的数字1表明该位置上的索引数为质数,然后求和即可. return sum(output) \u0026hellip;\n这个嵌套复制要记住:\n# 从原数组复制一份到 copy_board 中 copy_board = [[board[row][col] for col in range(cols)] for row in range(rows)] \u0026hellip; 矩阵展平方法:\nsum(matrix, []), 返回展平的矩阵[]\n..随机数\nchoice(self.arr)\ndic.get(i, 0)\na method in Python that returns the value of the key i in the dictionary dic. If the key i does not exist in the dictionary, it returns 0 as the default value.\n\u0026hellip;Counter\n统计[]中每个元素出现的次数\n","permalink":"https://spadektlsg.github.io/p/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B2023%E5%9B%9E%E5%BF%86%E5%BD%95/","tags":[],"title":"百度之星程序设计大赛2023回忆录"},{"categories":[],"contents":"‍\n# Header 封存, 未来并不打算继续深入\n鉴定为可靠性为5%的11km重坦 \u0026ndash;2023.5-6\n‍\n# 显示 ‍\n‍\n# Surface 元素组件的载体\n‍\n# 新建图层对象 ​Surface=pygame.Surface(size=(width,height),flags,depth)​\nsize：表示 Surface 对象的矩形区域大小；如果不设置尺寸，Surface 默认创建一个和主游戏屏幕同样大小的区域。 flags：功能标志位，有两个可选参数值 HWSURFACE 和 SPCALPHA，前者代表将创建的 Surface 对象存放于显存中，后者表示让图像的每一个像素都包含一个 alpha 通道 depth：指定像素的颜色深度，默认为自适应模式，由 Pygame 自动调节。 方法 说明 pygame.Surface.blit() 将一个图像（Surface 对象）绘制到另一个图像上 pygame.Surface.convert() 修改图像（Surface 对象）的像素格式 pygame.Surface.fill() 使用纯色填充 Surface 对象 pygame.Surface.scroll() 复制并移动 Surface 对象 pygame.Surface.set_alpha() 设置整个图像的透明度 pygame.Surface.get_at() 获取一个像素的颜色值 pygame.Surface.set_at() 设置一个像素的颜色值 pygame.Surface.get_palette() 获取 Surface 对象 8 位索引的调色板 pygame.Surface.map_rgb() 将一个 RGBA 颜色转换为映射的颜色值 pygame.Surface.set_clip() 设置该 Surface 对象的当前剪切区域 pygame.Surface.subsurface() 根据父对象创建一个新的子 Surface 对象 pygame.Surface.get_offset() 获取子 Surface 对象在父对象中的偏移位置 pygame.Surface.get_size() 获取 Surface 对象的尺寸 ‍\n‍\n# Screen ‍\n# 绘制对象 screen.blit(source, dest, area=None, special_flags = 0) source：表示要粘贴的 Surface 对象。 dest：主窗口中的一个标识的坐标位置，可以接受一个 (x,y) 元组，或者 (x,y,width,height) 元组，也可以是一个 Rect 对象； area：接受一个 Rect 对象，默认为 None，如果提供该参数则相当于抠图操作，即在屏幕的指定区域显示想要的内容； special_flags：可选参数，它是 Pygame.1.8 版本新增的功能，用于指定对应位置颜色的混合方式，参数值有 BLEND_RGBA_ADD、BLEND_SUB 等。如果不提供该参数的情况下，默认使用 source 的颜色覆盖 screen 的颜色。 ‍\n# 创建主窗口 ​screen = pygame.display.set_mode(size=(),flags=0)​\n两个参数常用参数：\nsize：元组参数，用来设置主窗口的大小 flags：功能标志位，表示创建的主窗口样式，比如创建全屏窗口、无边框窗口等，flags 参数值见下表。 标志位 功能 pygame.FULLSCREEN 创建一个全屏窗口。 pygame.HWSURFACE 创建一个硬件加速窗口，必须和 FULLSCREEN 同时使用。 pygame.OPENGL 创建一个OPENGL渲染窗口。 pygame.RESIZABLE 创建一个可以改变大小的窗口。 pygame.DOUBLEBUF 创建一个双缓冲区窗口，建议在 HWSURFACE 或者 OPENGL 时使用。 pygame.NOFRAME 创建一个没有边框的窗口。 ‍\n# Display 方法名称 说明 pygame.display.get_surface() 获取当前显示的 Surface 对象。 pygame.display.flip() 更新整个待显示的 Surface 对象到屏幕上。 pygame.display.update() 更新部分软件界面显示。 pygame.display.Info() 产生一个 VideoInfo 对象，包含了显示界面的相关信息。 pygame.display.set_icon() 设置左上角的游戏图标，图标尺寸大小为 32*32。 pygame.display.iconify() 将显示的主窗口即 Surface 对象最小化，或者隐藏。 pygame.display.get_active() 当前显示界面显示在屏幕上时返回 True ‍\n# Rect rect =pygame.Rect(left,top,width,height) 创建一个指定位置和大小的矩形区域。Rect 表示的区域必须位于一个 Surface 对象之上，比如游戏的主窗口（screen）, 其左上角为坐标原点\n方法 说明 pygame.Rect.copy() 复制矩形 pygame.Rect.move() 移动矩形区域，接受一个列表参数 pygame.Rect.move_ip() 移动矩形（无返回） pygame.Rect.inflate() 增大或缩小矩形大小 pygame.Rect.clamp() 将矩形移到另一个矩形内 pygame.Rect.union() 返回一个两个矩形合并后的矩形。 pygame.Rect.fit() 按纵横比调整矩形的大小或移动矩形。 pygame.Rect.contains() 测试一个矩形是否在另一个矩形内 pygame.Rect.collidepoint() 测试点是否在矩形内 pygame.Rect.colliderect() 测试两个矩形是否重叠 ‍\n常用属性\nx,y 表示矩形距离 x、y 轴的距离 top, left, bottom, right #在坐标系内描述矩形的大小 topleft, bottomleft, topright, bottomright #返回一个描述矩形大小的元组 midtop, midleft, midbottom, midright #返回一个描述矩形大小的元组 center, centerx, centery #(centerx，centery)表示矩形中央坐标(x,y)的值 size, width, height w,h #用于描述矩形的width、height ‍\n‍\n# Draw 在 Surface 对象上绘制一些简单的形状，返回值是一个 Rect 对象，表示实际绘制图形的矩形区域\n方法 说明 pygame.draw.rect() 绘制矩形 pygame.draw.polygon() 绘制多边形 pygame.draw.circle() 根据圆心和半径绘制圆形 pygame.draw.ellipse() 绘制一个椭圆形 pygame.draw.arc() 绘制弧线（挥着椭圆的一部分） pygame.draw.line() 绘制线段（直线） pygame.draw.lines() 绘制多条连续的线段 pygame.draw.aaline() 绘制一条平滑的线段（抗锯齿） pygame.draw.aalines() 绘制多条连续的线段 ‍\n‍\n绘制矩形\n​pygame.draw.rect(surface, color, rect, width)​\nsurface：指游戏窗口 color：该参数用于该图形着色； rect：绘制图形的位置和尺寸大小； width：可选参数，指定边框的宽度，默认为 0，表示填充该矩形区域。 当 width \u0026gt; 0 时，表示线框的宽度；而 width \u0026lt; 0 时，此时不会绘制任何图形。\n‍\n绘制多边形\n​pygame.draw.polygon(surface, color, points, width)​\npoints 一个列表参数，它表示组成多边形顶点的 3 或者多个 (x,y) 坐标，通过元组或者列表来表示这些多边形顶点。其余参数与上述函数相同。\n‍\n# 主循环 任务：\n处理游戏事件 更新游戏状态 刷新屏幕 ‍\n刷新界面显示\n​pygame.display.flip()​\n​pygame.display.update() ​\n后者可以根据选定的区域来更新部分内容，而前者则是更新整个待显示的内容。如果后者没有提供区域位置参数时，其作用和 display.flip() 相同。\n‍\nwhile True: # 循环获取事件，监听事件 for event in pygame.event.get(): # 判断用户是否点了关闭按钮 if event.type == pygame.QUIT: pygame.quit() sys.exit() #终止系统 #更新并绘制屏幕内容 pygame.display.flip() ‍\n‍\n# Event 使用 Pygame 处理事件时，逻辑一般都是相似的。首先是判断事件的类型，然后根据不同的事件操作，执行不同的游戏操作\n‍\n示例\n# 循环获取事件，监听事件状态，使用get()获取事件 for event in pygame.event.get(): # 判断事件类型，用户是否点了\u0026#34;X\u0026#34;关闭按钮 # pygame.QUIT 指点击右上角窗口的\u0026#34;X\u0026#34;号,点击后，卸载所有pygame模块 if event.type == pygame.QUIT: pygame.quit() while True: #等待事件发生 event = pygame.event.wait() if event.type == pygame.QUIT: exit() if event.type == pygame.MOUSEBUTTONDOWN: print(\u0026#39;鼠标按下\u0026#39;,event.pos) if event.type == pygame.MOUSEBUTTONUP: print(\u0026#39;鼠标弹起\u0026#39;) if event.type == pygame.MOUSEMOTION: print(\u0026#39;鼠标移动\u0026#39;) # 键盘事件 if event.type ==pygame.KEYDOWN: # 打印按键的英文字符 print(\u0026#39;键盘按下\u0026#39;,chr(event.key)) if event.type == pygame.KEYUP: print(\u0026#39;键盘弹起\u0026#39;) .... ‍\n‍\n事件类型 描述 成员属性 QUIT 用户按下窗口的关闭按钮 none ATIVEEVENT Pygame被激活或者隐藏 gain,state KEYDOWN 键盘按下 unicode、key、mod KEYUP 键盘放开 key、mod MOUSEMOTION 鼠标移动 pos, rel, buttons MOUSEBUTTONDOWN 鼠标按下 pos, button MOUSEBUTTONUP 鼠标放开 pos, button ‍\n‍\n键盘事件\n常量名 描述 K_BACKSPACE 退格键（Backspace） K_TAB 制表键（Tab） K_CLEAR 清除键（Clear） K_RETURN 回车键（Enter） K_PAUSE 暂停键（Pause） K_ESCAPE 退出键（Escape） K_SPACE 空格键（Space） K_0\u0026hellip;K_9 0\u0026hellip;9 K_a\u0026hellip;Kz a\u0026hellip;z ‍\n鼠标事件\nevent.pos 相对于窗口左上角，鼠标的当前坐标值(x,y) event.button 鼠标按下键编号（整数），左键为1，按下滚动轮2、右键为3，向前滚动滑轮4、向后滚动滑轮5 ‍\n‍\n# Time 管理时间和游戏帧数\n方法 说明 pygame.time.get_ticks() 以毫秒为单位获取时间 pygame.time.wait() 使程序暂停一段时间 pygame.time.set_timer() 创建一个定时器，即每隔一段时间，去执行一些动作 pygame.time.Clock() 创建一个时钟对象来帮我们确定游戏要以多大的帧数运行 ‍\n‍\n# FPS FPS（游戏帧率）影响效果只有在动态图时才能显现出来，不过无论静态图还是动态图，它们的使用规则都是一样的, 通过 Clock() 方法来实现，该对象提供了以下常用方法：\n方法 说明 pygame.time.Clock.tick(fps) 更新clock对象 pygame.time.Clock.get_time() 获取上一个tick中的时间 pygame.time.Clock.get_fps() 计算clock对象的帧率 ‍\n‍\n# 素材 ‍\n‍\n# Image ‍\npygame.image.load(\u0026#34;图片路径\u0026#34;).convert() 上述方法将被加载的图像作为 Surface 对象来使用。之所以使用 convert(）来转换被加载图片的像素格式，是为了提升 Pygame 对图片的处理速度，该操作能够保证图像的像素格式与图片的显示格式是相同的。\njpg 是不支持透明的，所以我们载入这类图片就用 convert()；而 png 是支持透明的，所以载入就用 convert_alpha()。\n‍\n# Audio ‍\n# 加载音乐 pygame.mixer.music.load(\u0026#34;music.mp3\u0026#34;) # 播放音乐 pygame.mixer.music.play(-1) ‍\n# Font ‍\n方法 说明 pygame.font.init() 初始化字体模块 pygame.font.quit() 取消初始化字体模块 pygame.font.get_init() 检查字体模块是否被初始化，返回一个布尔值。 pygame.font.get_default_font() 获得默认字体的文件名。返回系统中字体的文件名 pygame.font.get_fonts() 获取所有可使用的字体，返回值是所有可用的字体列表 pygame.font.match_font() 从系统的字体库中匹配字体文件，返回值是完整的字体文件路径\npygame.font.SysFont() 从系统的字体库中创建一个 Font 对象 pygame.font.Font() 从一个字体文件创建一个 Font 对象 ‍\n# 创建 ‍\n# font.SysFont() ​pygame.font.SysFont(name, size, bold=False, italic=False)​\n‍\nname：列表参数值，表示要从系统中加载的字体名称，它会按照列表中的元素顺序依次搜索，如果系统中没有列表中的字体，将使用 Pygame 默认的字体。\n‍\n如果要显示中文，那么一定要使用中文字体文件，比如“方正粗黑宋简体”，否则会出现文字乱码的现象\n‍\n# font.Font() ​my_font = pygame.font.Font(filename, size) ​\n方法 说明 pygame.font.Font.render() 该函数创建一个渲染了文本的 Surface 对象 pygame.font.Font.size() 该函数返回渲染文本所需的尺寸大小，返回值是一个一元组 (width,height) pygame.font.Font.set_underline() 是否为文本内容绘制下划线 pygame.font.Font.get_underline() 检查文本是否绘制了下划线 pygame.font.Font.set_bold() 启动粗体字渲染 pygame.font.Font.get_bold() 检查文本是否使用粗体渲染 pygame.font.Font.set_italic() 启动斜体字渲染 pygame.font.Font.metrics() 获取字符串中每一个字符的详细参数 pygame.font.Font.get_italic() 检查文本是否使用斜体渲染 pygame.font.Font.get_linesize() 获取字体文本的行高 pygame.font.Font.get_height() 获取字体的高度 pygame.font.Font.get_ascent() 获取字体顶端到基准线的距离 pygame.font.Font.get_descent() 获取字体底端到基准线的距离 ‍\n# 设置 ‍\n​render(text, antialias, color, background=None)​\ntext：要绘制的文本内容 antialias：布尔值参数，是否是平滑字体（抗锯齿）。 color：设置字体颜色； background：可选参数，默认为 None，该参数用来设置字体的背景颜色。 ‍\n‍\n# 逻辑 ‍\n# Sprite Sprite精灵是Pygame中的一个抽象概念，表示游戏中的可移动对象。可以通过继承pygame.sprite.Sprite​​类来创建自己的Sprite对象\n‍\n通过构建精灵组来统一管理精灵\n# 创建精灵组 group = pygame.sprite.Group() # 向组内添加一个精灵 group.add(sprite_one) 属性\u0026amp;方法 说明 self.image 加载要显示的精灵图片，控制图片大小和填充色 self.rect 精灵图片显示在哪个位置 Sprite.update() 刷新精灵图，使其相应效果生效 Sprite.add() 添加精灵图到精灵组中（groups） Sprite.remove() 从精灵组中删除选中的精灵图 Sprite.kill() 删除精灵组中全部的精灵 Sprite.alive() 判断某个精灵是否属于精灵组 ‍\n# 碰撞检测 方法 说明 pygame.sprite.collide_rect() 两个精灵之间的矩形检测，即矩形区域是否有交汇，返回一个布尔值。 pygame.sprite.collide_circle() 两个精灵之间的圆形检测，即圆形区域是否有交汇，返回一个布尔值。 pygame.sprite.collide_mask() 两个精灵之间的像素蒙版检测，更为精准的一种检测方式。 pygame.sprite.spritecollide() 精灵和精灵组之间的矩形碰撞检测，一个组内的所有精灵会逐一地对另外一个单个精灵进行碰撞检测，返回值是一个列表，包含了发生碰撞的所有精灵。 pygame.sprite.spritecollideany() 精灵和精灵组之间的矩形碰撞检测，上述函数的变体，当发生碰撞时，返回组内的一个精灵，无碰撞发生时，返回 None。 pygame.sprite.groupcollide() 检测在两个组之间发生碰撞的所有精灵，它返回值是一个字典，将第一组中发生碰撞的精灵作为键，第二个组中发生碰撞的精灵作为值。 ‍\n‍\n# 高级 ‍\n","permalink":"https://spadektlsg.github.io/p/pygame%E6%8E%A2%E7%B4%A2-%E4%BD%8E%E8%B4%A8%E9%87%8F/","tags":[],"title":"Pygame探索 低质量"},{"categories":[],"contents":"‍\n‍ 二次整合导出于 2024.3 整合于 2023.1, 思源笔记导出 ‍\n==说明==\n数据结构代码是2022.10-11制作,大部分都用了引用(没必要),部分内容是阉割版的^（以下为部分阉割源码, Cpp笔记本中为更加归纳分割的源码）^,头文件自制(万能头文件打包): `#include \u0026lt;my/C.h\u0026gt;`​ 当初大二上时候可是把赵括大佐拷打致死了, 在狠狠Cpp手撸数据结构后代码功力大增.\n‍\n# 数据表 ‍\n# Tips ‍\n# 基操 修改: 通用重复代码删节\n‍\n定义\ntypedef struct SSqlist { //Simple siquence list 基础顺序数据表 double data[MaxSize]; int length; }*SSQ, qlist; //取个别名 typedef struct MSqlist { //Movable siquence list 动态顺序数据表 double* data; int Maxlength, length; }*MSQ, mlist; //取个别名 ‍\n初始化\nvoid SSQ_new(SSQ\u0026amp; L) { //简单初始化顺序表 L = new qlist; L-\u0026gt;length = 0; //我是用长度标记表尾,代表有几个元素 } void MSQ_new(MSQ\u0026amp; L) { //简单初始化动态数据表 L = new mlist; L-\u0026gt;data = new double[MaxSize]; //C: L-\u0026gt;data=(double*)malloc(sizeof(double) * MaxSize); L-\u0026gt;length = 0; L-\u0026gt;Maxlength = MaxSize; } void SSQ_add(SSQ\u0026amp; L, double x) { //简单添加元素 if (L-\u0026gt;length \u0026lt; MaxSize) { L-\u0026gt;data[L-\u0026gt;length] = x; L-\u0026gt;length++; } else\tcout \u0026lt;\u0026lt; \u0026#34;数据表已满,插入失败\\n\u0026#34;; } ‍\n==MSQ 动态扩容==\nvoid MSQ_Addsize(MSQ\u0026amp; L, int len) { //动态增加长度,原理是申请新空间然后改变data指针指向 double* p = L-\u0026gt;data; L-\u0026gt;data = new double[MaxSize]; //申请一片新空间 for (int i = 0; i \u0026lt; L-\u0026gt;length; i++) L-\u0026gt;data[i] = p[i]; //复制数据-开销大 L-\u0026gt;Maxlength = L-\u0026gt;Maxlength + len; //增加最大热容量 free(p); } ‍\n输出\nvoid SSQ_print(SSQ L) { //简单输出元素 for (int i = 1; i \u0026lt; L-\u0026gt;length + 1; i++) cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; -- \u0026#34; \u0026lt;\u0026lt; L-\u0026gt;data[i - 1] \u0026lt;\u0026lt; endl; } ‍\n写入\nvoid SSQ_insert(SSQ\u0026amp; L, int sit, double x) { //数据表已有数据中的插入, 双判: 位置溢出,表格溢出,这里的x是第几个的意思 if (sit\u0026lt;1 || sit\u0026gt;L-\u0026gt;length + 1 || L-\u0026gt;length == MaxSize) //sit代表位置of第几位的插入操作的; 如果是动态的注意最大上限L-\u0026gt;length \u0026gt;= L-\u0026gt;Maxlength return; for (int j = L-\u0026gt;length; j \u0026gt;= sit - 1; j--) L-\u0026gt;data[j + 1] = L-\u0026gt;data[j]; L-\u0026gt;data[sit - 1] = x; //插入到数据中 L-\u0026gt;length++; } //注意,采用Inlist初始化的list,判定无法插入的条件更为宽松,同时打印的时候也可以无脑全部打印. ‍\n删除\nvoid SSQ_del(SSQ\u0026amp; L, int sit) { //删除指定位置的元素,容错判定x1 if (sit\u0026lt;1 || sit\u0026gt;L-\u0026gt;length) return; for (int j = sit - 1; j \u0026lt; L-\u0026gt;length; j++) L-\u0026gt;data[j] = L-\u0026gt;data[j + 1]; L-\u0026gt;length--; }//可以定义一个引用形参\u0026amp;e, 这样就能返回被删除的元素了. ‍\n查找\nint SSQ_find(SSQ\u0026amp; L, double x) { //简单查找对应值的下标 int i = 0; while (i \u0026lt;= L-\u0026gt;length \u0026amp;\u0026amp; L-\u0026gt;data[i] != x) i++; if (i \u0026gt; L-\u0026gt;length) return -1; else return i + 1; } ‍\n比较\nint SSQ_Compare(SSQ L1, SSQ L2) { //特种函数:比较大小(类似str的方法); int s2 = 0;\tint i = 0;\tint s1 = 0; while (i \u0026lt; L1-\u0026gt;length \u0026amp;\u0026amp; i \u0026lt; L2-\u0026gt;length \u0026amp;\u0026amp; L1-\u0026gt;data[i] == L2-\u0026gt;data[i]) i++; s1 -= i;\ts2 -= i; if (s1 == s2 \u0026amp;\u0026amp; s1 == 0) return 0; else if (s1 == 0 \u0026amp;\u0026amp; s2 \u0026gt; 0 || s1 \u0026gt; 0 \u0026amp;\u0026amp; s2 \u0026gt; 0 \u0026amp;\u0026amp; L1-\u0026gt;data[i] \u0026lt; L2-\u0026gt;data[i]) return -1; else return 1; } ‍\n排序\nvoid SSQ_sort(SSQ\u0026amp; L) { //降序排列,产生新的qlist,并更改L的指向. SSQ N; SSQ_new(N); double baddest = -114514; int sit = 0; while (L-\u0026gt;length \u0026gt; 0) { baddest = -114514; for (int i = 0; i \u0026lt; L-\u0026gt;length; i++) { if (L-\u0026gt;data[i] \u0026gt; baddest) { baddest = L-\u0026gt;data[i]; sit = i + 1; } } SSQ_add(N, baddest); SSQ_del(L, sit); } L = N; } ‍\n最值\ndouble SSQ_max(SSQ L) { //在数组里找最大值,返回这个值 double baddest = -114514; baddest = -114514; for (int i = 0; i \u0026lt; L-\u0026gt;length; i++) if (L-\u0026gt;data[i] \u0026gt; baddest) baddest = L-\u0026gt;data[i]; return baddest; } ‍\n拷贝\nSSQ SSQ_copy(SSQ L) { //完全复制返回一样的内容 SSQ N; SSQ_new(N); for (int i = 0; i \u0026lt; L-\u0026gt;length; i++) { SSQ_add(N, L-\u0026gt;data[i]); } return N; } ‍\n‍\n‍\n# 链表 ‍\n# Tips ‍\n# 基操 ‍\n定义+初始化\ntypedef struct Slinklist{ double data; Slinklist* next; }*SLL, snode; void SLL_new(SLL\u0026amp; L){ L = new snode; L-\u0026gt;next = NULL; //L-\u0026gt;before = NULL; //DLL L-\u0026gt;data = -1; //将头结点初始化. } ‍\n‍\n头尾插入+定点前后插\nvoid SLL_add(SLL\u0026amp; L, double data) { //尾插新项 SLL p = L;//遍历指针p snode* N = new snode; N-\u0026gt;next = NULL; //N-\u0026gt;before = NULL; //DLL N-\u0026gt;data = data;//新节点装填完毕 while (p-\u0026gt;next != NULL)//有头结点就不需要考虑这个问题 p = p-\u0026gt;next; p-\u0026gt;next = N; //N-\u0026gt;before = p; //DLL } void SLL_insert(SLL\u0026amp; L, double data) { //头插新项,考虑原来是空的情况 snode* N = new snode; N-\u0026gt;next = NULL; if (L-\u0026gt;next == NULL) { L-\u0026gt;next = N; N-\u0026gt;data = data; //N-\u0026gt;before = L; //DLL return; } else { N-\u0026gt;next = L-\u0026gt;next; N-\u0026gt;data = data; //N-\u0026gt;next-\u0026gt;before = N; //DLL L-\u0026gt;next = N; //N-\u0026gt;before = L; //DLL return; } } void SLL_fin(SLL p, double data) { //给定指针节点的前插操作,O1的偷天换日方法 SLL s = new snode; s-\u0026gt;next = p-\u0026gt;next; //s-\u0026gt;before = p; //DLL p-\u0026gt;next = s; s-\u0026gt;data = p-\u0026gt;data; p-\u0026gt;data = data; } void SLL_bin(SLL p, double data) { //给定指针节点的后插操作 SLL s = new snode; s-\u0026gt;data = data; s-\u0026gt;next = p-\u0026gt;next; //s-\u0026gt;before = p; p-\u0026gt;next = s; } ‍\n删除\nvoid SLL_Del(SLL\u0026amp; L, SLL\u0026amp; p) { //删除一个节点p,当然也可以用偷天换日,把后面的节点覆盖到这里来,如果是表尾就delete SLL q = L; //移动指针,跑到p节点的前一个节点 while (q-\u0026gt;next != p) q = q-\u0026gt;next; if (p-\u0026gt;next != NULL) q-\u0026gt;next = q-\u0026gt;next-\u0026gt;next; else q-\u0026gt;next = NULL; } void SLL_Delete(SLL\u0026amp; p) { //偷天换日 if (p-\u0026gt;next == NULL) delete(p); else { SLL q = p-\u0026gt;next; p-\u0026gt;data = p-\u0026gt;next-\u0026gt;data; p-\u0026gt;next = q-\u0026gt;next; delete(q); } } void DLL_Del(DLL\u0026amp; L, DLL\u0026amp; p) {//删除一个节点p,同样需要两个指针 DLL q = L; //移动指针,跑到p节点的前一个节点 while (q-\u0026gt;next != p) q = q-\u0026gt;next; if (p-\u0026gt;next != NULL) { q-\u0026gt;next = p-\u0026gt;next; //p\u0026#34;自动\u0026#34;移到了下一节点 p-\u0026gt;before = q; } else q-\u0026gt;next = NULL; } ‍\n长度\nint SLL_Length(SLL L) { //简单求表长(头结点用next) SLL p = L-\u0026gt;next; int length = 0; for (p; p != NULL; p = p-\u0026gt;next) length++; return length; } ‍\n判空\nbool SLL_isVoid(SLL\u0026amp; L) { //判空,是空就返回true if (L-\u0026gt;next == NULL) return true; else return false; } ‍\n打印\nvoid SLL_Print(SLL\u0026amp; L){ SLL p = L;//遍历指针p while (p-\u0026gt;next != NULL){//有头结点就不需要考虑这个问题 p = p-\u0026gt;next; cout \u0026lt;\u0026lt; p-\u0026gt;data \u0026lt;\u0026lt; endl; } cout \u0026lt;\u0026lt; endl; } ‍\n查找+定位\nSLL SLL_Get(SLL L, int i) { //简单按序号查找第i位指针 SLL p = L; //遍历指针 int j = 0; while (p-\u0026gt;next != NULL \u0026amp;\u0026amp; j \u0026lt; i){ p = p-\u0026gt;next; j++; } if (j == i) return p; else return NULL; } SLL SLL_Loc(SLL L, double x) { //简单定位元素 SLL p = L; while (p-\u0026gt;next != NULL \u0026amp;\u0026amp; p-\u0026gt;data != x) p = p-\u0026gt;next; return p; } ‍\n复制\nSLL SLL_Copy(SLL\u0026amp; L) { //最简单由L生成相同list,两个的内容是完全相同的 SLL N; SLL_new(N); //构建N SLL p = L; //遍历p SLL q = N; //遍历q while (p-\u0026gt;next != NULL) { snode* n = new snode;//新节点,每次都要申请空间 n-\u0026gt;next = NULL; p = p-\u0026gt;next; n-\u0026gt;data = p-\u0026gt;data; q-\u0026gt;next = n; q = q-\u0026gt;next; } return N; } ‍\n最值\nSLL SLL_max(SLL L){ SLL p = L; //遍历指针 SLL S = L; //存储指针 double maxpow = -114514; for (p; p != NULL; p = p-\u0026gt;next) { //经典for中的p查找 if (p-\u0026gt;data \u0026gt; maxpow) { //链表选择排序 maxpow = p-\u0026gt;data; S = p; } } return S; } ‍\n连接链表\nSLL SLL_Combine(SLL\u0026amp; A, SLL\u0026amp; B, SLL\u0026amp; L) { //最简单链接AB链表到L中去 SLL p = A; //a1移动到末尾A SLL q = B; //q去链接b中元素到L余下,保证A,B不受影响 SLL t = L; //t去遍历L. SLL_new(t); while (p-\u0026gt;next != NULL) { snode* n = new snode;//新节点,每次都要申请空间 n-\u0026gt;next = NULL; p = p-\u0026gt;next; n-\u0026gt;data = p-\u0026gt;data; t-\u0026gt;next = n; //赋值构造得到的节点 t = t-\u0026gt;next; } while (q-\u0026gt;next != NULL) { snode* n = new snode;//新节点,每次都要申请空间 n-\u0026gt;next = NULL; q = q-\u0026gt;next; n-\u0026gt;data = q-\u0026gt;data; t-\u0026gt;next = n; //赋值构造得到的节点 t = t-\u0026gt;next; } return L; } ‍\n去重\nvoid SLL_Remove(SLL\u0026amp; L) { //简单的去重算法,删除连续的后一个 SLL q, p; q = L; if (L-\u0026gt;next != NULL) { p = L-\u0026gt;next; while (p != NULL \u0026amp;\u0026amp; q != NULL) { if (p-\u0026gt;data == q-\u0026gt;data) { SLL_Del(L, p); p = q-\u0026gt;next; } p = p-\u0026gt;next; q = q-\u0026gt;next; } } else return; //就一个去什么重啊? } ‍\n节点调换\nvoid SLL_Change(SLL\u0026amp; p, SLL\u0026amp; q) { //简单通过修改对应值进行两个节点的伪调换 double t = 0; t = q-\u0026gt;data; q-\u0026gt;data = p-\u0026gt;data; p-\u0026gt;data = t; } ‍\n逆转\nvoid SLL_Reverse(SLL\u0026amp; L) { //头插法简单逆转链表 SLL N, p = L-\u0026gt;next; SLL_new(N); while (p != NULL) { SLL_insert(N, p-\u0026gt;data); p = p-\u0026gt;next; } L = N; } ‍\n切片\nSLL SLL_Slice(SLL\u0026amp; p, SLL\u0026amp; q) { //返回一个新链表,由p,q节点以及之间的节点构成 SLL L; SLL_new(L); while (p != q) { SLL_add(L, p-\u0026gt;data); p = p-\u0026gt;next; } SLL_add(L, p-\u0026gt;data); return L; } ‍\n降序排列\nSLL SLL_sort(SLL\u0026amp; L) { //降序排列链表,返回个新链表 SLL p = L-\u0026gt;next; SLL N; SLL s; SLL_new(N); int times = SLL_Length(L);//判定需要找最大值的次数 double maxpower = 0; while (times \u0026gt; 0) { maxpower = -114514; while (p != NULL) { if (p-\u0026gt;data \u0026gt; maxpower) { maxpower = p-\u0026gt;data; s = p; } p = p-\u0026gt;next; } SLL_add(N, maxpower); SLL_Del(L, s); times--; p = L-\u0026gt;next; } return N; } ‍\n# 串 # Tips ‍\n# 基操 ‍\n初始化\ntypedef struct SS { char ch[MaxSize]; int length; }*SR; void SS_new(SR\u0026amp; S) { S = new SS; //分配空间 S-\u0026gt;length = 0; } void SS_create(SR\u0026amp; S, char chs[]) { //用字符数组/字符串string创造字符串 int i = 0; while (chs[i] != \u0026#39;\\0\u0026#39;){\t//循环，将字符串常量的值赋值给S S-\u0026gt;ch[i] = chs[i]; i++; } S-\u0026gt;length = i; } ‍\n复制\nS-\u0026gt;ch[i] = T-\u0026gt;ch[i];S-\u0026gt;length = T-\u0026gt;length; ‍\n连接,切片,比较\nvoid SS_concat(SR\u0026amp; S, SR\u0026amp; Q) { //连接Q到S int j = 0; int i = S-\u0026gt;length; for (j; j \u0026lt; Q-\u0026gt;length; i++, j++) S-\u0026gt;ch[i] = Q-\u0026gt;ch[j]; S-\u0026gt;length += Q-\u0026gt;length; } void SS_Sub(SR\u0026amp; S, SR\u0026amp; T, int pos, int len) {//用T返回S的第pos个字符起长度为len的子串 if (pos + len - 1 \u0026gt; S-\u0026gt;length) return; //越界. for (int i = pos; i \u0026lt; pos + len; i++) T-\u0026gt;ch[i - pos + 1] = S-\u0026gt;ch[i]; //这步高明,可以实现i-pos T-\u0026gt;length = len; } int SS_Compare(SR\u0026amp; S, SR\u0026amp; T) { // 这个是COm,自己实现的比较算法,返回-1,0,1. 当然可以用作那个验证相等,返回0 for (int i = 1; i \u0026lt; S-\u0026gt;length \u0026amp;\u0026amp; i \u0026lt; T-\u0026gt;length; i++) if (S-\u0026gt;ch[i] != T-\u0026gt;ch[i]) return S-\u0026gt;ch[i] - T-\u0026gt;ch[i]; return S-\u0026gt;length - T-\u0026gt;length; } ‍\n查找\nint SS_index(SR\u0026amp; S, SR\u0026amp; T) { // 最简单的朴素算法, int i = 1, n = S-\u0026gt;length, m = T-\u0026gt;length; SR sub; SS_new(sub); //创建暂存子串. while (i \u0026lt; n - m + 1) { SS_Sub(sub, S, i, m); if (SS_Compare(sub, T) != 0) i++; else return i; //返回位置 } return -1; //找不到了. } ‍\n# 栈 # Tips ‍\n采用无头结点,顺序栈与链式栈,未设置 bool 判断插入成功还是失败\n‍\n# 基操 ‍\n构建+判空\ntypedef struct Sqstack {//顺序栈定义 double data[MaxSize]; int top; }*SST; void SQ_new(SST\u0026amp; S) { //初始化:设置栈顶指针为-1,接下来会指向要插入的位置 S = new Sqstack; S-\u0026gt;top = -1; } if (S-\u0026gt;top == -1) return true; //判断栈空 ‍\n压入+弹出\nvoid SQ_push(SST\u0026amp; S, double x) { //省略设置返回值 if (S-\u0026gt;top == MaxSize - 1) return; S-\u0026gt;data[++S-\u0026gt;top] = x; } void SQ_pop(SST\u0026amp; S) { S-\u0026gt;top--; } ‍\n‍\n# 队列/双端 # Tips ‍\n# 基操 //创建一个循环队列--避免空间的浪费,指针中间空一格,同时指向一个则是空,中间差一个就是满 typedef struct SqQueue { double data[MaxSize]; int front, back; //队头队尾指针,rear=back,代表插入的队尾,是不断前进的,别搞翻了哈 }*SQE, que; //重写名称 typedef struct Lqnode { //链队的节点 double data; struct Lqnode* next; }Linknode, * LQ; typedef struct LQE { //链队- 有队头指针和队尾指针 ,无头结点 Linknode* front, * rear; }LQE; void SQE_new(SQE\u0026amp; Q) { //初始化指针 Q = new que;//申请 Q-\u0026gt;back = Q-\u0026gt;front = 0; } void LQE_new(LQE\u0026amp; Q) { //初始化链队 //Q.front = Q.rear = new Lqnode; //队头队尾同时指向相同的空间 -\u0026gt; 有头结点的 Q.front = NULL; Q.rear = NULL; } ‍\n判\nbool SQE_isVoid(SQE Q) { if (Q-\u0026gt;back == Q-\u0026gt;front) return true; else return false; } bool LQE_isVoid(LQE Q) { //不带头结点的判空 if (Q.front == NULL) return true; else return false; } bool SQE_isFull(SQE\u0026amp; Q) { //循环队列判断是否满的操作 if ((Q-\u0026gt;back + 1) % MaxSize == Q-\u0026gt;front) return true; //队尾的下一个就是fr,取mod就是 else return false; } ‍\n出入\nvoid SQE_in(SQE\u0026amp; Q, double x) { //入队操作,设置bool返回是否成功挺好 if (SQE_isFull(Q)) return; //判断满的条件:避免假满,则使用取模运算 Q-\u0026gt;data[Q-\u0026gt;back] = x; Q-\u0026gt;back = (Q-\u0026gt;back + 1) % MaxSize; //空间化为环形 } void LQE_in(LQE\u0026amp; Q, double x) { //没有头结点的 LQ N = new Lqnode; //N为新节点,LQ表示指针 N-\u0026gt;data = x; N-\u0026gt;next = NULL; if (Q.front == NULL) { Q.front = N; Q.rear = N; } else { Q.rear-\u0026gt;next = N; Q.rear = N; //队伍越拉越长,队尾一直往后走了. } } void SQE_out(SQE\u0026amp; Q) { //出队 if (Q-\u0026gt;back == Q-\u0026gt;front) return;//啥都没有 cout \u0026lt;\u0026lt; Q-\u0026gt;data[Q-\u0026gt;front]; //简单输出 Q-\u0026gt;front = (Q-\u0026gt;front + 1) % MaxSize; } void LQE_out(LQE\u0026amp; Q) { //出队,没有头结点 if (Q.front == NULL) return; //无了 if (Q.rear == Q.front) { //出队是最后一个 Q.front = NULL; Q.rear = NULL; } else Q.front = Q.front-\u0026gt;next; //更改指向,之前的出去了. //本来应该加上一个p指向当前要被删除的家伙,返回值后还有delete(p)来回收空间的,但是这里只是简单演示,就不搞了 //同时,也可以调换几步的顺序 } ‍\n# 树 ‍\n# Tips int Node_Counter = 0; //全局变量计算节点个数 //10月16日终于开始对树结构的冲击,此时已经是第8周了,原定于第二周就可以开始的作战计划终究还是被赵括大佐英明神武的微操干碎了 ‍\n# 基操 ‍\n初始化\n//TR - typedef struct BTnode { //普通二叉树,链式实现,双链域 double data; struct BTnode* L, * R; //左孩子右孩子Left_child,Right_child }btnode, * TR; //TR= tree //BT - typedef struct BBTnode { //孩子兄弟表示法的树 double data; struct BBTnode* C, * B; //\u0026#34;第一个孩子\u0026#34;和ta右兄弟Child_first,Brother_right }bbtnode, * BT; //BT =brother tree //TT - typedef struct TBTnode { //普通线索二叉树-先是一般的二叉树,然后通过不同的4种遍历方式完成线索化. double data; struct TBTnode* L, * R; int ltag, rtag; //左右线索标志,0,1代表是有元素还是没有(0),没有则用来存放前驱后继线索 }tbtnode, * TB; //TT =thread(tag) tree //二叉排序树,左小右大,不展示了,就是中序遍历的招数,左小于根小于右 //线索二叉树 //更改的匹配树结构的2个队列结构: typedef struct Lqnode { //链队节点 TR Tree; struct Lqnode* next; }Linknode, * LQ; typedef struct LQE { //链队- 有队头指针和队尾指针 ,无头结点 Linknode* front, * rear; }LQE; typedef struct TLqnode { //链队节点 TB Tree; struct TLqnode* next; }TLinknode, * TQ; typedef struct TQE { //链队- 有队头指针和队尾指针 ,无头结点 TLinknode* front, * rear; }TQE; //线索二叉树适配: void TQE_new(TQE\u0026amp; Q) { //初始化链队 Q.front = NULL; Q.rear = NULL; } bool TQE_isVoid(TQE Q) { //不带头结点的判空 if (Q.front == NULL) return true; else return false; } void TQE_in(TQE\u0026amp; Q, TB x) { //没有头结点的入队rear TQ N = new TLqnode; N-\u0026gt;Tree = x; N-\u0026gt;next = NULL; if (Q.front == NULL) { Q.front = N; Q.rear = N; } else { Q.rear-\u0026gt;next = N; Q.rear = N; } } void TQE_out(TQE\u0026amp; Q, TB\u0026amp; x) { //出队front x = Q.front-\u0026gt;Tree; if (Q.front == NULL) return; if (Q.rear == Q.front) { Q.front = NULL; Q.rear = NULL; } else Q.front = Q.front-\u0026gt;next; } ‍\n# 通用基操 void TR_void_tree(TR\u0026amp; T) {//树的销毁 T = NULL; //T变成空树 } void TR_new_root(TR\u0026amp; T) { //插入根节点(这里设置为无意义 T = new btnode; //申请节点空间 T-\u0026gt;data = 114514; //好臭的树 T-\u0026gt;L = T-\u0026gt;R = NULL; } void TR_new(TR\u0026amp; T) { //树的初始化 TR_void_tree(T); TR_new_root(T); } int TR_Hight(TR T) { //递归求高度 if (T == NULL) return 0; else return max(TR_Hight(T-\u0026gt;L), TR_Hight(T-\u0026gt;R)) + 1; } int TR_Depth(TR T, TR p) { return TR_Hight(T) - TR_Hight(p) + 1; } //复合求\u0026#34;节点\u0026#34;深度, 根节点和要求的节点 ‍\n# TR 基操 void TR_lsert(TR\u0026amp; p, double x) { //对应节点之后的左差新节点 TR N = new btnode; N-\u0026gt;data = x; N-\u0026gt;L = N-\u0026gt;R = NULL; p-\u0026gt;L = N; } void TR_rsert(TR\u0026amp; p, double x) { //对应节点之后的右差新节点 TR N = new btnode; N-\u0026gt;data = x; N-\u0026gt;L = N-\u0026gt;R = NULL; p-\u0026gt;R = N; } void TR_SERT(int u, TR\u0026amp; p, double x) { //参数列表第一个是判断,对应节点插入 , 0左1右 TR N = new btnode; N-\u0026gt;data = x; N-\u0026gt;L = N-\u0026gt;R = NULL; if (u == 1) p-\u0026gt;R = N; else p-\u0026gt;L = N; } void TR_delete(TR\u0026amp; p, int L_or_R) { //传入要删除的节点指针,判断进行删除的是左孩子还是右孩子 if (L_or_R == 0) { //0=Left; delete(p-\u0026gt;L); p-\u0026gt;L = NULL; } else {// } } ‍\n# BT 基操 void BT_Child_insert(BT\u0026amp; p, double x) { //孩子兄弟树的手动插入一个孩子节点. BT N = new bbtnode; N-\u0026gt;data = x; N-\u0026gt;C = N-\u0026gt;B = NULL; p-\u0026gt;C = N; } void BT_Brother_insert(BT\u0026amp; p, double x) { //孩子兄弟树的手动插入一个兄弟节点. BT N = new bbtnode; N-\u0026gt;data = x; N-\u0026gt;C = N-\u0026gt;B = NULL; p-\u0026gt;B = N; } ‍\n# TB 基操 void TB_new_root(TB\u0026amp; T) { //插入根节点(这里设置为无意义 T = new tbtnode; //申请节点空间 T-\u0026gt;data = 114514; //好臭的树 T-\u0026gt;L = T-\u0026gt;R = NULL; } void TB_lsert(TB\u0026amp; p, double x) { //对应节点之后的左差新节点 TB N = new tbtnode; N-\u0026gt;data = x; N-\u0026gt;L = N-\u0026gt;R = NULL; p-\u0026gt;L = N; p-\u0026gt;ltag = 0; } void TB_rsert(TB\u0026amp; p, double x) { //对应节点之后的右差新节点 TB N = new tbtnode; N-\u0026gt;data = x; N-\u0026gt;L = N-\u0026gt;R = NULL; p-\u0026gt;R = N; p-\u0026gt;rtag = 0; } ‍\n# Pr,Po,In 遍历 void TR_visit(TR S) { //访问,简单输出 cout \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; S-\u0026gt;data \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } void TR_PreOrder(TR\u0026amp; T) { //先序遍历 if (T != NULL) { TR_visit(T); //根 TR_PreOrder(T-\u0026gt;L); //左 TR_PreOrder(T-\u0026gt;R); //右 } } void TR_InOrder(TR\u0026amp; T) { //中序遍历 if (T != NULL) { TR_InOrder(T-\u0026gt;L); //左 TR_visit(T); //根 TR_InOrder(T-\u0026gt;R); //右 } } void TR_PostOrder(TR\u0026amp; T) { //后序遍历 if (T != NULL) { TR_PostOrder(T-\u0026gt;L); //左 TR_PostOrder(T-\u0026gt;R); //右 TR_visit(T); //根 } } void TR_count(TR\u0026amp; T) { //中序遍历计算节点个数 if (T != NULL) { TR_InOrder(T-\u0026gt;L); //左 Node_Counter++; //计数器 TR_InOrder(T-\u0026gt;R); //右 } else { cout \u0026lt;\u0026lt; \u0026#34;二叉树共有 \u0026#34; \u0026lt;\u0026lt; Node_Counter \u0026lt;\u0026lt; \u0026#34;个节点\\n\u0026#34;; Node_Counter = 0; } } void TR_LevelOrder(TR\u0026amp; T) { //print:层序遍历,需要用到队列 cout \u0026lt;\u0026lt; \u0026#34;\\n\\n层序遍历T: \\n\\n\u0026#34;; LQE Q; LQE_new(Q); TR p = T; //遍历节点 LQE_in(Q, T); //根节点入队. while (!LQE_isVoid(Q)) { LQE_out(Q, p); //队头出队 TR_visit(p); //访问出队节点,这里就实现了把孩子入队的过程. if (p-\u0026gt;L != NULL) LQE_in(Q, p-\u0026gt;L); if (p-\u0026gt;R != NULL) LQE_in(Q, p-\u0026gt;R); } } void TR_Print(TR\u0026amp; T) { //直接就在这里给我格式化输出了,要求: 每层换行,直观展示... cout \u0026lt;\u0026lt; \u0026#34;\\n\\n高级层序遍历T: \\n\\n\u0026#34;; int H = TR_Hight(T); //保存现在的树的高度 TR p = T; LQE Q; LQE_new(Q); LQE_in(Q, T); //根节点入队. while (!LQE_isVoid(Q)) {//这里判断要出队访问的对象的层数与当前的保存的对象层数是否一样. LQE_out(Q, p); //队头出队 if (TR_Hight(p) != H) { H = TR_Hight(p); cout \u0026lt;\u0026lt; endl; } TR_visit(p); //访问出队节点,这里就实现了把孩子入队的过程. if (p-\u0026gt;L != NULL) LQE_in(Q, p-\u0026gt;L); if (p-\u0026gt;R != NULL) LQE_in(Q, p-\u0026gt;R); } cout \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; } ‍\n‍\n# 线索二叉树操作 ‍\n构建操作: 索化遍历前中后\nvoid TB_Pre_Create(TB\u0026amp; T) { //先序线索化二叉树 pre = NULL; if (T != NULL) TB_PreOrder(T); } void TB_In_Create(TB\u0026amp; T) { //中序线索化二叉树 pre = NULL; if (T != NULL) { TB_InOrder(T); //核心; //if (pre-\u0026gt;R == NULL) //这个老是报错很烦不写了,总之退出后之前记录的pre就是最后的一个了,记得处理一下. //\tpre-\u0026gt;rtag = 1; //处理遍历的最后一个节点:如果右子树为空,则线索化为NULL; } } void TB_Post_Create(TB\u0026amp; T) { //后序线索化二叉树 pre = NULL; if (T != NULL) TB_PostOrder(T); } void TB_Normal_visit(TB T) { //简单访问:区别于之前的构造线索二叉树的遍历访问方式. cout \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; T-\u0026gt;data \u0026lt;\u0026lt; \u0026#34; \\n\u0026#34;; } //--------------PRE--------------------- //没有三叉链表指向父节点,无法反向输出序列 - 要么是父节点要么是左兄弟子树中最后一个被先序遍历的节点s(由于先序遍历中,子节点只可能是根节点的后续) //有越位访问的bug,看个思维即可 TB TB_Pre_FirstNode(TB p) { if (p-\u0026gt;ltag == 0) return p-\u0026gt;L; else return p-\u0026gt;R; } TB TB_Pre_NextNode(TB p) { //前序遍历p的后续:左孩子\u0026gt;右孩子 if (p-\u0026gt;rtag == 0)return TB_Pre_FirstNode(p); else return p-\u0026gt;R; } void TB_Thread_PreOrder(TB\u0026amp; T) { //特种前序主函数 for (TB p = T; p != NULL; p = TB_Pre_NextNode(p)) TB_Normal_visit(p); } //--------------IN---------------------- TB TB_In_FirstNode(TB p) { //找中序线索二叉树的p的后继,并且通过这实现O(1)时间复杂度的非递归中序遍历中序线索二叉树 -01 while (p-\u0026gt;ltag == 0) p = p-\u0026gt;L; //找最左下节点 return p; } TB TB_In_LastNode(TB p) { //找中序线索二叉树的p的前驱,并且通过这实现O(1)时间复杂度的非递归中序反向遍历中序线索二叉树 -02 while (p-\u0026gt;rtag == 0) p = p-\u0026gt;R; //找最右下节点 return p; } TB TB_In_NextNode(TB p) { //直接找后继 / 推演找后继 if (p-\u0026gt;rtag == 0) return TB_In_FirstNode(p-\u0026gt;R);//根据中序展开的推演结果,后继不是rtag指向的目标就是右子树中的最左下节点(左根右) else return p-\u0026gt;R; //p.rtag==1 -\u0026gt;有线索化了. } TB TB_In_PreNode(TB p) { //直接找前驱 / 推演找前驱 if (p-\u0026gt;ltag == 0) return TB_In_LastNode(p-\u0026gt;L);//根据中序展开的推演结果,前驱不是ltag指向的目标就是左子树中的最右下节点(左根右) else return p-\u0026gt;L; //p.ltag==1 -\u0026gt;有线索化了. } void TB_Thread_InOrder(TB\u0026amp; T) { //特种中序主函数 for (TB p = TB_In_FirstNode(T); p != NULL; p = TB_In_NextNode(p)) TB_Normal_visit(p); } void TB_Thread_Rev_InOrder(TB\u0026amp; T) { //特种反向中序主函数 for (TB p = TB_In_LastNode(T); p != NULL; p = TB_In_PreNode(p)) TB_Normal_visit(p); } //--------------POST---------------- //没有三叉链表指向父节点,无法正向输出序列; -要么是他的父节点要么是右兄弟中第一个被后续遍历的节点 TB TB_Post_LastNode(TB p) { if (p-\u0026gt;rtag == 0) return p-\u0026gt;R; //有右孩子, 前驱就是右孩子,否则有左孩子就是左孩子 else return p-\u0026gt;L; } TB TB_Post_PreNode(TB p) { //前序遍历p的后续:左孩子\u0026gt;右孩子 if (p-\u0026gt;ltag == 0)return TB_Post_LastNode(p); else return p-\u0026gt;L; } void TB_Thread_Rev_PostOrder(TB\u0026amp; T) { //特种前序主函数 for (TB p = T; p != NULL; p = TB_Post_PreNode(p)) TB_Normal_visit(p); } //整体和先序的找后续一样,两个极端. ‍\n遍历基础二叉树\n//线索二叉树的前序中序后序Pr,Po,In遍历 TB pre = NULL; //全局变量来指向当前访问的节点的前驱. //构建线索二叉树: 直接使用visit来实现. void TB_visit(TB q) { if (q-\u0026gt;L == NULL) { //左子树位子空了,当作前驱线索指向前面的pre; q-\u0026gt;L = pre; q-\u0026gt;ltag = 1; } if (pre != NULL \u0026amp;\u0026amp; pre-\u0026gt;R == NULL) { //前面有人,并且右子树是空的,当作它的后继线索指向现在的对象. pre-\u0026gt;R = q; //建立前驱节点的后继线索. pre-\u0026gt;rtag = 1; } pre = q; //让前驱跟上q节点. } void TB_PreOrder(TB\u0026amp; T) { //先序遍历 if (T != NULL) { TB_visit(T); //根 TB_PreOrder(T-\u0026gt;L); //左 TB_PreOrder(T-\u0026gt;R); //右 } } void TB_InOrder(TB\u0026amp; T) { //中序遍历 if (T != NULL) { TB_InOrder(T-\u0026gt;L); //左 TB_visit(T); //根 TB_InOrder(T-\u0026gt;R); //右 } } void TB_PostOrder(TB\u0026amp; T) { //后序遍历 if (T != NULL) { TB_PostOrder(T-\u0026gt;L); //左 TB_PostOrder(T-\u0026gt;R); //右 TB_visit(T); //根 } } void TB_LevelOrder(TB\u0026amp; T) { //print:层序遍历,需要用到队列 cout \u0026lt;\u0026lt; \u0026#34;\\n\\n层序遍历T: \\n\\n\u0026#34;; TQE Q; TQE_new(Q); TB p = T; //遍历节点 TQE_in(Q, T); //根节点入队. while (!TQE_isVoid(Q)) { TQE_out(Q, p); //队头出队 TB_visit(p); //访问出队节点,这里就实现了把孩子入队的过程. if (p-\u0026gt;L != NULL) TQE_in(Q, p-\u0026gt;L); if (p-\u0026gt;R != NULL) TQE_in(Q, p-\u0026gt;R); } } //这个有问题,不搞了 void TB_Print(TB\u0026amp; T) { //直接就在这里给我格式化输出了,要求: 每层换行,直观展示... cout \u0026lt;\u0026lt; \u0026#34;\\n\\n高级层序遍历T: \\n\\n\u0026#34;; int H = TB_Hight(T); //保存现在的树的高度 TB p = T; TQE Q; TQE_new(Q); TQE_in(Q, T); //根节点入队. while (!TQE_isVoid(Q)) {//这里判断要出队访问的对象的层数与当前的保存的对象层数是否一样. TQE_out(Q, p); //队头出队 if (TB_Hight(p) != H) { H = TB_Hight(p); cout \u0026lt;\u0026lt; endl; } TB_visit(p); //访问出队节点,这里就实现了把孩子入队的过程. if (p-\u0026gt;L != NULL \u0026amp;\u0026amp; p-\u0026gt;ltag != 1) TQE_in(Q, p-\u0026gt;L); if (p-\u0026gt;R != NULL \u0026amp;\u0026amp; p-\u0026gt;rtag != 1) TQE_in(Q, p-\u0026gt;R); } cout \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; } ‍\n‍\n# 图 ‍\n# Tips ‍\n全局变量和定义\n#define MaxSize 100 //一般最大值. #define MaxV_num 10 //顶点数目最大值 #define Infinity 114514 //无穷数 bool visited[MaxV_num]; //访问标记 int Distance[MaxV_num]; //最短路径 int path[MaxV_num]; //最短路径的来源 ‍\n‍\n# 基操 ‍\n定义\n//定义的顶点结构: typedef string DataType; //指定string字符串为表内的数据对象 typedef struct VertexType { //顶点结构 int no{}; //N.O. 顶点的编号 DataType data; //顶点包含的数据 }VT; //邻接矩阵 MG typedef struct MGraph { VT VG[MaxV_num]; //顶点表,类型为自定义VT int EG[MaxV_num][MaxV_num]{}; //打上了{}代表已经提前都是0的邻接矩阵,0,1或是Wij和0或Infinity int Vnum{}; //顶点数 int Enum{}; //边数 ==Anum }MG, * AMG; //邻接表 LG typedef struct EdgeNode { //表(后继)结点的类型 int no{}; //代表的顶点序号 DataType data; //权值or信息 struct EdgeNode* next{}; //指向下一个节点 }ED, * EN; typedef struct VertexNode { //头结点类型 VT data; //头结点 EN First_Edge{}; //指向第一个表结点的指针 }Vnode; typedef struct Algraph { //邻接表类型 Vnode List[MaxV_num]; //表的本体 int Vnum{}; //顶点数 int Enum{}; //边数 }LG, * ALG; //Queue存放顶点对象VT; typedef struct Queue { VT node[MaxSize]{}; int front{}; int back{}; //队头队尾指针,rear=back,代表插入的队尾,是不断前进的 }*QU, que; ‍\n构造: 输入式/数组式\nvoid MG_input(MG\u0026amp; M) { //输入邻接矩阵的边的信息(0代表第一个点) cin \u0026gt;\u0026gt; M.Enum \u0026gt;\u0026gt; M.Vnum; //输入邻接矩阵的顶点数和边数 int outone, inone; for (int i = 0; i \u0026lt; M.Enum; i++) { //输入边的信息 inp:cin \u0026gt;\u0026gt; outone \u0026gt;\u0026gt; inone; //输入行,列(可以只搞上三角) if (outone == inone) {//输到对角元素上了,不行,自己没有自己 cout \u0026lt;\u0026lt; \u0026#34;\\n错误!不能指向自己!\\n\u0026#34;; goto inp; } M.EG[outone][inone] = 1; //对应的值赋1; } for (int i = 1; i \u0026lt; M.Vnum; i++) // 为邻接矩阵下三角赋值-简单的镜面对称 for (int j = 0; j \u0026lt; i; j++) M.EG[i][j] = M.EG[j][i]; for (int i = 0; i \u0026lt; M.Vnum; i++) { M.VG[i].no = i; //顶点元素赋值 } } void MG_EZnew(MG\u0026amp; M) { // 简单生成一个邻接矩阵5-5 (eg), 也可以有一个临时数组 M.Enum = M.Vnum = 5; //分别对5个顶点的出度赋值,然后后面景象到入度.无向图. M.EG[0][4] = 1; M.EG[0][2] = 1; M.EG[1][2] = M.EG[1][3] = 1; M.EG[2][0] = M.EG[2][1] = M.EG[2][3] = 1; M.EG[3][2] = M.EG[3][1] = 1; M.EG[4][0] = 1; //还有顶点的名字赋值:no项: for (int i = 0; i \u0026lt; M.Vnum; i++) { M.VG[i].no = i; //顶点元素赋值 } } ‍\n转换为邻接表\nvoid LG_Create_from_MG(ALG\u0026amp; lg, MG mg) {//由图的邻接矩阵创建图的邻接表 EdgeNode* p; //指向表结点的临时指针 lg = new LG; //新建LG邻接表 for (int i = 0; i \u0026lt; mg.Vnum; i++) //为邻接表所有头结点的指针域赋初值 lg-\u0026gt;List[i].First_Edge = NULL; for (int i = 0; i \u0026lt; mg.Vnum; i++) for (int j = mg.Vnum - 1; j \u0026gt;= 0; j--) if (mg.EG[i][j] != 0) //这里有条边的话. { //若顶点i、j之间有边 p = new EdgeNode; // 新表结点 p-\u0026gt;no = j; p-\u0026gt;data = mg.EG[i][j]; p-\u0026gt;next = lg-\u0026gt;List[i].First_Edge; lg-\u0026gt;List[i].First_Edge = p; } lg-\u0026gt;Vnum = mg.Vnum; lg-\u0026gt;Enum = mg.Enum; for (int i = 0; i \u0026lt; lg-\u0026gt;Vnum; i++) { lg-\u0026gt;List[i].data.no = i; //顶点元素赋值 } } ‍\n输出\nvoid MG_print(MGraph mg) { //简单输出图的邻接矩阵 for (int i = 0; i \u0026lt; mg.Vnum; i++) { for (int j = 0; j \u0026lt; mg.Vnum; j++) printf(\u0026#34;%3d\u0026#34;, mg.EG[i][j]); cout \u0026lt;\u0026lt; endl; } } void LG_print(ALG lg) {//输出图的邻接表 EN p; for (int i = 0; i \u0026lt; lg-\u0026gt;Vnum; i++) { p = lg-\u0026gt;List[i].First_Edge; //指向第一位 if (p) printf(\u0026#34;%3d：\u0026#34;, i); //打印结点 while (p) { //打印链表内元素 printf(\u0026#34;%3d\u0026#34;, p-\u0026gt;no); p = p-\u0026gt;next; } cout \u0026lt;\u0026lt; endl; } } ‍\n插入\nvoid MG_inVex(MG\u0026amp; G, VT v) {\t//插入顶点 ,由于数组下标比数量少1，可用旧顶点数做下标 G.VG[G.Vnum] = v; //顶点表增加 G.Vnum++; //顶点数加1 for (int i = 0; i \u0026lt; G.Vnum; i++) { //初始化新顶点与其他顶点关联:0 G.EG[G.Vnum - 1][i] = 0; G.EG[i][G.Vnum - 1] = 0; //倒置下三角赋值,学到了 } } ‍\n删除\nvoid MG_delVex(MG\u0026amp; G, VT v) {\t//顶点删除 - 简单的方法: 只是将节点对应的行和列变为0,同时加上一个isVoid变量来判断是否为无效点. int p = MG_findVex(G, v);\t//存放待删顶点下标位置 for (int i = 0; i \u0026lt; G.Vnum; i++) {\t//删除待删顶点所在列数据 for (int j = p + 1; j \u0026lt; G.Vnum; j++) { G.EG[i][j - 1] = G.EG[i][j]; //后面的移动到前面来覆盖 } } for (int i = 0; i \u0026lt; G.Vnum; i++) {\t//删除待删顶点所在行数据 for (int j = p + 1; j \u0026lt; G.Vnum; j++) { G.EG[j - 1][i] = G.EG[j][i]; //后面的移动到前面来覆盖 } } for (int i = p + 1; i \u0026lt; G.Vnum; i++) //删除在顶点集中的待删顶点 G.VG[i - 1] = G.VG[i]; //后面的移动到前面来覆盖 G.Vnum--;\t//顶点数自减 } ‍\n边的操作\nvoid MG_inEdge(MG\u0026amp; G, VT v1, VT v2) { //插入边,同时可以插入权值 int p1 = MG_findVex(G, v1), p2 = MG_findVex(G, v2);\t//存放两个关联点位置 G.EG[p1][p2] = G.EG[p2][p1] = 1;\t//将关联点在矩阵两处(边权)赋值 } void MG_delEdge(MG\u0026amp; G, VT v1, VT v2) {//删除边 int p1 = MG_findVex(G, v1), p2 = MG_findVex(G, v2);\t//存放两个关联点位置 G.EG[p1][p2] = G.EG[p2][p1] = 0;\t//将关联点在矩阵两处边权赋为0 } ‍\n‍\n# BFS void MG_BFS(MG\u0026amp; mg, QU\u0026amp; Q, int v) { //广度优先遍历核心部分. MG_BDfs_visit(mg, v); //设计的MG矩阵的广度优先以及深度优先搜索visit函数 visited[v] = true; QU_in(Q, mg.VG[v]); //入队0. while (!QU_isVoid(Q)) { int u = QU_head(Q); // QU_out(Q); //简单的队头元素出队,并取值. for (int j = 0; j \u0026lt; mg.Vnum; j++) { //从u元素对应的行开始找临界对象 if (mg.EG[u][j] != 0 \u0026amp;\u0026amp; visited[j] == false) { //有边且未被访问过 MG_BDfs_visit(mg, j); visited[j] = true; // 置顶点已被访问标志 QU_in(Q, mg.VG[j]); // 顶点j进队 } } } } void MG_BFS_Main(MG\u0026amp; mg) { //邻接矩阵的广度优先遍历 for (int i = 0; i \u0026lt; mg.Vnum; i++) visited[i] = false; //标记数组初始化; QU Q = QU_new(Q); for (int i = 0; i \u0026lt; mg.Vnum; i++) //继续调用 if (visited[i] == false) //对于每个联通分量调用一次BFS MG_BFS(mg, Q, i); } void LG_BFS(LG\u0026amp; lg, QU\u0026amp; Q, int v) { // LG_BDfs_visit(lg, v); visited[v] = true; QU_in(Q, lg.List[v].data); //入队 EdgeNode* p; while (!QU_isVoid(Q)) { int u = QU_head(Q); // QU_out(Q); //简单的队头元素出队,并取值.// 按邻接表顺序考察与顶点v邻接的各顶点w for (p = lg.List[u].First_Edge; p != NULL; p = p-\u0026gt;next) { int k = p-\u0026gt;no; //设置k为中介,获得边节点p的顶点值 if (visited[k] == false) { LG_BDfs_visit(lg, k); visited[k] = true; // 置顶点w已被访问标志 QU_in(Q, lg.List[k].data); //放入k } } } } void LG_BFS_Main(LG\u0026amp; lg) { //邻接表的广度优先遍历. for (int i = 0; i \u0026lt; lg.Vnum; i++) visited[i] = false; //标记数组初始化; QU Q = QU_new(Q); for (int i = 0; i \u0026lt; lg.Vnum; i++) if (visited[i] == false) LG_BFS(lg, Q, i); } ‍\n# DFS void MG_DFS(MG\u0026amp; mg, int v) { MG_BDfs_visit(mg, v); visited[v] = true; for (int j = 0; j \u0026lt; mg.Vnum; j++) { if (mg.EG[v][j] != 0 \u0026amp;\u0026amp; visited[j] == false) MG_DFS(mg, j); } } void MG_DFS_Main(MG\u0026amp; mg) { //邻接矩阵的深度优先遍历(from0) for (int i = 0; i \u0026lt; mg.Vnum; i++) visited[i] = false; //标记数组初始化; for (int i = 0; i \u0026lt; mg.Vnum; i++) //继续调用 if (visited[i] == false) //对于每个联通分量调用一次BFS MG_DFS(mg, i); } void LG_DFS(LG\u0026amp; lg, int v) { EdgeNode* p; LG_BDfs_visit(lg, v); visited[v] = true; p = lg.List[v].First_Edge; while (p) { // 检查所有与顶点i相邻接的顶点 if (visited[p-\u0026gt;no] == 0) // 如果该顶点未被访问过 LG_DFS(lg, p-\u0026gt;no); // 从邻接顶点出发深度优先搜索 p = p-\u0026gt;next; // 考察下一个邻接顶点 } } void LG_DFS_Main(LG\u0026amp; lg) { //邻接表的广度优先遍历. for (int i = 0; i \u0026lt; lg.Vnum; i++) visited[i] = false; //标记数组初始化; for (int i = 0; i \u0026lt; lg.Vnum; i++) if (visited[i] == false) LG_DFS(lg, i); } ‍\n# 最短路径 ‍\nBFS 求无权图最短路径\nvoid LG_MD_BFS(LG\u0026amp; lg, int u) { //求u到其他顶点的最短路径distance[u] QU Q; //创建队列 QU_new(Q); EdgeNode* p; for (int i = 0; i \u0026lt; lg.Vnum; i++) visited[i] = false; //标记数组初始化; for (int i = 0; i \u0026lt; lg.Vnum; i++) { Distance[i] = Infinity; //initial path[i] = -1; //from where? } Distance[u] = 0; visited[u] = true; QU_in(Q, lg.List[u].data); //入队 while (!QU_isVoid(Q)) { u = QU_head(Q); // QU_out(Q); //简单的队头元素出队,并取u值. for (p = lg.List[u].First_Edge; p != NULL; p = p-\u0026gt;next) { int k = p-\u0026gt;no; //设置k为中介,获得边节点p的顶点值 if (visited[k] == false) { Distance[k] = Distance[u] + 1; //路径长度加1(可改对应权值 path[k] = u; visited[k] = true; // 置顶点w已被访问标志 QU_in(Q, lg.List[k].data); //放入k } } } cout \u0026lt;\u0026lt; \u0026#34;目标顶点\u0026#34; \u0026lt;\u0026lt; u \u0026lt;\u0026lt; \u0026#34;到其他节点的带权路径长度为\\n\u0026#34;; for (int i = 0; i \u0026lt; lg.Vnum; i++) cout \u0026lt;\u0026lt; Distance[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; } void MG_MD_BFS(MG\u0026amp; mg, int u) { //求u到其他顶点的最短路径distance[u] QU Q; //创建队列 QU_new(Q); for (int i = 0; i \u0026lt; mg.Vnum; i++) visited[i] = false; //标记数组初始化; for (int i = 0; i \u0026lt; mg.Vnum; i++) { Distance[i] = Infinity; //initial path[i] = -1; //from where? } Distance[u] = 0; visited[u] = true; QU_in(Q, mg.VG[u]); //入队 while (!QU_isVoid(Q)) { u = QU_head(Q); // QU_out(Q); //简单的队头元素出队,并取u值. for (int j = 0; j \u0026lt; mg.Vnum; j++) { //从u元素对应的行开始找临界对象 if (mg.EG[u][j] != 0 \u0026amp;\u0026amp; visited[j] == false) { Distance[j] = Distance[u] + 1; path[j] = u; visited[j] = true; // 置顶点j已被访问标志 QU_in(Q, mg.VG[j]); //放入j } } } cout \u0026lt;\u0026lt; \u0026#34;目标顶点\u0026#34; \u0026lt;\u0026lt; u \u0026lt;\u0026lt; \u0026#34;到其他节点的带权路径长度为\\n\u0026#34;; for (int i = 0; i \u0026lt; mg.Vnum; i++) cout \u0026lt;\u0026lt; Distance[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; } ‍\n# 查找排序 (只有部分内容)\n# 希尔 void Shellsort(int A[], int n) { int d, i, j; for (d = n / 2; d \u0026gt;= 1; d = d / 2) //步长变化 for (i = d + 1; i \u0026lt;= n; ++i) if (A[i] \u0026lt; A[i - d]) { //需要将A[i]插入有序增量子表 A[0] = A[i]; //暂存在A[0] for (j = i - d; j \u0026gt; 0 \u0026amp;\u0026amp; A[0] \u0026lt; A[j]; j -= d) A[j + d] = A[j]; //后移寻找插入位置 A[j + d] = A[0]; //插入 } } ‍\n# 堆 void HeadAdjust(int A[], int k, int len) { //把以k为根的子树调整为大根堆 A[0] = A[k]; //A[0]暂时存放子树的根节点. for (int i = 2 * k; i \u0026lt;= len; i *= 2) { //从key较大的元素向下筛选 if (i \u0026lt; len\u0026amp;\u0026amp; A[i] \u0026lt; A[i + 1]) i++; if (A[0] \u0026gt;= A[i]) break; //筛选结束. else { A[k] = A[i]; //调整双亲节点为A[i] k = i; //更新k值以便向下筛选 } } A[k] = A[0]; //被筛选的节点的值放入最终位置. } void Build_Maxheap(int A[], int len) { for (int i = len / 2; i \u0026gt; 0; i--) HeadAdjust(A, i, len); //从后往前调整所有非终端节点. } void HeapSort_main(int A[], int len) { Build_Maxheap(A, len); //初始化.大根堆 for (int i = len; i \u0026gt; 1; i--) { swap(A[i], A[1]); //交换堆顶元素和堆底元素 , 自带函数. HeadAdjust(A, 1, i - 1); //剩余元素整理为堆的形式 } } ‍\n# 归并 ‍\n//int* F = new int[7]; //辅助数组B(f), 用来镜面数组A. int F[8]; void Merge(int A[], int low, int mid, int high) { //A[low...mid]和A[mid+1...high]各自有序,将两个部分归并 int i, j, k; for (k = low; k \u0026lt; high; k++) F[k] = A[k]; //构建镜面辅助数组; for (i = low, j = mid + 1, k = i; i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= high; k++) { if (F[i] \u0026lt; F[j]) A[k] = F[i++]; else A[k] = F[j++]; //将二者的较小值复制到A中. } while (i \u0026lt;= mid) A[k++] = F[i++]; while (j \u0026lt;= high) A[k++] = F[j++]; } void MergeSort_main(int A[], int low, int high) { if (low \u0026lt; high) { int mid = (low + high) / 2; //从中间划分 MergeSort_main(A, low, mid); //对左半部分归并排序 MergeSort_main(A, mid + 1, high); //对右半部分归并排序 Merge(A, low, mid, high); //Merge! } } ","permalink":"https://spadektlsg.github.io/p/cpp-%E5%AD%A6%E6%A0%A1%E8%AF%BE%E5%90%8E%E9%A2%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E5%90%8E%E5%B0%81%E7%89%88/","tags":[],"title":"Cpp 学校课后题数据结构学习后封版"},{"categories":[],"contents":" # 起因 和上次的动漫社事情一样, 是学校要求必须要报社团才去的, 之前没太多想法\n当时宿舍全员说都报一个社, 能进就都进, 那时我们还是信心十足的呢\n选择报名之后才知道原来需要面试才能进, 那就面吧.\n# 面试大杀特杀 当时是 10 月份的一个星期四, 面试人很多, 都在主楼 4 楼那一排站着 分笔试和面试. 轮到我进去后, 先领取笔试卷子, 框框写, 记得就是一些基础的 Cpp 题目和高考数学题 (我不知道为什么要做数学题, 感觉没什么意思); 之后就是面试, 会询问一些软件专业相关的基础问题 (cpp) 还会问一些 python 相关的东西, 因为我主动说我会 Python, 但是他问我一些特殊的 Python 语法糖, 我当然那个时候是没记住的, 我觉得不需要\u0026hellip;直接补全就好了\n于是我只能回答 \u0026ldquo;哦, 这个只是一些基础逻辑的掌握, 我还做了\u0026hellip;\u0026rdquo;, 现在发现, 哦这就是我的第一次面试, 第一次感受到了\u0026quot;博弈\u0026quot;.\n我记得那次我拿出了所有本领, 框框说, 有点对不住和我一起来的舍友, 形成对比了哈哈 (sorry man, if u are watching)\n然后就是等通知\n# 不合适就别强求 一周后一个宿舍就我进去了, \u0026ldquo;被大伙孤立\u0026rdquo;, 其实我心里暗爽.\n进去了之后呢, 也就做一些简单的集体训练, 学习 Cpp 特性, 学习 HTML + CSS, 学习 DreamWeaver 这样的设计, 但是实际上里面就是搬运一些菜鸟和一些博客, 就是照本宣科, 没什么技术实力. 只能说是给了自己一个\u0026quot;必须要学习的理由\u0026quot;\n我很反感这样的活动, 于是在 12 月退出了. 我完全不需要别人督促我学习, 我希望学习是一个主动的过程, 这样的学习风格我一直以来都很不爽.\n从内到外都充满了一种 \u0026ldquo;衡水味\u0026rdquo;, 我在高中就相当反感的东西, 那种指着你脑袋要你学 + 填鸭式教育的组合, 让我完全没有兴趣. 浪费了 2 周时间去完成他们无理由的作业, 实在是无趣至极.\n所以其实我想, 当初就不要通过为好, 浪费时间. 当然现在看来, 至少获得了一些聊以慰藉的\u0026quot;面试经验\u0026quot;与\u0026quot;社团经验\u0026quot;罢了.\n我不知道其后的社团活动内容, 但是从一开始我就知道 \u0026ldquo;这不适合于我\u0026rdquo;, 那么我就会退出, undoubtedly. 之后的青城培训也是一样, 既然不合适就不要强求自己, 哥们应润尽润.\n就这样.\n写于 2022-12-19 2024-04-10 修改后发布\n","permalink":"https://spadektlsg.github.io/p/%E9%9B%B6%E7%82%B9%E5%B7%A5%E4%BD%9C%E5%AE%A4/","tags":[],"title":"零点工作室"},{"categories":[],"contents":"‍\n开始之前, 简单介绍一下故事背景\n在大学时候有英语课, 由于高考英语成绩优异进入了几个学院合并教学的英语培优班. 上课内容相比于普通版而言难度很大, 讲真的浪费了我大学剩余不多的课余时间的许多部分. 但至少取得的成就是挺多了, 个人英语实力也从高考后大约501的4级成绩到了590的4级, 之后一年的提升巨大, 6级在38.5度发烧(甚至耳鸣导致听力都听不清楚了)的巨大劣势下得到了583分, 个人感觉听力至少能追回来15分, 就算自己600分罢.\n‍\n平常每周都有许多的课外任务, 在2023年之前, 也就是大一大二上的时候我认为自己大部分都认真完成了(其实如果后来确定就业了这些是完全没用的), 而其中就有这样的视频制作任务:\n‍\n给你一天时间, 制作一段关于自己家乡的多语言介绍\n哥们在自习室是非常有素质的, 自习室不能讲话读稿子, 因此配音事情只能够在外面进行; 但是如果要剪辑视频的话, 要回到自习室.\n于是就有了这样的行动方案, 大一开始行动后续一直使用到了英语课结束为止\n‍\n1，先做无声视频. 制作完视频后，开始写发言文案\n2，文案策划好后，找个空旷的无人地方读你的文案，注意分段(方便识别)\n3，将分段素材上传剪辑软件，清洗后（降噪等）开始拼接\n4，拼接完你会得到一个有你的声音和制作完整的视频，导出为demo01\n5，Demo01放回视频软件，识别字幕.\n6，对着识别的字幕，通过手工复制黏贴翻译文本完成双层字幕嵌套 (为了让字幕k上对应视频帧)\n7, 导出完整复合视频\n滴6步，去对着demo1手动读你的翻译稿子（中文）. 然后得到录音文件放到剪辑软件里进行识别，得到中文翻译字幕，将两层字幕直接排版嵌套导出这样就不需要手动操作了，只需要念稿子，依靠机器识别实现视频自由\n相较于手动写双语字幕K字幕还是快了不少的, 在没有什么剪辑/视频制作技巧的情况下也很好上手. 因此分享出来\n‍\n当然, 后来22年左右出现了许多的AI软件可以帮助完成, 但是当时21年我是不知道的.\n‍\n","permalink":"https://spadektlsg.github.io/p/%E6%A0%A1%E5%9B%AD%E8%87%AA%E4%B9%A0%E5%AE%A4%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%A4%9A%E8%AF%AD%E8%A8%80%E8%A7%86%E9%A2%91%E5%88%B6%E4%BD%9C/","tags":[],"title":"校园自习室环境下的多语言视频制作"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\n# Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\n# Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\n# Edit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\n# Edit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","permalink":"https://spadektlsg.github.io/search/","tags":null,"title":"Search Results"}]